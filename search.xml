<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>输入URL地址敲回车之后发生了什么</title>
      <link href="/2018/11/10/enter-event/"/>
      <url>/2018/11/10/enter-event/</url>
      
        <content type="html"><![CDATA[<blockquote><p> 输入网址敲回车之后,<br> 浏览器开始向DNS服务器发送请求,    (request)请求<br> DNS服务器解析,<br> 找到IP地址对应的服务器,<br> 服务器根据对应的端口号找到对应的项目,<br> 将需要的数据代码编码后返回给浏览器客户端,并将数据的类型告诉浏览器(HTML/json…),     (response)响应<br> 浏览器将接收到的数据根据返回来的数据类型进行解析,</p></blockquote><h4 id="http事物-request请求和response响应都成功就是一个完整的HTTP事物"><a href="#http事物-request请求和response响应都成功就是一个完整的HTTP事物" class="headerlink" title="http事物: request请求和response响应都成功就是一个完整的HTTP事物;"></a>http事物: request请求和response响应都成功就是一个完整的HTTP事物;</h4><h4 id="https-www-baidu-com-443-xx-yy-index-html-name-aa-amp-age-30-id-5"><a href="#https-www-baidu-com-443-xx-yy-index-html-name-aa-amp-age-30-id-5" class="headerlink" title="https://www.baidu.com:443/xx/yy/index.html?name=aa&amp;age=30#id=5"></a><a href="https://www.baidu.com:443/xx/yy/index.html?name=aa&amp;age=30#id=5" target="_blank" rel="noopener">https://www.baidu.com:443/xx/yy/index.html?name=aa&amp;age=30#id=5</a></h4><h4 id="https-–-www-baidu-com-–-443-–-xx-yy-index-html-–-name-aa-amp-age-30-–-id-5"><a href="#https-–-www-baidu-com-–-443-–-xx-yy-index-html-–-name-aa-amp-age-30-–-id-5" class="headerlink" title="(https) – (www.baidu.com ) – (443) – (/xx/yy/index.html) – (name=aa&amp;age=30) – (id=5)"></a>(https) – (www.baidu.com ) – (443) – (/xx/yy/index.html) – (name=aa&amp;age=30) – (id=5)</h4><h2 id="1-HTTPS-传输协议"><a href="#1-HTTPS-传输协议" class="headerlink" title="1.(HTTPS) 传输协议"></a>1.(HTTPS) 传输协议</h2><blockquote><p>https / http  完成客户端和服务端的数据交互传输<br>https: 更加安全<br>http: 超文本传输协议<br>FTP: 往服务器上上传项目文件</p></blockquote><h2 id="2-www-baidu-com-域名"><a href="#2-www-baidu-com-域名" class="headerlink" title="2.(www.baidu.com) 域名:"></a>2.(www.baidu.com) 域名:</h2><blockquote><p>一级域名<br>二级域名<br>三级域名</p></blockquote><h2 id="3-443-端口号"><a href="#3-443-端口号" class="headerlink" title="3.(443) 端口号:"></a>3.(443) 端口号:</h2><p>根据端口号找到对应的项目</p><blockquote><p>http: 默认端口号80<br>https: 默认端口号443<br>FTP: 默认端口号21</p></blockquote><h2 id="4-xx-yy-index-html-项目地址"><a href="#4-xx-yy-index-html-项目地址" class="headerlink" title="4.(/xx/yy/index.html)项目地址"></a>4.(/xx/yy/index.html)项目地址</h2><p>根据地址值找到项目下的具体页面文件</p><blockquote><p>/xx/yy/index.html 真实地址, 请求资源文件<br>/xxx  伪地址, 请求数据</p></blockquote><h2 id="5-name-aa-amp-age-30-参数"><a href="#5-name-aa-amp-age-30-参数" class="headerlink" title="5.(name=aa&amp;age=30)参数"></a>5.(name=aa&amp;age=30)参数</h2><p>参数格式是后台规定的,根据参数的值返回响应的数据</p><h2 id="6-id-5-哈希值-Hash值"><a href="#6-id-5-哈希值-Hash值" class="headerlink" title="6.(id=5) 哈希值 Hash值"></a>6.(id=5) 哈希值 Hash值</h2><blockquote><p>锚点定位<br>路由</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端基础 </tag>
            
            <tag> http </tag>
            
            <tag> url </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>javascript学习之json常用方法</title>
      <link href="/2018/02/15/page/javascript-json/"/>
      <url>/2018/02/15/page/javascript-json/</url>
      
        <content type="html"><![CDATA[<h2 id="javascript中JSON语法有三种表示方法："><a href="#javascript中JSON语法有三种表示方法：" class="headerlink" title="javascript中JSON语法有三种表示方法："></a>javascript中JSON语法有三种表示方法：</h2><h3 id="简单值-“hello-json”"><a href="#简单值-“hello-json”" class="headerlink" title="* 简单值     “hello json”"></a>* 简单值     “hello json”</h3><h3 id="对象-“name”-”jack”"><a href="#对象-“name”-”jack”" class="headerlink" title="* 对象        {“name”:”jack”}"></a>* 对象        {“name”:”jack”}</h3><h3 id="数组-“aaa”-”bbb”-“ccc”-”ddd”"><a href="#数组-“aaa”-”bbb”-“ccc”-”ddd”" class="headerlink" title="* 数组        [{“aaa”:”bbb”},{“ccc”:”ddd”}]"></a>* 数组        [{“aaa”:”bbb”},{“ccc”:”ddd”}]</h3><h2 id="JSON常用的两个方法："><a href="#JSON常用的两个方法：" class="headerlink" title="JSON常用的两个方法："></a>JSON常用的两个方法：</h2><h2 id="1-stringify"><a href="#1-stringify" class="headerlink" title="1.stringify()"></a>1.stringify()</h2><h2 id="2-parse"><a href="#2-parse" class="headerlink" title="2.parse()"></a>2.parse()</h2><h2 id="stringify用法："><a href="#stringify用法：" class="headerlink" title="*stringify用法："></a>*stringify用法：</h2><h4 id="用法一：-把javascript对象转化成JSON格式"><a href="#用法一：-把javascript对象转化成JSON格式" class="headerlink" title="用法一： 把javascript对象转化成JSON格式:"></a>用法一： 把javascript对象转化成JSON格式:</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">var demo = &#123;</span><br><span class="line">  <span class="string">"name"</span>:<span class="string">"aaa"</span>,</span><br><span class="line">  <span class="string">"type"</span>:<span class="string">"bbb"</span> </span><br><span class="line">&#125;</span><br><span class="line">var jsonDemo = JSON.stringify(demo);</span><br><span class="line">console.log(jsonDemo);</span><br></pre></td></tr></table></figure><ul><li>得到结果：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="string">"name"</span>:<span class="string">"aaa"</span>,<span class="string">"type"</span>:<span class="string">"bbb"</span>&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="用法二：把javascript对象转化成JSON格式，增加过滤，只留想要的数据"><a href="#用法二：把javascript对象转化成JSON格式，增加过滤，只留想要的数据" class="headerlink" title="用法二：把javascript对象转化成JSON格式，增加过滤，只留想要的数据"></a>用法二：把javascript对象转化成JSON格式，增加过滤，只留想要的数据</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">var demo = &#123;</span><br><span class="line"><span class="string">"name"</span>:<span class="string">"aaa"</span>,</span><br><span class="line"><span class="string">"sex"</span>:<span class="string">"boy"</span>,</span><br><span class="line"><span class="string">"age"</span>: 20</span><br><span class="line">&#125;</span><br><span class="line">var jsonDemo = JSON.stringify(demo,[<span class="string">"name"</span>]);</span><br><span class="line">console.log(jsonDemo);</span><br></pre></td></tr></table></figure><ul><li>得到结果：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="string">"name"</span>:<span class="string">"aaa"</span>&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="用法三：把javascript对象转化成JSON格式，并改变原有的值"><a href="#用法三：把javascript对象转化成JSON格式，并改变原有的值" class="headerlink" title="用法三：把javascript对象转化成JSON格式，并改变原有的值"></a>用法三：把javascript对象转化成JSON格式，并改变原有的值</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">var demo = &#123;</span><br><span class="line"><span class="string">"name"</span>:<span class="string">"aaa"</span>,</span><br><span class="line"><span class="string">"sex"</span>:<span class="string">"bbb"</span>,</span><br><span class="line"><span class="string">"type"</span>:<span class="string">"ccc"</span></span><br><span class="line">&#125;</span><br><span class="line">var jsonDemo = JSON.stringify(demo,<span class="keyword">function</span> (key, value) &#123;</span><br><span class="line">switch(key)&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">"name"</span>: <span class="built_in">return</span> <span class="string">"a"</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">"sex"</span>: <span class="built_in">return</span> <span class="string">"b"</span>;</span><br><span class="line">default: <span class="built_in">return</span> value;</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">console.log(jsonDemo);</span><br></pre></td></tr></table></figure><ul><li>得到结果：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="string">"name"</span>:<span class="string">"a"</span>,<span class="string">"sex"</span>:<span class="string">"b"</span>,<span class="string">"type"</span>:<span class="string">"ccc"</span>&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="用法四：把javascript对象转化成JSON格式，并控制缩进和空白符"><a href="#用法四：把javascript对象转化成JSON格式，并控制缩进和空白符" class="headerlink" title="用法四：把javascript对象转化成JSON格式，并控制缩进和空白符"></a>用法四：把javascript对象转化成JSON格式，并控制缩进和空白符</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">var book = &#123;</span><br><span class="line"><span class="string">"title"</span>: <span class="string">"aaa"</span>,</span><br><span class="line"><span class="string">"type"</span>: <span class="string">"bbb"</span>,</span><br><span class="line"><span class="string">"page"</span>: 50</span><br><span class="line">&#125;</span><br><span class="line">var jsonBook = JSON.stringify(book,null,<span class="string">"$$"</span>);</span><br><span class="line">console.log(jsonBook)</span><br></pre></td></tr></table></figure><ul><li>得到结果：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">$$<span class="string">"title"</span>: <span class="string">"aaa"</span>,</span><br><span class="line">$$<span class="string">"type"</span>: <span class="string">"bbb"</span>,</span><br><span class="line">$$<span class="string">"page"</span>: 50</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>－该方法第三个参数如果为数字，那么就是每个属性前面缩进的字符数。</p><h2 id="parse-方法"><a href="#parse-方法" class="headerlink" title="*parse()方法"></a>*parse()方法</h2><h4 id="用法一：把JSON转化成javascript格式-用来解析JSON字符串，构造由字符串描述的JavaScript值或对象。"><a href="#用法一：把JSON转化成javascript格式-用来解析JSON字符串，构造由字符串描述的JavaScript值或对象。" class="headerlink" title="用法一：把JSON转化成javascript格式, 用来解析JSON字符串，构造由字符串描述的JavaScript值或对象。"></a>用法一：把JSON转化成javascript格式, 用来解析JSON字符串，构造由字符串描述的JavaScript值或对象。</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var book = <span class="string">'&#123;"title":"aaa", "type":"bbb", "page":"50"&#125;'</span>;</span><br><span class="line">  var demo = JSON.parse(book);</span><br><span class="line">  console.log(demo);</span><br></pre></td></tr></table></figure><ul><li>得到结果：<br><code>demo.html:11 {title: &quot;aaa&quot;, type: &quot;bbb&quot;, page: &quot;50&quot;}</code></li></ul><h4 id="用法二：把JSON转化为javascript过程中，改变原有的值"><a href="#用法二：把JSON转化为javascript过程中，改变原有的值" class="headerlink" title="用法二：把JSON转化为javascript过程中，改变原有的值"></a>用法二：把JSON转化为javascript过程中，改变原有的值</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">var book = <span class="string">'&#123;"title":"aaa", "type":"bbb", "page":50&#125;'</span>;</span><br><span class="line">  var demo = JSON.stringify(book);</span><br><span class="line">  var javascriptDemo = JSON.parse(demo, <span class="keyword">function</span> (key, value) &#123;</span><br><span class="line"> switch (key) &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">"title"</span>: <span class="built_in">return</span> <span class="string">"bbbbbb"</span>;</span><br><span class="line">default: <span class="built_in">return</span> value;</span><br><span class="line"> &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">  console.log(javascriptDemo);</span><br></pre></td></tr></table></figure><ul><li>得到结果：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="string">"title"</span>:<span class="string">"aaa"</span>, <span class="string">"type"</span>:<span class="string">"bbb"</span>, <span class="string">"page"</span>:50&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> js学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
            <tag> json </tag>
            
            <tag> js </tag>
            
            <tag> js基础 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>case-demo</title>
      <link href="/2018/02/15/case-demo-2/"/>
      <url>/2018/02/15/case-demo-2/</url>
      
        <content type="html"><![CDATA[<h3 id="豆瓣电影介绍小案例"><a href="#豆瓣电影介绍小案例" class="headerlink" title="豆瓣电影介绍小案例"></a><a href="douban-movie">豆瓣电影介绍小案例</a></h3><h3 id="一个备忘录小案例"><a href="#一个备忘录小案例" class="headerlink" title="一个备忘录小案例"></a><a href="todo">一个备忘录小案例</a></h3><h3 id="一个弹力球小案例"><a href="#一个弹力球小案例" class="headerlink" title="一个弹力球小案例"></a><a href="flex-demo">一个弹力球小案例</a></h3><h3 id="一个圆形开屏导航栏小案例"><a href="#一个圆形开屏导航栏小案例" class="headerlink" title="一个圆形开屏导航栏小案例"></a><a href="spread">一个圆形开屏导航栏小案例</a></h3><h3 id="微金所首页小案例"><a href="#微金所首页小案例" class="headerlink" title="微金所首页小案例"></a><a href="wjs">微金所首页小案例</a></h3><h3 id="一个网页小demo"><a href="#一个网页小demo" class="headerlink" title="一个网页小demo"></a><a href="vue-project-01">一个网页小demo</a></h3>]]></content>
      
      
      <categories>
          
          <category> demo，案例 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> github </tag>
            
            <tag> npm </tag>
            
            <tag> 基础 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>node学习笔记</title>
      <link href="/2018/02/15/node_base/"/>
      <url>/2018/02/15/node_base/</url>
      
        <content type="html"><![CDATA[<h2 id="1-node-能够解决什么问题"><a href="#1-node-能够解决什么问题" class="headerlink" title="1.node 能够解决什么问题?"></a>1.node 能够解决什么问题?</h2><blockquote><p>node的首要目标是提供一种简单的,用于创建高性能服务器的开发工具;<br>Web服务器的瓶颈在于并发的用户量,对比java和PHP的实现方式;</p><h2 id="2-node是什么"><a href="#2-node是什么" class="headerlink" title="2.node是什么?"></a>2.node是什么?</h2><p>node.js是一个基于Chrome V8 引擎的JavaScript运行环境,让JavaScript的执行效率与底端的C语言的执行效率相近;<br>node.js使用了一个事件驱动,非阻塞式I/O的模型,使其轻量又高效;<br>node.js的包管理器npm,是全球最大的开源库生态系统;</p><h2 id="3-node特点"><a href="#3-node特点" class="headerlink" title="3.node特点"></a>3.node特点</h2><p>####3.1为什么JavaScript是单线程?<br>这是由JavaScript这门脚本语言的用途决定的;<br>Web Worker并没有改变JavaScript单线程的本质;</p><p>####3.2浏览器模型<br>用户界面:包括地址栏,前进后退按钮,书签菜单等;<br>浏览器引擎: 在用户界面和呈现引擎之间传送指令;<br>呈现引擎:又称渲染引擎,也被成为浏览器内核,在线程方面又称UI线程;<br>网络:用于网络调用,比如: HTTP请求;<br>用户界面后端:用于绘制基本的窗口小部件,UI线程和JS共用一个线程;<br>JavaScript解析器:用于解析和执行JavaScript代码;<br>数据存储:这是持久层;浏览器需要在硬盘上保存各种数据,例如Cookie;</p><p>####3.3除了JS线程和UI线程之外的其它线程<br>浏览器事件触发线程<br>定时触发器线程<br>异步HTTP请求线程</p><p>####3.4任务队列<br>1.所有同步任务都是在主线程上执行,形成一个执行栈;<br>2.主线程之外,还存在一个任务队列,只要异步任务有了运行结果,就在任务队列中放置一个事件;<br>3.一旦执行栈中的所有同步任务执行完毕,系统就会读取任务队列,看看里面有哪些事件,哪些对应的异步任务,于是结束等待状态,进入执行栈,开始执行;<br>4.主线程不断重复上面的第三步;</p><p>####3.5EventLoop<br>主线程从任务队列中读取事件,这个过程是循环不断的,所以整个的这种运行机制又称为EventLoop(事件循环);</p><p>####3.6node.js的EventLoop<br>1.V8引擎解析JavaScript脚本;<br>2.解析后的代码,调用node API;<br>3.libuv库负责node API的执行,将不用的任务分配给不同的线程,形成一个EventLoop(事件循环),以异步的方式将任务的执行结果返回个V8引擎;<br>4.V8引擎再将结果返回给 用户;</p><p>####3.7同步与异步<br>同步和异步关注的是消息通知机制;<br><code>同步</code>就是发出调用后,没有得到结果之前,该调用不返回,一旦调用返回,就得到返回值了。简而言之就是调用者主动等待这个调用的结果;<br><code>异步</code>则相反,调用者在发出调用后这个调用就直接返回了,所以没有返回结果,即:当一个异步过程调用发出后,调用者不会立刻得到结果,而是调用发出后,被调用者通过状态、通知或回调函数处理这个调用;</p><p>####3.8阻塞与非阻塞<br>阻塞和非阻塞关注的是程序在等待调用结果(消息/返回值)时的状态;<br><code>阻塞</code>调用是指调用结果返回之前,当前线程会被挂起,只有在得到结果之后才会返回;<br><code>非阻塞</code>调用是指在不能立刻得到结果之前,该调用不会阻塞当前线程;</p><p>####3.9组合<br><strong><code>同步异步取决于被调用者,阻塞非阻塞取决于调用者;</code></strong><br>同步阻塞: A给B打电话商量事情,通话过程中B考虑了1分钟(同步),A等待了1分钟什么也没干(阻塞);<br>异步阻塞: A给B打电话商量事情,B挂断电话1分钟后回复A(异步),A等待了1分钟什么也没干(阻塞);<br>同步非阻塞: A给B打电话商量事情,通话过程中B考虑了1分钟(同步),A在这1分钟里干了别的事情(非阻塞)<br>异步非阻塞: A给B打电话商量事情,B挂断电话1分钟后回复A(异步),A在这1分钟里干了别的事情(非阻塞);</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端基础 </tag>
            
            <tag> node </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>node介绍</title>
      <link href="/2018/02/15/nodejs_base/"/>
      <url>/2018/02/15/nodejs_base/</url>
      
        <content type="html"><![CDATA[<h2 id="nodejs介绍"><a href="#nodejs介绍" class="headerlink" title="nodejs介绍"></a>nodejs介绍</h2><h4 id="nodejs不是一门语言-是一个运行环境-在node环境中运行JS"><a href="#nodejs不是一门语言-是一个运行环境-在node环境中运行JS" class="headerlink" title="nodejs不是一门语言,是一个运行环境,在node环境中运行JS;"></a>nodejs不是一门语言,是一个运行环境,在node环境中运行JS;</h4><blockquote><p>1.使用的是Chrome的V8引擎;<br>2.基于事件驱动的I/O操作(input/output);<br>3.单线程异步开发;<br>4.因为使用JS,所以适合前端人员上手;<br>5.自带NPM包管理器(全球最大的包管理器,使用NPM安装各种开发需要的安装包);<br>6.模块化开发,node自带很多内置模块;</p></blockquote><h3 id="node中的模块"><a href="#node中的模块" class="headerlink" title="node中的模块"></a>node中的模块</h3><h4 id="node中的模块分为三种"><a href="#node中的模块分为三种" class="headerlink" title="node中的模块分为三种"></a>node中的模块分为三种</h4><blockquote><p>1.内置模块: node自带的模块,如fs,http,url…等等;官方中文文档: <a href="http://nodejs.cn/api" target="_blank" rel="noopener">http://nodejs.cn/api</a><br>2.自定义模块: 自己写的模块,一个JS就是一个模块,用的时候需要导入进来;<br>3.第三方模块: 别人发布的模块,需要下载安装来使用(一般使用NPM包管理器安装);</p></blockquote><h3 id="如何使用npm安装第三方模块"><a href="#如何使用npm安装第三方模块" class="headerlink" title="如何使用npm安装第三方模块"></a>如何使用npm安装第三方模块</h3><blockquote><p><code>npm init -y</code><br>创建package.json文件,记录开发依赖<br><code>npm install less -g</code><br>将less安装在全局中;<br>g  –&gt; global, node中的全局对象<br><code>npm install less</code><br>将less安装在当前项目下;<br><code>npm install less --save-dev</code><br>“–save” 生产依赖<br>“–save-dev” 开发依赖</p><p>在package.json文件中,出现:<br><code>&quot;devDependencies&quot;: {     &quot;less&quot;: &quot;^2.7.3&quot;}</code><br>来记录开发依赖;</p><p><code>&quot;dependencies&quot;: {    &quot;bootstrap&quot;: &quot;^4.0.0&quot;}</code><br>来记录生产依赖</p><p>安装了第三方模块会在当前项目下自动创建一个node_modules文件夹和一个package-lock.json文件</p><ul><li>NODE <ul><li>node_modules</li><li>package-lock.json</li></ul></li></ul><p>得到一个package.json文件,里面有配置好的文件名称,直接运行npm install回车,即可安装所有文件,叫做跑环境;</p></blockquote><h3 id="fs模块"><a href="#fs模块" class="headerlink" title="fs模块"></a>fs模块</h3><blockquote><p>fs是node内置模块,处理文件写入和读取;<br>内置模块需要require导入进来</p><ul><li>引入fs模块</li><li>let fs = require(“fs”);</li><li></li><li>读取文件内容</li><li>fs.readFile();异步读取,不管是否读取完成,后面代码不受影响,继续执行;</li><li>fs.readFileSync();同步读取,只有读取完成后才会执行后面的代码;</li><li>fs.readFileSync([“pathName路径(必填)]”,[编码格式”urf-8”(选填)]);</li><li>fs.readFile([“pathName路径(必填)]”,[编码格式”urf-8”(选填)], (error, value) =&gt; {</li><li>todoSomething…</li><li>});</li><li></li><li>写入文件内容</li><li>fs.writeFile(“文件的路径”, “写入的内容”, “编码”, 回调函数callback);异步写入;</li><li>fs.writeFileSync(“文件的路径”, “写入的内容”, “编码”);同步写入;</li><li>写入文件内容相当于重写文件内容,之前的内容就会覆盖消失;</li><li></li><li>读取文件夹(文件目录)</li><li>fs.readdir(“路径”, (error, value) =&gt; {</li><li>value是一个数组:[“文件夹名字”, “文件夹名字”,…];</li><li>todoSomething…</li><li>});</li><li>fs.readdirSync(“路径”); 也是返回一个数组;</li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端基础 </tag>
            
            <tag> node </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>ajax基础知识和核心原理</title>
      <link href="/2018/02/15/ajax_base/"/>
      <url>/2018/02/15/ajax_base/</url>
      
        <content type="html"><![CDATA[<p>###ajax基础知识</p><p>####1.什么是ajax:</p><blockquote><p>Async Javascript And XML ====&gt; 异步的JS和XML;<br>XML:可扩展的标记语言(自定义的一些标签,包裹数据,服务器传递数据);<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">root</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">student</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>王二小<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">age</span>&gt;</span>33<span class="tag">&lt;/<span class="name">age</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">sex</span>&gt;</span>男<span class="tag">&lt;/<span class="name">sex</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">student</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br></pre></td></tr></table></figure></p></blockquote><p>####2.Ajax异步的概念:<br><code>局部刷新</code>:数据传递的是json字符串,前后端分离<br>1).向服务器发送ajax请求;<br>2).将服务器返回的数据经过前端的解析处理,绑定到页面上;<br>3).页面只需要改变一部分,整个页面不需要重新的渲染;<br><code>全局刷新</code>:页面的整体刷新,当页面上数据发生改变时,向后台发送请求,后台会将页面的数据重新渲染一遍,将渲染好的页面返回给客户端呈现,这是全局刷新,也是前后端不分离。这就要求后台去套数据,一般会使用jsp来套数据;</p><p>###前后端分离和不分离的优势和劣势</p><p>####不分离的优势:</p><blockquote><p>1.页面上的数据都是服务器渲染好的,源代码上能看到数据,有利于SEO优化(SEO:搜索引擎的收录和抓取);<br>2.从服务器上获取的页面已经是渲染好的,不需要客户端在去额外的请求,所以页面加载速度比较快(前提是服务器够快),一般京东淘宝这样的页面首屏一般都是前后端不分离,直接渲染好页面给前端返回;</p><p>####不分离的劣势:<br>1.如果页面有很多内容需要改变,需要实时获取数据,每次更新数据都要重新刷新一下页面,客户体验不好;<br>2.每次都是服务器渲染的话,对服务器的要求比较高,服务器的压力比较大,如果服务器处理不过来,就会导致加载变慢甚至服务器崩溃;所以京东淘宝等网站只有首屏才会采用服务器渲染以提高页面加载速度;<br>3.目前市场上前后端分离的项目占大部分;</p><p>####分离的优势<br>1.可以根据需求任意改变页面的某一部分的数据更新,而不用刷新整个页面(例如:实时刷新,表单提交,用户登录),用户体验好;<br>2.有利于开发,提高开发效率,开发的时候前后端互不影响,不需要考虑各自使用的技术,相当于实现了技术的分离;可以进行同时开发,项目开始的时候,只需要制定以下交互文档(API文档),规定请求的url,请求方式,参数,返回数据格式等等,前端也可以使用node模拟接口和数据,来验证和调试页面;</p><p>####分离的弊端<br>1.不利于SEO优化(注意:后期使用JS将数据绑定到页面上,不会在源代码上体现,所以不会被SEO收录和抓取);<br>2.刚开始加载时,请求资源文件的时候如果请求次数过多,会影响页面的加载速度;为了防止加载速度过慢,可以进行优化处理;</p><p>###基于原生实现ajax</p><p>####示例:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建ajax对象:</span></span><br><span class="line"><span class="keyword">let</span> xhr = <span class="keyword">new</span> XMLHttprequest();</span><br><span class="line"><span class="comment">// 定义请求方式,同步或者异步,请求路径等等:</span></span><br><span class="line">xhr.open(<span class="string">"method"</span>, <span class="string">"URL"</span>, <span class="keyword">async</span>, user.name, user.password);</span><br><span class="line"><span class="comment">// 定义返回状态:</span></span><br><span class="line">xhr.onreadystatechange = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (xhr.readyState === <span class="number">4</span> &amp;&amp; xhr.status === <span class="number">200</span>) &#123;</span><br><span class="line"><span class="comment">// 获取响应的文本内容;</span></span><br><span class="line"><span class="keyword">let</span> res = xhr.responseText;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 开始发送请求(请求主体的内容数据):</span></span><br><span class="line">xhr.send(<span class="literal">null</span>);</span><br></pre></td></tr></table></figure></p></blockquote><p>####<strong><code>分析open的参数:</code></strong></p><blockquote><p>1.method: ajax的请求方式:<br>1).<code>GET</code>系列方式(获取数据):</p><ul><li>get: 从服务器获取数据;</li><li>delete: 从服务器上删除某些文件;</li><li>head: 获取响应头信息;(不要响应主体,只要响应头);</li><li>……</li></ul><p>2).<code>POST</code>系列方式((推送数据):</p><ul><li>post: 向服务器传递数据;</li><li>put: 向服务器添加指定的资源文件;</li><li>……<br><code>不管是哪一种方式,都可以向服务器发送数据,也可以获取数据,但是一般GET系列以获取为主,POST系列就是以发送数据为主;</code><br><code>1).想获取动态展示的数据(如:新闻列表),一般使用GET请求,因为只需要告诉服务器需要什么,服务器就返回需要的内容;</code><br><code>2).当页面上有大量信息需要发送给服务器(如:表单提交),服务器接收到数据只需要返回成功或失败的状态,此时合适POST请求;</code><br>####第一个参数:GET和POST具体有哪些区别<br>#####区别1:数据携带方式:  <code>GET</code>向服务器发送请求时,发送的内容比<code>POST</code>少,获取的比<code>POST</code>多;</li><li>1.GET请求的参数是拼接在url上的,通过url的参数形式来传递数据,但是url的大小是有限制的,只有几KB,一旦超过限制,就会被默认剪切掉,所以无法携带大量的数据;</li><li>2.<code>POST</code>发送的数据是通过请求主体实现的,理论上大小是没有限制的,但是真实项目中为了保证传输数据的速度,也会加一些限制(例如:上传资料/图片等等文件时,后台服务器做一下特殊处理);<br>#####区别2:缓存问题: <code>GET</code>请求容易走缓存,<code>POST</code>不会:</li><li><code>GET</code>通过url传参数的方式请求数据,当遇到实时获取数据的时候,以为url是一样的,参数也是一样的,此时浏览器就会默认读取缓存中的内容返回给页面,导致获取不到服务器最新的数据,一般都是在参数后面加一个时间戳或者随机数来防止浏览器读取缓存;</li><li><code>POST</code>请求不会走缓存,因为请求的数据在请求主体中,是不会走缓存的;<br>#####区别3:安全性: <code>GET</code>请求法师没有<code>POST</code>请求方式安全:</li><li><code>GET</code>的参数在url上,一些简单的黑客技术,拦截url(url劫持),也可以把客户端传递的信息获取到,导致信息泄露;</li><li><code>POST</code>的信息都在请求主体中,相对比较安全;<br>####第二个参数:URL<br><code>这个url地址就是后台给的地址,一般都会有一个API文档,参照文档写就成;</code><br>####第三个参数: Async</li><li>async: true 不写就是默认true,===&gt;异步;</li><li>async:false ===&gt; 同步;<br>####最后两个参数:用户名,密码<br><code>一般不需要写,只有一些服务器不允许匿名访问,只有开通权限的才可以访问,比如一些重要机密的,银行等这样的服务器才会设置权限;</code><br>####<strong><code>第三部分解析</code></strong><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xhr.onreadystatechange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;;</span><br></pre></td></tr></table></figure></li></ul><p>ajax请求中xhr.readyState的状态码: </p><ul><li>0: 创建一个ajax对象,默认状态是0;</li><li>1: 执行xhr.open是1;</li><li>2: 请求已发送,并接受到了响应头是2;</li><li>3: 响应主体在路上是3;</li><li>4:响应主体返回客户端是4;</li></ul><p>ajax请求中xhr.status的HTTP网络状态码:</p><ul><li>200:成功状态,一个完整的HTTP事物完成,以2开头的都是成功状态;</li><li>300:以3开头的状态码也是成功状态,只不过是服务器做了一些处理;</li><li>301:永久重定向(永久转移),一般都是域名的迁移;比如京东的www.360buy.com重定向到www.jd.com;</li><li>302:临时重定向(临时转移),在新版的HTTP中307也代表临时重定向,一般是在处理服务器的负载均衡,当一个服务器负荷太大,将内容临时迁移到另一个服务器上处理,主要是一些图片,有一些大公司一般都有专门处理图片的服务器;</li><li>304:从浏览器中读取缓存,把一些不经常更新的文件和图片缓存,减少服务器的压力,增加页面的加载速度;</li></ul><p>以4开头的都是失败的,一般都是客户端的错误;</p><ul><li>400:请求参数错误;</li><li>401:无权限访问;</li><li>404:访问的地址不存在;</li></ul><p>以5开头的一般都是服务器的错误;</p><ul><li>500:服务器未知错误;</li><li>503:服务器超负载;</li></ul></blockquote><p><strong>ajax常用的属性和方法有哪些</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line"><span class="built_in">console</span>.dir(xhr);</span><br></pre></td></tr></table></figure></p><blockquote><p>[属性]</p><ul><li>readyState:存储的是ajax的状态码;</li><li>responseText/responseXML:返回的是响应主体的内容,只是格式不一样,使用不同的属性接收即可;<ul><li>responseText 一般都是json字符串;</li><li>responseXML是XML格式的数据字符串;</li></ul></li><li>status:记录服务器返回的HTTP状态码;</li><li>statusText:对返回状态码status的描述;</li><li>timeout:设置ajax请求的超时时间;超过设置的时间响应主体还没回来,浏览器就会把请求强制断开;</li></ul><p>[方法]</p><ul><li>abort():强制中断ajax请求;</li><li>getAllResponseHeaders();获取全部响应头的信息(获取的是一堆字符串文本);</li><li>getResponseHeader(“属性名”);获取指定的响应头;如:getResponseHeader(“date”);获取响应头中存储的服务器的时间;</li><li>open(); 略</li><li>overrideMimeType();重写MIME类型;</li><li>send(); 略</li><li>setRequestHeader(“属性名”,属性值);设置请求头;<code>注意</code>:必须写在open()之后,send()之前,内容不可以是中文,否则会报错;<br>[事件]</li><li>onabort();当ajax中断的时候触发的事件;</li><li>onreadystatechange();当ajax状态发生变化就会触发的事件;</li><li>ontimeout();当ajax超时触发的事件;</li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ajax </tag>
            
            <tag> 前端基础 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>JS编码方式</title>
      <link href="/2018/02/15/JS_base/"/>
      <url>/2018/02/15/JS_base/</url>
      
        <content type="html"><![CDATA[<blockquote><p>1.escape/unescape(一般只有js支持,前端网页之间的数据传递的时候进行的中文编码和解码);<br>2.encodeURI/decodeURI;所有的语言都支持;<br>3.encodeURIComponent/decodeURIComponent;同上面,这个可以编译一些特殊字符,上面的不行,最常用的是这个;</p><p>###ajax的异步和同步问题<br>ajax任务:发送请求到收到响应主体内容(完整的HTTP事物);<br>ajax任务开始时发送请求开始(xhr.send());<br>同步请求下,绑定监听状态的事件(onreadystatechange)放在open之前可以监听1,4的状态,不可以放在send之后,因为send执行就已经状态为4, 结束了;<br>异步请求下,绑定监听状态的事件(onreadystatechange)放在open之前可以监听1,2,3,4的状态,放在open之后可以监听2,3,4的状态,</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端基础 </tag>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>&#39;人生最重要的三种能力&#39;</title>
      <link href="/2018/02/13/article-0001/"/>
      <url>/2018/02/13/article-0001/</url>
      
        <content type="html"><![CDATA[<h2 id="网络转载——人生最重要的三种能力，不是读书能学来的"><a href="#网络转载——人生最重要的三种能力，不是读书能学来的" class="headerlink" title="网络转载——人生最重要的三种能力，不是读书能学来的"></a>网络转载——人生最重要的三种能力，不是读书能学来的</h2><h2 id="一、人际交往中的期望值管理能力"><a href="#一、人际交往中的期望值管理能力" class="headerlink" title="一、人际交往中的期望值管理能力"></a>一、人际交往中的期望值管理能力</h2><h2 id="二、阈值自控意识"><a href="#二、阈值自控意识" class="headerlink" title="二、阈值自控意识"></a>二、阈值自控意识</h2><h2 id="三、应对主观时空扭曲的能力"><a href="#三、应对主观时空扭曲的能力" class="headerlink" title="三、应对主观时空扭曲的能力"></a>三、应对主观时空扭曲的能力</h2><h2 id="一-期望值管理能力"><a href="#一-期望值管理能力" class="headerlink" title="(一)期望值管理能力"></a>(一)期望值管理能力</h2><ul><li>影视剧中往往有这样的观感：一个地痞或者土匪，平日无恶不作。到了最后一集，哎，这货突然抗日了，例如《大宅门》里的三爷。</li><li>这时候观众对其好感度会突然爆棚，甚至超过许多没有爆点的正面角色，前几十集的劣迹简直一笔勾销。</li><li>这就是期望值在前期被编剧压低之后的福利</li><li>先记住一个公式：</li><li>快乐值 = 现实 - 期望值</li><li>我们刚进入一个团队时，如果一开始就大招尽出，会导致周围人和领导对你的期望值不断升高。</li><li>最后总会有一次你满足不了对方的要求，这时候对你的负面评价也会随之而起，甚至会低过一直表现平平的同仁。</li><li>有人将其总结为“不胜任陷阱”，因为在一个上升通道中，只要达到了上层的期望，就会被继续提拔。</li><li>知道提拔到一个你不能胜任的岗位，让所有人失望，这个升迁过程才会结束。</li><li>这一点在情场上也依然适用，你会发现浪子回头会获得相当的赞美，许多女人甚至可以不计较你之前是个多么烂的人；</li><li>但老实巴交的“好好男人”一旦被抓到一次不老实就立刻被打入“渣男”的行列再也不得翻身。</li><li>娱乐圈这样的例子年年都有，不再赘述。</li><li>这就需要我们对别人对我们的期望值进行有限管理。</li><li>比较常见的手段是憋大招，有一些在对方期待之外的东西不到关键时刻不能随便拿出来用。</li><li>但周围人也不是傻瓜，次数多了，别人都会倾向于相信你藏着一手。</li><li>例如学生时代那些永远叫嚷着这次考砸了的第一名们，信誉早已破产，其他人对其期望值依然在持续上升，这时候成熟的压力可想而知。</li><li><strong>要真正做到有效控制周围人对你的期望值，需要做到真正无迹可寻，并在所有非必要的时候压抑自己的表现欲与虚荣心。</strong></li><li>我认为这是进入职场的第一课。<h2 id="（二）阈值自控意识"><a href="#（二）阈值自控意识" class="headerlink" title="（二）阈值自控意识"></a>（二）阈值自控意识</h2></li><li>阈值又叫临界值，指释放一个行为反应所需要的最小刺激强度。</li><li>引用网上的一段文章：</li><li>A片害了无数正常的男青年，没有A片的岁月里，男孩子满脑邪念充盈。</li><li>可是在这个网络色情泛滥的当今，他们居然对生活中的女人没了想法，这不能不成为信息时代人类异化的经典案例。</li><li>何以至此？阈值使然。也就是不断的持续刺激，太高了男人们欲望的触发点。</li><li>上个世纪初，女人旗袍坐下时偶尔可一瞥的白花花大腿就可以出发老夫子们的欲念；</li><li>可是100年后，看着满屏的玉体横陈，很多人居然会叹上一句： 没意思！</li><li>这就是时代的变迁，使得阈值不断上升的最好例证。</li><li>举个极端的例子，释迦牟尼本是个迦毗罗卫国的王子，很早就过着锦衣玉食的生活。其父为其修筑 春/夏/冬 三座宫殿。但他获得很厌世。</li><li>其父为其选来印度最妖艳美丽的女子来取悦他，但是美酒美女对他的边际效用已经小道忽略，食欲肉欲的一切无法使他获得更高的满足，只有离开世俗创造佛教去了。</li><li>他一出生就享受物质的极大满足，导致他的阈值搞到普通人难以想象的程度，最后凡是物质都无法使他快活。</li><li>中国的例子是贾宝玉，从小活在女人堆里，最后也做和尚去了</li><li>反而自小出家的人却未必能忘俗，所以施耐庵会有和尚最淫一说，潘巧云与裴如海那一段有很精妙的点评。</li><li>自幼出家的人，从未享受过世俗的快感，所以阈值很低，一点就着。</li><li>能大彻大悟的慧根认识，往往反而是富家弟子，也就不奇怪了。</li><li>女人亦然。</li><li>泛滥的韩剧将正常的女生活生生逼成大龄剩女，归根到底也是阈值作怪。</li><li>本来少女看见年轻男子怀春，是老天爷安排的正常心理活动。现在这个自然的程序被突然打断，横插10部韩剧，男一号个个多金英俊完美，还有若干男二男三争抢。</li><li>电视机钱的女人们于是看傻了，爱情阈值被活生生地抬道天上，身边的男人自然再也看不上。</li><li>但你深刻理解了阈值对个人幸福与快乐的影响后，你就知道这个该概念不仅用在性和爱情上，更可以推广到人生幸福的方方面面。</li><li>了解边际效用递减的规律，并学会一定程度的禁欲和自控，是防止阈值升高的不二法门。</li><li>这绝对是需要在人生早期就要着力培养和锻炼的素质与意识，尤其对于男性。</li><li>顺便提下，频繁观看色情片造成的刺激过度，会抑制大脑内对性刺激做出神经反应的奖赏机制。</li><li>与药物成瘾相似，这种神经抑制会促使强迫的色情成瘾行为，并对正常的性意愿和性欲造成影响，可惜，对于有些人，这些话来的有点晚了。<h2 id="（三）应对主观时空扭曲的能力"><a href="#（三）应对主观时空扭曲的能力" class="headerlink" title="（三）应对主观时空扭曲的能力"></a>（三）应对主观时空扭曲的能力</h2></li><li>这个概念有点玄。这里说的时空扭曲，指的是主观的时间流逝感觉随着年龄开始加速，而且一发不可收拾。</li><li>相信大部分人都有这样的感觉，时间过的越来越快了。</li><li>小学时是一个月一个月过，大学一学期一学期过，工作后就变成了一年一年过。</li><li>越往上过度越快，问问你的父母，他们会告诉你十年一眨眼就没了，他们讨论着十几年二十年前的陈年旧事，好像就发生在昨天。</li><li>网上的一个说法比较有趣：</li><li>“五岁的时候人的记忆有五年，这时候过一年，到六岁时，记忆增加了五分之一；六岁到七岁，记忆增加六分之一。</li><li>以此类推，到了二十岁的时候，过一年，记忆便只增加二十分之一。</li><li>这一年的时光虽然没变，但是参照物变了，所以大家就感觉时间过得快了。</li><li>可能等你六十岁的时候，过一年记忆只增加六十分之一，那时候就过得更快了。”</li><li>这个说法有一定的道理。</li><li>如果你仔细回忆一下会发现：</li><li>童年的课间十分钟足够你从楼上跑下去玩点什么；</li><li>但现在你坐在公司电脑前，才喝了杯热饮，把东西摊开准备干活，啥都没干呢一个小时就没了。</li><li>小时候两个月的暑假特别漫长，现在的一个月不就是四个星期，一眨眼就没了。</li><li>如果用记忆增量理论来解释，就就说明我们在成年后的工作和生活都是在简单重复，所以大脑中的“总数居”并没有像儿时那样迅猛增长。</li><li>大脑处理今天的24小时，只需要动用几年前就已经存好的索引，驾轻就熟。</li><li>总信息量几乎没有增加，你主观上感受到的“新东西”当然就少，而体验“新东西”恰恰是放慢主管时间的命门。</li><li><strong>要解决时空扭曲的问题，我们必须走出“熟悉区”，“熟悉区”是时空黑洞，会不断加速消耗，吞噬你的时间。</strong></li><li>如果你走出办公室，去陌生的国家一个月，就会发现这一个月并没有像办公室里那样，星期三过完就差不多能指望星期天了，而是觉得一个星期比在办公室两个星期都要多，这便是对抗时空扭曲的一个例子。</li><li>并不是只有旅游才能有这样的效果，你如果在自己身上多试验，会发现能找到很多使用于你个人的手段，但前提是你要有“摆脱熟悉区”的意识。</li><li><strong>这是我认为人的一生所需要掌握的最重要能力之一，掌握了对抗时空扭曲的本领，你就能延长主观生命。</strong></li><li><img src="http://wx2.sinaimg.cn/mw690/005Io8Oqgy1fof7bt6ywdj30m80m8mzw.jpg" alt="不慌是一种底气，不乱是一种境界"></li></ul>]]></content>
      
      
      <categories>
          
          <category> 人生杂谈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 人生，职场，能力，学习 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Hexo 常用命令入门</title>
      <link href="/2018/02/11/Hexo-base/"/>
      <url>/2018/02/11/Hexo-base/</url>
      
        <content type="html"><![CDATA[<p>欢迎使用hexo! 这是第一篇文章， 查阅 <a href="https://hexo.io/docs/" target="_blank" rel="noopener">文档</a>了解更多信息。 如果在使用Hexo时遇到任何问题, 你可以在 <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">故障诊断</a>中找到答案， 或者在<a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>上向我提问。（前面的链接不是我的<a href="https://github.com/wangwangwanglichao" target="_blank" rel="noopener">Github</a>哦！是原作者的）</p><h2 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h2><h3 id="创建一个新帖子"><a href="#创建一个新帖子" class="headerlink" title="创建一个新帖子"></a>创建一个新帖子</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>详细信息: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">作品示例</a></p><h3 id="运行服务器"><a href="#运行服务器" class="headerlink" title="运行服务器"></a>运行服务器</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>详细信息: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">服务器</a></p><h3 id="生成静态文件"><a href="#生成静态文件" class="headerlink" title="生成静态文件"></a>生成静态文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>详细信息: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">生成</a></p><h3 id="部署到远程站点"><a href="#部署到远程站点" class="headerlink" title="部署到远程站点"></a>部署到远程站点</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>详细信息: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">部署</a></p>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>CSS布局之水平居中和垂直居中</title>
      <link href="/2018/02/10/CSSlayout-01/"/>
      <url>/2018/02/10/CSSlayout-01/</url>
      
        <content type="html"><![CDATA[<ul><li>前端布局非常重要的一环就是页面框架的搭建，也是最基础的一环。在页面框架搭建之中，又有居中布局/多列布局/全局布局。今天介绍一下居中布局的一些技巧。</li></ul><h1 id="居中布局"><a href="#居中布局" class="headerlink" title="居中布局"></a>居中布局</h1><h2 id="水平居中"><a href="#水平居中" class="headerlink" title="水平居中"></a>水平居中</h2><h4 id="1-使用inline-block-text-align："><a href="#1-使用inline-block-text-align：" class="headerlink" title="1.使用inline-block + text-align："></a>1.使用inline-block + text-align：</h4><ul><li>原理：先将子框由块级元素改变为行内块元素，再通过设置行内块元素居中以达到水平居中的目的。#####</li><li>用法：对子框设置display:inline-block,对父框设置text-align:center。</li><li>示例：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">`&lt;div class=&apos;parent&apos;&gt;</span><br><span class="line">&lt;div class=&apos;child&apos;&gt;DEMO&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">.child &#123;</span><br><span class="line">display: inline-block;</span><br><span class="line">&#125;</span><br><span class="line">.parent &#123;</span><br><span class="line">text-align: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>优点:兼容性好。</li><li>缺点:.child里的文字也会水平居中。(可以在.child里添加text-align:left还原)</li></ul><h4 id="2-使用table-margin"><a href="#2-使用table-margin" class="headerlink" title="2.使用table + margin"></a>2.使用table + margin</h4><ul><li>原理:先将子框设置为块级表格来显示,再设置子框居中以达到居中水平.</li><li>用法:对子框设置display:table,再设置margin:0 auto;</li><li>示例:</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">`&lt;div class=&apos;parent&apos;&gt;</span><br><span class="line">&lt;div class=&apos;child&apos;&gt;DEMO&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">.child &#123;</span><br><span class="line">display: table;</span><br><span class="line">margin: 0 auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>优点:只设置了child,IE8以上都支持;</li><li>缺点:不支持IE6/IE7,将div换成了table;</li></ul><h4 id="3-使用absolute-transform"><a href="#3-使用absolute-transform" class="headerlink" title="3.使用absolute + transform"></a>3.使用absolute + transform</h4><ul><li>原理:将子框设置为绝对定位,移动子框,使子框左侧距离相对框左侧边框的距离为相对框宽度的一半,再通过向左移动子框的一半宽度以达到水平居中。父框需要设置为相对定位(或者绝对定位),使父框成为子框的相对框。</li><li>用法:对父框设置position:relative(absolute);对子框设置position:absolute;left:50%;transform:translateX(-50%);</li><li>示例:</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">`&lt;div class=&apos;parent&apos;&gt;</span><br><span class="line">&lt;div class=&apos;child&apos;&gt;DEMO&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">.parent &#123;</span><br><span class="line">position: relative;</span><br><span class="line">&#125;</span><br><span class="line">.child &#123;</span><br><span class="line">position: absolute;</span><br><span class="line">left: 50%;</span><br><span class="line">transform: translateX(-50%);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>优点:居中元素不会对其它元素产生影响;</li><li>缺点:transform属于CSS3内容,兼容性存在一定问题;</li></ul><h4 id="4-使用flex-margin"><a href="#4-使用flex-margin" class="headerlink" title="4.使用flex + margin"></a>4.使用flex + margin</h4><ul><li>原理:通过CSS3中的布局利器flex将子框转换为flex item,再设置子框居中以达到居中目的。</li><li>用法:先将父框设置为display:flex;再设置子框margin:0 auto;</li><li>示例:</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">`&lt;div class=&apos;parent&apos;&gt;</span><br><span class="line">&lt;div class=&apos;child&apos;&gt;DEMO&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">.parent &#123;</span><br><span class="line">display:flex;</span><br><span class="line">&#125;</span><br><span class="line">.child &#123;</span><br><span class="line">margin:0 auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>缺点:IE6/7/8等低版本浏览器不支持;</li></ul><h4 id="5-使用flex-justify-content"><a href="#5-使用flex-justify-content" class="headerlink" title="5.使用flex + justify-content"></a>5.使用flex + justify-content</h4><ul><li>原理:通过CSS3中的布局利器flex中的justify-content属性来达到居中目的;</li><li>用法:先将父框设置为display:flex;再设置justify-content:center;</li><li>示例:</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">`&lt;div class=&apos;parent&apos;&gt;</span><br><span class="line">&lt;div class=&apos;child&apos;&gt;DEMO&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">.parent &#123;</span><br><span class="line">display:flex;</span><br><span class="line">justify-content: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>优点:只设置parent即可;</li><li>缺点:IE6/7/8等低版本浏览器不支持;</li></ul><h2 id="垂直居中"><a href="#垂直居中" class="headerlink" title="垂直居中"></a>垂直居中</h2><h4 id="1-使用table-cell-vertical-align"><a href="#1-使用table-cell-vertical-align" class="headerlink" title="1.使用table-cell + vertical-align"></a>1.使用table-cell + vertical-align</h4><ul><li>原理:通过将父框转化为一个表格单元格显示,在通过设置属性,使表格单元格内容垂直居中;</li><li>用法:先将父框设置为display:table-cell;再设置vertical-align:middle;</li><li>实例:</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">`&lt;div class=&apos;parent&apos;&gt;</span><br><span class="line">&lt;div class=&apos;child&apos;&gt;DEMO&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">.parent &#123;</span><br><span class="line">display:table-cell;</span><br><span class="line">vertical-align: middle;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>优点: 兼容性较好,IE8以上都支持;</li><li>缺点: 将div元素转化为了table元素;</li></ul><h4 id="2-使用absolute-transform"><a href="#2-使用absolute-transform" class="headerlink" title="2.使用absolute + transform"></a>2.使用absolute + transform</h4><ul><li>原理:类似于上面说过的水平居中的原理，将子框设置为绝对定位，移动子框，使子框上边距离相对框上边边框的距离为相对框高度的一半，再通过向上移动子框的高度的一半以达到垂直居中;父框需设置为相对定位或者绝对定位，使其成为子框的相对框；</li><li>用法:先将父框设置为position:relative(absolute);再设置子框position:absolute;top:50%;transform:translateY(-50%);</li><li>实例:</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">`&lt;div class=&apos;parent&apos;&gt;</span><br><span class="line">&lt;div class=&apos;child&apos;&gt;DEMO&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">.parent &#123;</span><br><span class="line">position:relative;</span><br><span class="line">&#125;</span><br><span class="line">.child &#123;</span><br><span class="line">position: absolute;</span><br><span class="line">top: 50%;</span><br><span class="line">transform: translateY(-50%);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>优点: 居中元素不会对其它元素产生影响;</li><li>缺点: transform属于CSS3内容,兼容性存在一定问题;</li></ul><h4 id="３-使用flex-align-items"><a href="#３-使用flex-align-items" class="headerlink" title="３.使用flex + align-items"></a>３.使用flex + align-items</h4><ul><li>原理:通过CSS3中的布局利器flex中的align-items属性来达到居中目的;</li><li>用法:先将父框设置为display:flex;再设置align-items:center;</li><li>示例:</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">`&lt;div class=&apos;parent&apos;&gt;</span><br><span class="line">&lt;div class=&apos;child&apos;&gt;DEMO&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">.parent &#123;</span><br><span class="line">display:flex;</span><br><span class="line">align-items: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>优点:只设置parent即可;</li><li>缺点:IE6/7/8等低版本浏览器不支持;</li></ul><h2 id="水平-垂直-居中"><a href="#水平-垂直-居中" class="headerlink" title="水平 + 垂直　居中"></a>水平 + 垂直　居中</h2><p>####　1.使用absolute + transform</p><ul><li>原理:将水平居中和垂直居中相结合;</li><li>用法:先将父框设置为position:relative(absolute);再设置子框position:absolute;left:50%;top:50%;transform:translate(-50%,-50%);</li><li>实例:</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">`&lt;div class=&apos;parent&apos;&gt;</span><br><span class="line">&lt;div class=&apos;child&apos;&gt;DEMO&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">.parent &#123;</span><br><span class="line">position:relative;</span><br><span class="line">&#125;</span><br><span class="line">.child &#123;</span><br><span class="line">position: absolute;</span><br><span class="line">left: 50%;</span><br><span class="line">top: 50%;</span><br><span class="line">transform: translate(-50%,-50%);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>优点: 居中元素不会对其它元素产生影响;</li><li>缺点: transform属于CSS3内容,兼容性存在一定问题;</li></ul><h4 id="2-使用inline-block-text-align-table-cell-vertical-align"><a href="#2-使用inline-block-text-align-table-cell-vertical-align" class="headerlink" title="2.使用inline-block + text-align + table-cell + vertical-align"></a>2.使用inline-block + text-align + table-cell + vertical-align</h4><ul><li>原理:使用inline-block+text-align水平居中;再用table-cell+vertical-align垂直居中;将二者结合起来;</li><li>实例:</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">`&lt;div class=&apos;parent&apos;&gt;</span><br><span class="line">&lt;div class=&apos;child&apos;&gt;DEMO&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">.parent &#123;</span><br><span class="line">text-align:center;</span><br><span class="line">display:table-cell;</span><br><span class="line">vertical-align:middle;</span><br><span class="line">&#125;</span><br><span class="line">.child &#123;</span><br><span class="line">display: inline-block;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>优点: 兼容性较好;</li><li>缺点: 使用起来比较麻烦;</li></ul><h4 id="2-使用flex-justify-content-align-items"><a href="#2-使用flex-justify-content-align-items" class="headerlink" title="2.使用flex + justify-content + align-items"></a>2.使用flex + justify-content + align-items</h4><ul><li>原理:通过设置flex中的justify-content和align-items,从而达到水平垂直居中;</li><li>实例:</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">`&lt;div class=&apos;parent&apos;&gt;</span><br><span class="line">&lt;div class=&apos;child&apos;&gt;DEMO&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">.parent &#123;</span><br><span class="line">display:flex;</span><br><span class="line">justify-content:center;</span><br><span class="line">align-items:center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>优点: 只设置parent元素;</li><li>缺点: 兼容性存在一些问题;</li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端布局 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> CSS </tag>
            
            <tag> CSS基础 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>你好,Hexo</title>
      <link href="/2018/02/10/hello-Hexo/"/>
      <url>/2018/02/10/hello-Hexo/</url>
      
        <content type="html"><![CDATA[<h2 id=""><a href="#" class="headerlink" title=" "></a> </h2><h2 id="Hi！我是王立超"><a href="#Hi！我是王立超" class="headerlink" title="#Hi！我是王立超#"></a>#Hi！我是王立超#</h2><pre><code>一个很普通的人,目前做着一份很普通的工作;后来经过朋友推荐开始边工作边自学前端的菜鸟之路;不管道路有多坎坷,我都不想放弃;每天只要有进步;我就为自己高兴,因为我距离自己的梦想更近了一些;想成为一名前端工程师,我,一直在路上...</code></pre><hr><ul><li>这是我第一次使用hexo搭建我的博客，终于成功了，好高兴！</li><li>努力学习中，希望自己每天都有进步,加油！</li></ul>]]></content>
      
      
      <categories>
          
          <category> 搭建博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> github </tag>
            
            <tag> npm </tag>
            
            <tag> 基础 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>CSS布局之多列布局</title>
      <link href="/2018/02/10/CSSlayout-02/"/>
      <url>/2018/02/10/CSSlayout-02/</url>
      
        <content type="html"><![CDATA[<ul><li>前端布局非常重要的一环就是页面框架的搭建，也是最基础的一环。在页面框架搭建之中，又有居中布局/多列布局/全局布局。本文介绍一下多列布局的一些技巧。</li></ul><h1 id="多列布局"><a href="#多列布局" class="headerlink" title="多列布局"></a>多列布局</h1><h2 id="定宽-自适应"><a href="#定宽-自适应" class="headerlink" title="定宽 + 自适应"></a>定宽 + 自适应</h2><h4 id="1-使用float-overflow："><a href="#1-使用float-overflow：" class="headerlink" title="1.使用float + overflow："></a>1.使用float + overflow：</h4><ul><li>原理: 通过将左边子元素脱离文档流,设置右边子元素规定当内容溢出元素框时发生的事情以达到多列布局;</li><li>用法：先将左边子元素设置为float:left;再设置右边子元素为overflow:hidden;</li><li>示例：</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">'parent'</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">'left'</span>&gt;</span>我是内容<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">'right'</span>&gt;</span>我是内容<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.left</span> &#123;</span><br><span class="line"><span class="attribute">float</span>: left;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line"><span class="attribute">margin-right</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.right</span> &#123;</span><br><span class="line"><span class="attribute">overflow</span>: hidden;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>优点:简单。</li><li>缺点:不支持IE6。</li></ul><h4 id="2-使用float-margin"><a href="#2-使用float-margin" class="headerlink" title="2.使用float + margin"></a>2.使用float + margin</h4><ul><li>原理:通过将左边子元素脱离文档流,右边子元素向右移动一定的距离,以达到视觉上的多列布局;</li><li>用法:左边子元素设置为float:left,再设置右边子元素margin-left;</li><li>示例:</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">'parent'</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">'left'</span>&gt;</span>我是内容<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">'right'</span>&gt;</span>我是内容<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.left</span> &#123;</span><br><span class="line"><span class="attribute">float</span>: left;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.right</span> &#123;</span><br><span class="line"><span class="attribute">margin-left</span>: <span class="number">120px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>优点:简单;</li><li>缺点:兼容性存在一定的问题,IE6下有3px的bug;right下的p清除浮动将产生bug;</li></ul><h4 id="3-使用float-margin-改良版"><a href="#3-使用float-margin-改良版" class="headerlink" title="3.使用float + margin (改良版)"></a>3.使用float + margin (改良版)</h4><ul><li><p>原理:在1的基础上,通过向右边子元素添加一个父元素,再加上设置左边子元素、右边父元素属性使之产生BFC以去除bug。</p></li><li><p>示例:</p></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">'parent'</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">'left'</span>&gt;</span>我是内容<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">'right-fix'</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">'right'</span>&gt;</span></span><br><span class="line">我是内容</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.left</span> &#123;</span><br><span class="line"><span class="attribute">float</span>: left;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line"><span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.right-fix</span> &#123;</span><br><span class="line"><span class="attribute">float</span>: right;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line"><span class="attribute">margin-left</span>: -<span class="number">100px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.right</span> &#123;</span><br><span class="line"><span class="attribute">margin-left</span>: <span class="number">120px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-使用table"><a href="#4-使用table" class="headerlink" title="4.使用table"></a>4.使用table</h4><ul><li>原理:通过将父元素设置为表格,将左右子元素转化为类似于同一行的td,从而达到多列布局</li><li><p>用法:先将父元素设置为display:table;width:100%;table-layout:fixed;,再设置左右子元素display:table-cell;最后设置左子元素的width、padding-right;</p></li><li><p>示例:</p></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">'parent'</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">'left'</span>&gt;</span></span><br><span class="line">我是内容</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">'right'</span>&gt;</span></span><br><span class="line">我是内容</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.parent</span> &#123;</span><br><span class="line"><span class="attribute">display</span>:table;</span><br><span class="line"><span class="attribute">width</span>:<span class="number">100%</span>;</span><br><span class="line"><span class="attribute">table-layout</span>:fixed;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.left</span> &#123;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line"><span class="attribute">padding-right</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.right</span>,</span><br><span class="line"><span class="selector-class">.left</span> &#123;</span><br><span class="line"><span class="attribute">display</span>:table-cell;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-使用flex"><a href="#5-使用flex" class="headerlink" title="5.使用flex"></a>5.使用flex</h4><ul><li>原理:通过设置flex属性,从而达到多列布局</li><li><p>用法:先将父元素设置为display:flex;再设置左边子元素flex:1;最后设置左边子元素的width/margin-right;</p></li><li><p>示例:</p></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">'parent'</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">'left'</span>&gt;</span></span><br><span class="line">我是内容</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">'right'</span>&gt;</span></span><br><span class="line">我是内容</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.parent</span> &#123;</span><br><span class="line"><span class="attribute">display</span>:flex;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.left</span> &#123;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">100</span>;</span><br><span class="line"><span class="attribute">margin-right</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.right</span> &#123;</span><br><span class="line"><span class="attribute">flex</span>:<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>优点:flex很强大;</li><li>缺点:兼容性和性能方面存在一定问题;</li></ul><h2 id="两列定宽-一列自适应"><a href="#两列定宽-一列自适应" class="headerlink" title="两列定宽 + 一列自适应"></a>两列定宽 + 一列自适应</h2><ul><li>这种情况和两列定宽差不多,先将左边子元素和中间子元素设置为float:left;width;margin-right;再设置右边子元素overflow:hidden;</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">'parent'</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">'left'</span>&gt;</span></span><br><span class="line">我是左侧内容</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">'center'</span>&gt;</span></span><br><span class="line">我是中间内容</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">'right'</span>&gt;</span></span><br><span class="line">我是右侧内容</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.left</span>,</span><br><span class="line"><span class="selector-class">.center</span> &#123;</span><br><span class="line"><span class="attribute">float</span>:left;</span><br><span class="line"><span class="attribute">width</span>:<span class="number">100px</span>;</span><br><span class="line"><span class="attribute">margin-right</span>:<span class="number">20px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.right</span> &#123;</span><br><span class="line"><span class="attribute">overflow</span>:hidden;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="不定宽-自适应"><a href="#不定宽-自适应" class="headerlink" title="不定宽 + 自适应"></a>不定宽 + 自适应</h2><h4 id="使用float-overflow"><a href="#使用float-overflow" class="headerlink" title="使用float + overflow"></a>使用float + overflow</h4><ul><li>原理:类似于两列定宽;</li><li><p>用法:将左侧框设置为float:left、margin-right:xx,再设置右侧框overflow:hidden,最后设置左侧框的内容宽度;</p></li><li><p>示例:</p></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">'parent'</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">'left'</span>&gt;</span></span><br><span class="line">我是内容</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">'right'</span>&gt;</span></span><br><span class="line">我是内容</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.left</span> &#123;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">    <span class="attribute">margin-right</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.right</span> &#123;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.left</span> <span class="selector-tag">p</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>优点: 简单;</li><li>缺点: IE6下兼容性存在问题;</li></ul><h4 id="使用table"><a href="#使用table" class="headerlink" title="使用table"></a>使用table</h4><ul><li>原理: 通过将父元素改变为表格,将左右框转换为类似于同一行的td以达到多列布局,设置父元素宽度100%,给左框子元素一个固定宽度从而达到自适应.</li><li>用法: 将父元素设置为display:table;width:100%;再设置左右侧子元素display:table-cell;最后设置左侧子元素width:0.1%;padding-right:xx;以及左侧子元素中的内容宽度width:xxx;</li><li>示例:</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">'parent'</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">'left'</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>我是left内容<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">'right'</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>我是right内容<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.parent</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: table;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.left</span>,</span><br><span class="line"><span class="selector-class">.right</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: table-cell;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.left</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">0.1%</span>;</span><br><span class="line">    <span class="attribute">padding-right</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.left</span> <span class="selector-tag">p</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>注意: IE6/7不支持;</li></ul><h4 id="使用flex"><a href="#使用flex" class="headerlink" title="使用flex"></a>使用flex</h4><ul><li>原理: 通过设置CSS3中flex属性达到多列布局,加上给左侧子元素的内容定宽,给右侧子元素设置flex达到不定宽+自适应;</li><li>用法: 父元素设置display:flex;右侧子元素设置flex:1;左侧子元素margin-right:00px;内容设置宽度;</li><li>示例:</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">'parent'</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">'left'</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>我是left内容<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">'right'</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>我是right内容<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.parnet</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>:flex;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.left</span> &#123;</span><br><span class="line">  <span class="attribute">margin-right</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.right</span> &#123;</span><br><span class="line">  <span class="attribute">flex</span>: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.left</span> <span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>优缺点: flex很强大,但是兼容性和性能都存在一些问题;</li></ul><h2 id="两列不定宽-一列自适应"><a href="#两列不定宽-一列自适应" class="headerlink" title="两列不定宽 + 一列自适应"></a>两列不定宽 + 一列自适应</h2><ul><li>原理: 类似于一列不定宽+一列自适应</li><li>用法: 左、中设置为float:left;margin-right:xxx;并设置内容宽度,右设置overflow:hidden;</li><li>示例:<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"parent"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>left<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"center"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>center<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>right<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.left</span>,</span><br><span class="line"><span class="selector-class">.center</span> &#123;</span><br><span class="line">  <span class="attribute">float</span>: left;</span><br><span class="line">  <span class="attribute">margin-right</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.right</span> &#123;</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.left</span> <span class="selector-tag">p</span>,</span><br><span class="line"><span class="selector-class">.center</span> <span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="等分布局"><a href="#等分布局" class="headerlink" title="等分布局"></a>等分布局</h2><ul><li>公式转化: </li><li>总宽度 = 子元素宽度 <em> n + 间隙宽度 </em> (n - 1)</li><li>总宽度 = 子元素宽度 <em> n + 间隙宽度 </em> n - 间隙宽度</li><li>总宽度 + 间隙宽度 =( 子元素宽度 + 间隙宽度 ) * n</li><li>两个问题: 如何让总宽度增加间隙宽度   如何让每个子元素宽度包含间隙宽度</li></ul><h4 id="使用float"><a href="#使用float" class="headerlink" title="使用float"></a>使用float</h4><ul><li>原理: 增大父元素的实际宽度,使用CSS3属性box-sizing进行辅助布局;</li><li>用法: 父元素margin-left:-<strong>px;子元素float:left;width:25%;padding-left:</strong>px;box-sizing:border-box;</li><li>示例:<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"parent"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"column"</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>1<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"column"</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>2<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"column"</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>3<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"column"</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>4<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">``` </span><br><span class="line">```css</span><br><span class="line">.parent &#123;</span><br><span class="line">  margin-left: -20px;</span><br><span class="line">&#125;</span><br><span class="line">.column &#123;</span><br><span class="line">  float:left;</span><br><span class="line">  width: 25%;</span><br><span class="line">  padding-left: 20px;</span><br><span class="line">  box-sizing: border-box;</span><br><span class="line">&#125;</span><br><span class="line">```  </span><br><span class="line">- 注意: IE6/7兼容性存在一些问题; </span><br><span class="line"></span><br><span class="line">#### 使用table</span><br><span class="line">- 原理: 通过增加一个父元素的修正框,增加其宽度,并将父元素转换为table,将子元素转换为table-cell进行布局;</span><br><span class="line">- 用法: 父元素修正框设置为margin-left:-**px;父元素display:table;width:100%;table-layout:fixed;子元素display:table-cell;padding-left:**px;</span><br><span class="line">- 示例;</span><br><span class="line">```html</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"parent-fix"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"parent"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"column"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>111<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"column"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>222<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"column"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>333<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"column"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>444<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.parent-fix</span> &#123;</span><br><span class="line">  <span class="attribute">margin-left</span>: -<span class="number">20px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.parent</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: table;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">table-layout</span>: fixed;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.column</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: table-cell;</span><br><span class="line">  <span class="attribute">padding-left</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>优点: 结构和块数无关联;</li><li>缺点: 嵌套层数增加;</li></ul><h4 id="使用flex-1"><a href="#使用flex-1" class="headerlink" title="使用flex"></a>使用flex</h4><ul><li>原理: 通过设置CSS3中的flex属性达到等分布局;</li><li>用法: 父元素display:flex;子元素flex:1;并设置间距;</li><li>示例:<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"parent"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"column"</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">p</span>&gt;</span>111<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"column"</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">p</span>&gt;</span>222<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"column"</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">p</span>&gt;</span>333<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"column"</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">p</span>&gt;</span>444<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.parent</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.column</span> &#123;</span><br><span class="line">  <span class="attribute">flex</span>: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.column</span>+<span class="selector-class">.column</span> &#123;</span><br><span class="line">  <span class="attribute">margin-left</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>优点: 代码量少,与块数无关;</li><li>缺点: 低版本浏览器兼容性存在问题;</li></ul><h2 id="定宽-自适应-两块高度相同"><a href="#定宽-自适应-两块高度相同" class="headerlink" title="定宽 + 自适应 + 两块高度相同"></a>定宽 + 自适应 + 两块高度相同</h2><h4 id="使用float-1"><a href="#使用float-1" class="headerlink" title="使用float"></a>使用float</h4><ul><li>原理: 通过过分加大左右子框的高度，辅助超出隐藏，以达到视觉上的等高。</li><li>用法: 父元素overflow: hidden，左右子元素padding-bottom: 9999px、margin-bottom: -9999px，左子元素float: left、width、margin-right，右子元素overflow: hidden;</li><li>示例:<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"parent"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left"</span>&gt;</span>left<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span>right<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span>&#123;</span><br><span class="line">    <span class="attribute">background</span>: none<span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.left</span>,<span class="selector-class">.right</span>&#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#444</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.parent</span>&#123;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.left</span>,<span class="selector-class">.right</span>&#123;</span><br><span class="line">    <span class="attribute">padding-bottom</span>: <span class="number">9999px</span>;</span><br><span class="line">    <span class="attribute">margin-bottom</span>: -<span class="number">9999px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.left</span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="attribute">float</span>: left; </span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">margin-right</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.right</span>&#123;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>优点: 兼容性好;</li><li>缺点: 伪等高,不是真正意义上的等高;</li></ul><h4 id="使用table-1"><a href="#使用table-1" class="headerlink" title="使用table"></a>使用table</h4><ul><li>原理：将父框转化为tabel，将子框转化为tabel-cell布局，以达到定宽+自适应+两块高度一样高。</li><li>用法：父元素display:table、width:100%、table-layout:fixed，左右子元素display:table-cell，左子元素width、padding-right。</li><li>示例:<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"parent"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left"</span>&gt;</span>left<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span>.right<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.parent</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: table;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">table-layout</span>: fixed;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.left</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">padding-right</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.right</span>,</span><br><span class="line"><span class="selector-class">.left</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: table-cell;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="使用flex-2"><a href="#使用flex-2" class="headerlink" title="使用flex"></a>使用flex</h4><ul><li>原理: 通过设置CSS3布局利器flex中的flex属性以达到定宽+自适应+两块高度一样高。</li><li>用法：父元素display: flex，左子元素width、margin-right;右子元素flex:1。</li><li>示例:<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"parent"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left"</span>&gt;</span>left<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span>right<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.parent</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.left</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">margin-right</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.right</span> &#123;</span><br><span class="line">  <span class="attribute">flex</span>: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>优缺点: 代码量少,简洁,但是兼容性存在一些问题;</li></ul><h4 id="使用display"><a href="#使用display" class="headerlink" title="使用display"></a>使用display</h4><ul><li>原理: 通过设置display中的CSS3的-webkit-box属性以达到定宽+自适应+两块高度一样高。</li><li>用法: 父元素display: -webkit-box、width:100%，左子元素width、margin-right，右子元素-webkit-box-flex: 1;</li><li>示例:<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"parent"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left"</span>&gt;</span>left<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span>right<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.parent</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">display</span>: -webkit-box;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.left</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">margin-right</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.right</span> &#123;</span><br><span class="line">  <span class="attribute">-webkit-box-flex</span>: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>缺点: 兼容性存在较大问题;</li></ul><h2 id="全屏布局"><a href="#全屏布局" class="headerlink" title="全屏布局"></a>全屏布局</h2><h4 id="全屏布局的特点"><a href="#全屏布局的特点" class="headerlink" title="全屏布局的特点:"></a>全屏布局的特点:</h4><ul><li>滚动条不是全局滚动条,而是出现在内容区域里,一般是主内容区域;</li><li>浏览器变大时,撑满窗口;</li></ul><h3 id="全屏布局的方法"><a href="#全屏布局的方法" class="headerlink" title="全屏布局的方法"></a>全屏布局的方法</h3><h4 id="使用position"><a href="#使用position" class="headerlink" title="使用position"></a>使用position</h4><ul><li>原理: 将上下部分固定,中间部分使用定宽+自适应+等高;</li><li>用法: 见示例;</li><li>示例:<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"parent"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"top"</span>&gt;</span>top<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left"</span>&gt;</span>left<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"inner"</span>&gt;</span>right-inner<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"bottom"</span>&gt;</span>bottom<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">html</span>,</span><br><span class="line"><span class="selector-tag">body</span>,</span><br><span class="line"><span class="selector-class">.parent</span> &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: white;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.top</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">bottom</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: blue;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.left</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">bottom</span>: <span class="number">50px</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.right</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">bottom</span>: <span class="number">50px</span>;</span><br><span class="line">  <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: pink;</span><br><span class="line">  <span class="attribute">overflow</span>: auto;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.right</span> <span class="selector-class">.inner</span> &#123;</span><br><span class="line">  <span class="attribute">min-height</span>: <span class="number">1000px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.bottom</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">bottom</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">50px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: black;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>优缺点: 兼容性好,IE6以下不支持;</li></ul><h4 id="使用flex-3"><a href="#使用flex-3" class="headerlink" title="使用flex"></a>使用flex</h4><ul><li>原理: 通过CSS3中flex属性和flex-direction属性;</li><li>用法: 见示例;</li><li>示例: <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"parent"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"top"</span>&gt;</span>top<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"middle"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left"</span>&gt;</span>left<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"inner"</span>&gt;</span>right<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"bottom"</span>&gt;</span>bottom<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">html</span>,</span><br><span class="line"><span class="selector-tag">body</span>,</span><br><span class="line"><span class="selector-class">.parent</span> &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: white;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.parent</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">flex-direction</span>: column;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.top</span> &#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: blue;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.bottom</span> &#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">50px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: black;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.middle</span> &#123;</span><br><span class="line">  <span class="attribute">flex</span>: <span class="number">1</span>;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.left</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.right</span> &#123;</span><br><span class="line">  <span class="attribute">flex</span>: <span class="number">1</span>;</span><br><span class="line">  <span class="attribute">overflow</span>: auto;</span><br><span class="line">  <span class="attribute">background-color</span>: pink;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.right</span> <span class="selector-class">.inner</span> &#123;</span><br><span class="line">  <span class="attribute">min-height</span>: <span class="number">1000px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>优缺点: 兼容性差,IE9及以下不兼容;</li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端布局 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> CSS </tag>
            
            <tag> CSS基础 </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
