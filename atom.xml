<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>勇往直前</title>
  
  <subtitle>心有远方</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.wanglichao.top/todo/"/>
  <updated>2018-11-10T14:37:51.370Z</updated>
  <id>http://www.wanglichao.top/todo/</id>
  
  <author>
    <name>王立超</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>关于项目打包时的优化</title>
    <link href="http://www.wanglichao.top/todo/2018/11/10/project_webpack_optimize/"/>
    <id>http://www.wanglichao.top/todo/2018/11/10/project_webpack_optimize/</id>
    <published>2018-11-10T14:37:24.000Z</published>
    <updated>2018-11-10T14:37:51.370Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-CSS抽离"><a href="#1-CSS抽离" class="headerlink" title="1.CSS抽离"></a>1.CSS抽离</h3><blockquote><p>将css文件从js文件中抽离出来;<br>分开加载,代码有改动时css/JS不用全部去加载;</p></blockquote><figure class="hljs highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 抽离css文件的插件:</span><br><span class="hljs-keyword">const</span> ExtractTextPlugin = <span class="hljs-built_in">require</span>(<span class="hljs-string">"extract-text-webpack-plugin"</span>);<br><span class="hljs-built_in">module</span>.exports = &#123;<br>    <span class="hljs-attr">module</span>: &#123;<br>        <span class="hljs-attr">rules</span>: [<br>            test: <span class="hljs-regexp">/\.css$/</span>,<br>            <span class="hljs-attr">use</span>: ExtracTextPlugin.extrac(&#123;<br>                <span class="hljs-attr">fallback</span>: <span class="hljs-string">"style-loader"</span>,<br>                <span class="hljs-attr">use</span>: <span class="hljs-string">"css-loader"</span><br>            &#125;)<br>        ]<br>    &#125;,<br>    <span class="hljs-attr">plugins</span>: [<br>        <span class="hljs-keyword">new</span> ExtractTextPlugin(<span class="hljs-string">"styles.css"</span>)<br>    ]<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-哈希值"><a href="#2-哈希值" class="headerlink" title="2.哈希值"></a>2.哈希值</h3><blockquote><p>辨识文件是否改动;</p></blockquote><figure class="hljs highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript">output: &#123;<br>   <span class="hljs-attr">path</span>: path.join(__dirname, <span class="hljs-string">'dist'</span>),<br>   <span class="hljs-comment">// js文件的哈希</span><br>   filename: <span class="hljs-string">"[name].[chunkhash:6].js"</span><br>&#125;<br></code></pre></td></tr></table></figure><figure class="hljs highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript">plugins: [<br>       <span class="hljs-comment">// css文件的哈希</span><br>       <span class="hljs-keyword">new</span> ExtractTextPlugin(<span class="hljs-string">"[name].[contenthash:6].css"</span>)<br>   ]<br></code></pre></td></tr></table></figure><h3 id="3-第三方包抽离"><a href="#3-第三方包抽离" class="headerlink" title="3.第三方包抽离"></a>3.第三方包抽离</h3><blockquote><p>辨识部分文件改动;</p></blockquote><figure class="hljs highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 此插件依赖webpack</span><br><span class="hljs-keyword">const</span> webpack = <span class="hljs-built_in">require</span>(<span class="hljs-string">'webpack'</span>);<br><span class="hljs-built_in">module</span>.exports = &#123;<br>    <span class="hljs-attr">entry</span>: &#123;<br>         <span class="hljs-attr">main</span>: <span class="hljs-string">"./src/main.js"</span>,<br>        <span class="hljs-comment">// 再加一个入口,将第三方包从main.js中分离出来</span><br>        vendors: [<span class="hljs-string">"vue"</span>,<span class="hljs-string">"vue-router"</span>,<span class="hljs-string">"moment"</span>,<span class="hljs-string">"axios"</span>,<span class="hljs-string">"vue-preview"</span>]<br>    &#125;,<br>    <span class="hljs-attr">plugins</span>: [<br>        <span class="hljs-comment">// webpack中抽离第三方包的插件:</span><br>        <span class="hljs-keyword">new</span> webpack.optimize.CommonsChunkPlugin(&#123;<br>            <span class="hljs-comment">// manifest用来记录使用者和第三方包的依赖关系</span><br>            names: [<span class="hljs-string">"vendors"</span>, <span class="hljs-string">"manifest"</span>]<br>        &#125;)<br>    ]<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4-代码压缩混淆"><a href="#4-代码压缩混淆" class="headerlink" title="4.代码压缩混淆"></a>4.代码压缩混淆</h3><blockquote><p>很大程度的压缩代码体积</p></blockquote><figure class="hljs highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 压缩混淆代码的插件,需要 npm i -D uglifyjs-webpack-plugin 下载</span><br><span class="hljs-keyword">const</span> UglifyJSPlugin = <span class="hljs-built_in">require</span>(<span class="hljs-string">"uglifyjs-webpack-plugin"</span>);<br><span class="hljs-built_in">module</span>.exports = &#123;<br>    <span class="hljs-attr">plugins</span>: [<br>        <span class="hljs-keyword">new</span> UglifyJSPlugin()<br>    ]<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="5-main-ui的按需引入"><a href="#5-main-ui的按需引入" class="headerlink" title="5.main-ui的按需引入"></a>5.main-ui的按需引入</h3><blockquote><p>进一步减小代码体积</p></blockquote><figure class="hljs highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 全部引入的用法:</span><br><span class="hljs-comment">// import Mint from 'mint-ui'</span><br><span class="hljs-comment">// import 'mint-ui/lib/style.css'</span><br><span class="hljs-comment">// Vue.use(Mint);</span><br><br><span class="hljs-comment">// 按需加载的用法:</span><br><span class="hljs-keyword">import</span> Header <span class="hljs-keyword">from</span> <span class="hljs-string">'mint-ui/lib/header'</span><br><span class="hljs-keyword">import</span> Switch <span class="hljs-keyword">from</span> <span class="hljs-string">'mint-ui/lib/switch'</span><br><span class="hljs-keyword">import</span> SwitchItem <span class="hljs-keyword">from</span> <span class="hljs-string">'mint-ui/lib/switch-item'</span><br><span class="hljs-keyword">import</span> Button <span class="hljs-keyword">from</span> <span class="hljs-string">'mint-ui/lib/button'</span><br><span class="hljs-keyword">import</span> Lazyload <span class="hljs-keyword">from</span> <span class="hljs-string">'mint-ui/lib/lazyload'</span><br><span class="hljs-comment">// ...</span><br><br>Vue.component(Header.name, Header);<br>Vue.component(SwitchItem.name, SwitchItem);<br>Vue.component(Button.name, Button);<br>Vue.use(Lazyload); <span class="hljs-comment">// 注意lazyload(懒加载)仍需要use方式调用</span><br><span class="hljs-comment">// ...</span><br></code></pre></td></tr></table></figure><h3 id="6-代码文件的结构整理"><a href="#6-代码文件的结构整理" class="headerlink" title="6.代码文件的结构整理"></a>6.代码文件的结构整理</h3><blockquote><p>文件的分类整理</p><ul><li>注意: 将文件路径分类整理后,代码中的相对路径引用文件可能会发生错误,需要修正</li></ul></blockquote><figure class="hljs highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript">output: &#123;<br>   <span class="hljs-attr">path</span>: path.join(__dirname, <span class="hljs-string">'dist'</span>),<br>   <span class="hljs-comment">// 修正资源请求路径</span><br>   publicPath: <span class="hljs-string">'/'</span>,   <span class="hljs-comment">// 企业中也可以是 www.xxx.com/为根路径</span><br>   <span class="hljs-comment">// js文件的路径</span><br>   filename: <span class="hljs-string">"js/[name].[chunkhash:6].js"</span><br>&#125;<br></code></pre></td></tr></table></figure><figure class="hljs highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&#123;<br>   <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.(jpg|png|svg|ttf|woff|woff2|gif)$/</span>,<br>   <span class="hljs-attr">use</span>: [<br>       <span class="hljs-string">'url-loader'</span>,<br>       <span class="hljs-attr">options</span>: &#123;<br>           <span class="hljs-attr">limit</span>: <span class="hljs-number">4096</span>,<br>           <span class="hljs-comment">// 图片文件的路径</span><br>           name: <span class="hljs-string">'/assets/[name].[ext]'</span><br>       &#125;<br>   ]<br>&#125;<br></code></pre></td></tr></table></figure><figure class="hljs highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript">plugins: [<br>       <span class="hljs-comment">// css文件的路径</span><br>       <span class="hljs-keyword">new</span> ExtractTextPlugin(<span class="hljs-string">"css/[name].[contenthash:6].css"</span>)<br>   ]<br></code></pre></td></tr></table></figure><h3 id="7-路由的懒加载"><a href="#7-路由的懒加载" class="headerlink" title="7.路由的懒加载"></a>7.路由的懒加载</h3><blockquote><p>根据路由路径按需加载页面</p></blockquote><figure class="hljs highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> App <span class="hljs-keyword">from</span> <span class="hljs-string">'./app.vue'</span>  <span class="hljs-comment">// 公用App组件不用</span><br><br><span class="hljs-keyword">import</span> Home <span class="hljs-keyword">from</span> <span class="hljs-string">'./component/home/home.vue'</span><br><span class="hljs-keyword">import</span> News <span class="hljs-keyword">from</span> <span class="hljs-string">'./component/news/news.vue'</span><br><span class="hljs-comment">// 修改为</span><br><span class="hljs-keyword">const</span> Home = <span class="hljs-function"><span class="hljs-params">resolve</span> =&gt;</span> <span class="hljs-built_in">require</span>([<span class="hljs-string">'./component/home/home.vue'</span>, resolve]);<br><span class="hljs-keyword">const</span> News = <span class="hljs-function"><span class="hljs-params">r</span> =&gt;</span> <span class="hljs-built_in">require</span>([<span class="hljs-string">'./component/news/news.vue'</span>, r]);<br></code></pre></td></tr></table></figure><h3 id="8-去除控制台开发的提示"><a href="#8-去除控制台开发的提示" class="headerlink" title="8.去除控制台开发的提示"></a>8.去除控制台开发的提示</h3><figure class="hljs highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript">plugins: [<br>    <span class="hljs-keyword">new</span> webpack.DefinePlugin(&#123;<br>        <span class="hljs-string">'process.env'</span>: &#123;<br>            <span class="hljs-attr">NODE_ENV</span>: <span class="hljs-string">'"production"'</span><br>        &#125;<br>    &#125;)<br>]<br></code></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;1-CSS抽离&quot;&gt;&lt;a href=&quot;#1-CSS抽离&quot; class=&quot;headerlink&quot; title=&quot;1.CSS抽离&quot;&gt;&lt;/a&gt;1.CSS抽离&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;将css文件从js文件中抽离出来;&lt;br&gt;分开加载,代码有改动时css/J
      
    
    </summary>
    
      <category term="笔记 前端 JavaScript 项目优化" scheme="http://www.wanglichao.top/todo/categories/%E7%AC%94%E8%AE%B0-%E5%89%8D%E7%AB%AF-JavaScript-%E9%A1%B9%E7%9B%AE%E4%BC%98%E5%8C%96/"/>
    
    
      <category term="前端基础" scheme="http://www.wanglichao.top/todo/tags/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80/"/>
    
      <category term="node" scheme="http://www.wanglichao.top/todo/tags/node/"/>
    
  </entry>
  
  <entry>
    <title>输入URL地址敲回车之后发生了什么</title>
    <link href="http://www.wanglichao.top/todo/2018/11/10/enter-event/"/>
    <id>http://www.wanglichao.top/todo/2018/11/10/enter-event/</id>
    <published>2018-11-10T04:14:24.000Z</published>
    <updated>2018-11-10T15:55:13.422Z</updated>
    
    <content type="html"><![CDATA[<h2 id="输入URL地址敲回车之后发生了什么"><a href="#输入URL地址敲回车之后发生了什么" class="headerlink" title="输入URL地址敲回车之后发生了什么"></a>输入URL地址敲回车之后发生了什么</h2><blockquote><p> 输入网址敲回车之后,<br> 浏览器开始向DNS服务器发送请求,    (request)请求<br> DNS服务器解析,<br> 找到IP地址对应的服务器,<br> 服务器根据对应的端口号找到对应的项目,<br> 将需要的数据代码编码后返回给浏览器客户端,并将数据的类型告诉浏览器(HTML/json…),     (response)响应<br> 浏览器将接收到的数据根据返回来的数据类型进行解析,</p></blockquote><ul><li><p>http事物: request请求和response响应都成功就是一个完整的HTTP事物;</p></li><li><p><a href="https://www.baidu.com:443/xx/yy/index.html?name=aa&amp;age=30#id=5" target="_blank" rel="noopener">https://www.baidu.com:443/xx/yy/index.html?name=aa&amp;age=30#id=5</a></p></li><li><p>(https) – (www.baidu.com ) – (443) – (/xx/yy/index.html) – (name=aa&amp;age=30) – (id=5)</p></li></ul><h2 id="1-HTTPS-传输协议"><a href="#1-HTTPS-传输协议" class="headerlink" title="1.(HTTPS) 传输协议"></a>1.(HTTPS) 传输协议</h2><blockquote><p>https / http  完成客户端和服务端的数据交互传输<br>https: 更加安全<br>http: 超文本传输协议<br>FTP: 往服务器上上传项目文件</p></blockquote><h2 id="2-www-baidu-com-域名"><a href="#2-www-baidu-com-域名" class="headerlink" title="2.(www.baidu.com) 域名:"></a>2.(www.baidu.com) 域名:</h2><blockquote><p>一级域名<br>二级域名<br>三级域名</p></blockquote><h2 id="3-443-端口号"><a href="#3-443-端口号" class="headerlink" title="3.(443) 端口号:"></a>3.(443) 端口号:</h2><ul><li>根据端口号找到对应的项目<blockquote><p>http: 默认端口号80<br>https: 默认端口号443<br>FTP: 默认端口号21</p></blockquote></li></ul><h2 id="4-xx-yy-index-html-项目地址"><a href="#4-xx-yy-index-html-项目地址" class="headerlink" title="4.(/xx/yy/index.html)项目地址"></a>4.(/xx/yy/index.html)项目地址</h2><ul><li>根据地址值找到项目下的具体页面文件<blockquote><p>/xx/yy/index.html 真实地址, 请求资源文件<br>/xxx  伪地址, 请求数据</p></blockquote></li></ul><h2 id="5-name-aa-amp-age-30-参数"><a href="#5-name-aa-amp-age-30-参数" class="headerlink" title="5.(name=aa&amp;age=30)参数"></a>5.(name=aa&amp;age=30)参数</h2><ul><li>参数格式是后台规定的,根据参数的值返回响应的数据</li></ul><h2 id="6-id-5-哈希值-Hash值"><a href="#6-id-5-哈希值-Hash值" class="headerlink" title="6.(id=5) 哈希值 Hash值"></a>6.(id=5) 哈希值 Hash值</h2><blockquote><p>锚点定位<br>路由</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;输入URL地址敲回车之后发生了什么&quot;&gt;&lt;a href=&quot;#输入URL地址敲回车之后发生了什么&quot; class=&quot;headerlink&quot; title=&quot;输入URL地址敲回车之后发生了什么&quot;&gt;&lt;/a&gt;输入URL地址敲回车之后发生了什么&lt;/h2&gt;&lt;blockquote&gt;

      
    
    </summary>
    
      <category term="笔记" scheme="http://www.wanglichao.top/todo/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="前端基础" scheme="http://www.wanglichao.top/todo/tags/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80/"/>
    
      <category term="http" scheme="http://www.wanglichao.top/todo/tags/http/"/>
    
      <category term="url" scheme="http://www.wanglichao.top/todo/tags/url/"/>
    
  </entry>
  
  <entry>
    <title>javascript学习之json常用方法</title>
    <link href="http://www.wanglichao.top/todo/2018/02/15/page/javascript-json/"/>
    <id>http://www.wanglichao.top/todo/2018/02/15/page/javascript-json/</id>
    <published>2018-02-15T13:30:40.000Z</published>
    <updated>2018-11-10T15:22:40.445Z</updated>
    
    <content type="html"><![CDATA[<h1 id="javascript中JSON语法有三种表示方法："><a href="#javascript中JSON语法有三种表示方法：" class="headerlink" title="javascript中JSON语法有三种表示方法："></a>javascript中JSON语法有三种表示方法：</h1><h3 id="简单值-“hello-json”"><a href="#简单值-“hello-json”" class="headerlink" title="简单值:      “hello json”"></a>简单值:      “hello json”</h3><h3 id="对象-“name”-”jack”"><a href="#对象-“name”-”jack”" class="headerlink" title="对象:        {“name”:”jack”}"></a>对象:        {“name”:”jack”}</h3><h3 id="数组-“aaa”-”bbb”-“ccc”-”ddd”"><a href="#数组-“aaa”-”bbb”-“ccc”-”ddd”" class="headerlink" title="数组:        [{“aaa”:”bbb”},{“ccc”:”ddd”}]"></a>数组:        [{“aaa”:”bbb”},{“ccc”:”ddd”}]</h3><h2 id="JSON常用的两个方法："><a href="#JSON常用的两个方法：" class="headerlink" title="JSON常用的两个方法："></a>JSON常用的两个方法：</h2><h2 id="stringify-和-parse"><a href="#stringify-和-parse" class="headerlink" title="stringify() 和 parse()"></a>stringify() 和 parse()</h2><h2 id="stringify用法："><a href="#stringify用法：" class="headerlink" title="*stringify用法："></a>*stringify用法：</h2><h4 id="用法一：-把javascript对象转化成JSON格式"><a href="#用法一：-把javascript对象转化成JSON格式" class="headerlink" title="用法一： 把javascript对象转化成JSON格式:"></a>用法一： 把javascript对象转化成JSON格式:</h4><figure class="hljs highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> demo = &#123;<br>  <span class="hljs-string">"name"</span>:<span class="hljs-string">"aaa"</span>,<br>  <span class="hljs-string">"type"</span>:<span class="hljs-string">"bbb"</span> <br>&#125;<br><span class="hljs-keyword">var</span> jsonDemo = <span class="hljs-built_in">JSON</span>.stringify(demo);<br><span class="hljs-built_in">console</span>.log(jsonDemo);<br></code></pre></td></tr></table></figure><ul><li>得到结果：</li></ul><figure class="hljs highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<span class="hljs-attr">"name"</span>:<span class="hljs-string">"aaa"</span>,<span class="hljs-attr">"type"</span>:<span class="hljs-string">"bbb"</span>&#125;<br></code></pre></td></tr></table></figure><h4 id="用法二：把javascript对象转化成JSON格式，增加过滤，只留想要的数据"><a href="#用法二：把javascript对象转化成JSON格式，增加过滤，只留想要的数据" class="headerlink" title="用法二：把javascript对象转化成JSON格式，增加过滤，只留想要的数据"></a>用法二：把javascript对象转化成JSON格式，增加过滤，只留想要的数据</h4><figure class="hljs highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> demo = &#123;<br><span class="hljs-string">"name"</span>:<span class="hljs-string">"aaa"</span>,<br><span class="hljs-string">"sex"</span>:<span class="hljs-string">"boy"</span>,<br><span class="hljs-string">"age"</span>: <span class="hljs-number">20</span><br>&#125;<br><span class="hljs-keyword">var</span> jsonDemo = <span class="hljs-built_in">JSON</span>.stringify(demo,[<span class="hljs-string">"name"</span>]);<br><span class="hljs-built_in">console</span>.log(jsonDemo);<br></code></pre></td></tr></table></figure><ul><li>得到结果：</li></ul><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs josn">&#123;&quot;name&quot;:&quot;aaa&quot;&#125;<br></code></pre></td></tr></table></figure><h4 id="用法三：把javascript对象转化成JSON格式，并改变原有的值"><a href="#用法三：把javascript对象转化成JSON格式，并改变原有的值" class="headerlink" title="用法三：把javascript对象转化成JSON格式，并改变原有的值"></a>用法三：把javascript对象转化成JSON格式，并改变原有的值</h4><figure class="hljs highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> demo = &#123;<br><span class="hljs-string">"name"</span>:<span class="hljs-string">"aaa"</span>,<br><span class="hljs-string">"sex"</span>:<span class="hljs-string">"bbb"</span>,<br><span class="hljs-string">"type"</span>:<span class="hljs-string">"ccc"</span><br>&#125;<br><span class="hljs-keyword">var</span> jsonDemo = <span class="hljs-built_in">JSON</span>.stringify(demo,<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">key, value</span>) </span>&#123;<br><span class="hljs-keyword">switch</span>(key)&#123;<br><span class="hljs-keyword">case</span> <span class="hljs-string">"name"</span>: <span class="hljs-keyword">return</span> <span class="hljs-string">"a"</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-string">"sex"</span>: <span class="hljs-keyword">return</span> <span class="hljs-string">"b"</span>;<br><span class="hljs-keyword">default</span>: <span class="hljs-keyword">return</span> value;<br>&#125;<br>&#125;);<br><span class="hljs-built_in">console</span>.log(jsonDemo);<br></code></pre></td></tr></table></figure><ul><li>得到结果：</li></ul><figure class="hljs highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<span class="hljs-attr">"name"</span>:<span class="hljs-string">"a"</span>,<span class="hljs-attr">"sex"</span>:<span class="hljs-string">"b"</span>,<span class="hljs-attr">"type"</span>:<span class="hljs-string">"ccc"</span>&#125;<br></code></pre></td></tr></table></figure><h4 id="用法四：把javascript对象转化成JSON格式，并控制缩进和空白符"><a href="#用法四：把javascript对象转化成JSON格式，并控制缩进和空白符" class="headerlink" title="用法四：把javascript对象转化成JSON格式，并控制缩进和空白符"></a>用法四：把javascript对象转化成JSON格式，并控制缩进和空白符</h4><figure class="hljs highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> book = &#123;<br><span class="hljs-string">"title"</span>: <span class="hljs-string">"aaa"</span>,<br><span class="hljs-string">"type"</span>: <span class="hljs-string">"bbb"</span>,<br><span class="hljs-string">"page"</span>: <span class="hljs-number">50</span><br>&#125;<br><span class="hljs-keyword">var</span> jsonBook = <span class="hljs-built_in">JSON</span>.stringify(book,<span class="hljs-literal">null</span>,<span class="hljs-string">"$$"</span>);<br><span class="hljs-built_in">console</span>.log(jsonBook)<br></code></pre></td></tr></table></figure><ul><li>得到结果：</li><li><figure class="hljs highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<br><span class="hljs-attr">"title"</span>: <span class="hljs-string">"aaa"</span>,<br><span class="hljs-attr">"type"</span>: <span class="hljs-string">"bbb"</span>,<br><span class="hljs-attr">"page"</span>: <span class="hljs-number">50</span><br>&#125;<br></code></pre></td></tr></table></figure></li></ul><p>－该方法第三个参数如果为数字，那么就是每个属性前面缩进的字符数。</p><h2 id="parse-方法"><a href="#parse-方法" class="headerlink" title="parse()方法"></a>parse()方法</h2><h4 id="用法一：把JSON转化成javascript格式-用来解析JSON字符串，构造由字符串描述的JavaScript值或对象。"><a href="#用法一：把JSON转化成javascript格式-用来解析JSON字符串，构造由字符串描述的JavaScript值或对象。" class="headerlink" title="用法一：把JSON转化成javascript格式, 用来解析JSON字符串，构造由字符串描述的JavaScript值或对象。"></a>用法一：把JSON转化成javascript格式, 用来解析JSON字符串，构造由字符串描述的JavaScript值或对象。</h4><figure class="hljs highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> book = <span class="hljs-string">'&#123;"title":"aaa", "type":"bbb", "page":"50"&#125;'</span>;<br>  <span class="hljs-keyword">var</span> demo = <span class="hljs-built_in">JSON</span>.parse(book);<br>  <span class="hljs-built_in">console</span>.log(demo);<br></code></pre></td></tr></table></figure><ul><li>得到结果：</li></ul><figure class="hljs highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&#123;<span class="hljs-attr">title</span>: <span class="hljs-string">"aaa"</span>, <span class="hljs-attr">type</span>: <span class="hljs-string">"bbb"</span>, <span class="hljs-attr">page</span>: <span class="hljs-string">"50"</span>&#125;<br></code></pre></td></tr></table></figure><h4 id="用法二：把JSON转化为javascript过程中，改变原有的值"><a href="#用法二：把JSON转化为javascript过程中，改变原有的值" class="headerlink" title="用法二：把JSON转化为javascript过程中，改变原有的值"></a>用法二：把JSON转化为javascript过程中，改变原有的值</h4><figure class="hljs highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> book = <span class="hljs-string">'&#123;"title":"aaa", "type":"bbb", "page":50&#125;'</span>;<br>  <span class="hljs-keyword">var</span> demo = <span class="hljs-built_in">JSON</span>.stringify(book);<br>  <span class="hljs-keyword">var</span> javascriptDemo = <span class="hljs-built_in">JSON</span>.parse(demo, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">key, value</span>) </span>&#123;<br> <span class="hljs-keyword">switch</span> (key) &#123;<br><span class="hljs-keyword">case</span> <span class="hljs-string">"title"</span>: <span class="hljs-keyword">return</span> <span class="hljs-string">"bbbbbb"</span>;<br><span class="hljs-keyword">default</span>: <span class="hljs-keyword">return</span> value;<br> &#125;<br>  &#125;);<br>  <span class="hljs-built_in">console</span>.log(javascriptDemo);<br></code></pre></td></tr></table></figure><ul><li>得到结果：<figure class="hljs highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<span class="hljs-attr">"title"</span>:<span class="hljs-string">"aaa"</span>, <span class="hljs-attr">"type"</span>:<span class="hljs-string">"bbb"</span>, <span class="hljs-attr">"page"</span>:<span class="hljs-number">50</span>&#125;<br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;javascript中JSON语法有三种表示方法：&quot;&gt;&lt;a href=&quot;#javascript中JSON语法有三种表示方法：&quot; class=&quot;headerlink&quot; title=&quot;javascript中JSON语法有三种表示方法：&quot;&gt;&lt;/a&gt;javascript中
      
    
    </summary>
    
      <category term="js学习" scheme="http://www.wanglichao.top/todo/categories/js%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="javascript" scheme="http://www.wanglichao.top/todo/tags/javascript/"/>
    
      <category term="json" scheme="http://www.wanglichao.top/todo/tags/json/"/>
    
      <category term="js" scheme="http://www.wanglichao.top/todo/tags/js/"/>
    
      <category term="js基础" scheme="http://www.wanglichao.top/todo/tags/js%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>做过的案例</title>
    <link href="http://www.wanglichao.top/todo/2018/02/15/case-demo-2/"/>
    <id>http://www.wanglichao.top/todo/2018/02/15/case-demo-2/</id>
    <published>2018-02-14T18:37:24.000Z</published>
    <updated>2018-11-10T18:32:26.536Z</updated>
    
    <content type="html"><![CDATA[<h2 id="豆瓣电影案例-douban-movie"><a href="#豆瓣电影案例-douban-movie" class="headerlink" title="豆瓣电影案例(douban-movie)"></a><a href="http://www.wanglichao.top/douban-movie/">豆瓣电影案例</a>(douban-movie)</h2><h2 id="备忘录案例-todo"><a href="#备忘录案例-todo" class="headerlink" title="备忘录案例(todo)"></a><a href="http://www.wanglichao.top/todo/">备忘录案例</a>(todo)</h2><h2 id="弹力运动案例-flex-demo"><a href="#弹力运动案例-flex-demo" class="headerlink" title="弹力运动案例(flex-demo)"></a><a href="http://flex.wanglichao.top/" target="_blank" rel="noopener">弹力运动案例</a>(flex-demo)</h2><h2 id="开屏导航栏-spread"><a href="#开屏导航栏-spread" class="headerlink" title="开屏导航栏(spread)"></a><a href="http://spread.wanglichao.top/" target="_blank" rel="noopener">开屏导航栏</a>(spread)</h2><h2 id="微金所案例-wjs"><a href="#微金所案例-wjs" class="headerlink" title="微金所案例(wjs)"></a><a href="http://wjs.wanglichao.top/" target="_blank" rel="noopener">微金所案例</a>(wjs)</h2><h2 id="电商平台案例-vue-project-01"><a href="#电商平台案例-vue-project-01" class="headerlink" title="电商平台案例(vue-project-01)"></a><a href="http://www.wanglichao.top/vue-project-01/">电商平台案例</a>(vue-project-01)</h2><h2 id="未完成的读书器"><a href="#未完成的读书器" class="headerlink" title="未完成的读书器"></a><a href="http://www.wanglichao.top/case_FictionReader/">未完成的读书器</a></h2><h2 id="商城后台管理系统案例"><a href="#商城后台管理系统案例" class="headerlink" title="商城后台管理系统案例"></a><a href="https://github.com/wangwangwanglichao/admin-v2-fe/tree/tag-product-02" target="_blank" rel="noopener">商城后台管理系统案例</a></h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;豆瓣电影案例-douban-movie&quot;&gt;&lt;a href=&quot;#豆瓣电影案例-douban-movie&quot; class=&quot;headerlink&quot; title=&quot;豆瓣电影案例(douban-movie)&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://www.wanglich
      
    
    </summary>
    
      <category term="案例" scheme="http://www.wanglichao.top/todo/categories/%E6%A1%88%E4%BE%8B/"/>
    
    
      <category term="案例" scheme="http://www.wanglichao.top/todo/tags/%E6%A1%88%E4%BE%8B/"/>
    
  </entry>
  
  <entry>
    <title>node学习笔记</title>
    <link href="http://www.wanglichao.top/todo/2018/02/15/node_base/"/>
    <id>http://www.wanglichao.top/todo/2018/02/15/node_base/</id>
    <published>2018-02-14T18:37:24.000Z</published>
    <updated>2018-11-10T15:51:47.430Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-node-能够解决什么问题"><a href="#1-node-能够解决什么问题" class="headerlink" title="1.node 能够解决什么问题?"></a>1.node 能够解决什么问题?</h2><blockquote><p>node的首要目标是提供一种简单的,用于创建高性能服务器的开发工具;<br>Web服务器的瓶颈在于并发的用户量,对比java和PHP的实现方式;</p></blockquote><h2 id="2-node是什么"><a href="#2-node是什么" class="headerlink" title="2.node是什么?"></a>2.node是什么?</h2><blockquote><p>node.js是一个基于Chrome V8 引擎的JavaScript运行环境,让JavaScript的执行效率与底端的C语言的执行效率相近;<br>node.js使用了一个事件驱动,非阻塞式I/O的模型,使其轻量又高效;<br>node.js的包管理器npm,是全球最大的开源库生态系统;</p></blockquote><h2 id="3-node特点"><a href="#3-node特点" class="headerlink" title="3.node特点"></a>3.node特点</h2><h3 id="3-1-为什么JavaScript是单线程"><a href="#3-1-为什么JavaScript是单线程" class="headerlink" title="3.1 为什么JavaScript是单线程?"></a>3.1 为什么JavaScript是单线程?</h3><blockquote><p>这是由JavaScript这门脚本语言的用途决定的;<br>Web Worker并没有改变JavaScript单线程的本质;</p></blockquote><h3 id="3-2-浏览器模型"><a href="#3-2-浏览器模型" class="headerlink" title="3.2 浏览器模型"></a>3.2 浏览器模型</h3><blockquote><p>用户界面:包括地址栏,前进后退按钮,书签菜单等;<br>浏览器引擎: 在用户界面和呈现引擎之间传送指令;<br>呈现引擎:又称渲染引擎,也被成为浏览器内核,在线程方面又称UI线程;<br>网络:用于网络调用,比如: HTTP请求;<br>用户界面后端:用于绘制基本的窗口小部件,UI线程和JS共用一个线程;<br>JavaScript解析器:用于解析和执行JavaScript代码;<br>数据存储:这是持久层;浏览器需要在硬盘上保存各种数据,例如Cookie;</p></blockquote><h3 id="3-3-除了JS线程和UI线程之外的其它线程"><a href="#3-3-除了JS线程和UI线程之外的其它线程" class="headerlink" title="3.3 除了JS线程和UI线程之外的其它线程"></a>3.3 除了JS线程和UI线程之外的其它线程</h3><blockquote><p>浏览器事件触发线程<br>定时触发器线程<br>异步HTTP请求线程</p></blockquote><h3 id="3-4-任务队列"><a href="#3-4-任务队列" class="headerlink" title="3.4 任务队列"></a>3.4 任务队列</h3><blockquote><p>1.所有同步任务都是在主线程上执行,形成一个执行栈;<br>2.主线程之外,还存在一个任务队列,只要异步任务有了运行结果,就在任务队列中放置一个事件;<br>3.一旦执行栈中的所有同步任务执行完毕,系统就会读取任务队列,看看里面有哪些事件,哪些对应的异步任务,于是结束等待状态,进入执行栈,开始执行;<br>4.主线程不断重复上面的第三步;</p></blockquote><h3 id="3-5-EventLoop"><a href="#3-5-EventLoop" class="headerlink" title="3.5 EventLoop"></a>3.5 EventLoop</h3><blockquote><p>主线程从任务队列中读取事件,这个过程是循环不断的,所以整个的这种运行机制又称为EventLoop(事件循环);</p></blockquote><h3 id="3-6-node-js的EventLoop"><a href="#3-6-node-js的EventLoop" class="headerlink" title="3.6 node.js的EventLoop"></a>3.6 node.js的EventLoop</h3><blockquote><p>1.V8引擎解析JavaScript脚本;<br>2.解析后的代码,调用node API;<br>3.libuv库负责node API的执行,将不用的任务分配给不同的线程,形成一个EventLoop(事件循环),以异步的方式将任务的执行结果返回个V8引擎;<br>4.V8引擎再将结果返回给 用户;</p></blockquote><h3 id="3-7-同步与异步"><a href="#3-7-同步与异步" class="headerlink" title="3.7 同步与异步"></a>3.7 同步与异步</h3><blockquote><p>同步和异步关注的是消息通知机制;<br><code>同步</code>就是发出调用后,没有得到结果之前,该调用不返回,一旦调用返回,就得到返回值了。简而言之就是调用者主动等待这个调用的结果;<br><code>异步</code>则相反,调用者在发出调用后这个调用就直接返回了,所以没有返回结果,即:当一个异步过程调用发出后,调用者不会立刻得到结果,而是调用发出后,被调用者通过状态、通知或回调函数处理这个调用;</p></blockquote><h3 id="3-8-阻塞与非阻塞"><a href="#3-8-阻塞与非阻塞" class="headerlink" title="3.8 阻塞与非阻塞"></a>3.8 阻塞与非阻塞</h3><blockquote><p>阻塞和非阻塞关注的是程序在等待调用结果(消息/返回值)时的状态;<br><code>阻塞</code>调用是指调用结果返回之前,当前线程会被挂起,只有在得到结果之后才会返回;<br><code>非阻塞</code>调用是指在不能立刻得到结果之前,该调用不会阻塞当前线程;</p></blockquote><h3 id="3-9-组合"><a href="#3-9-组合" class="headerlink" title="3.9 组合"></a>3.9 组合</h3><p><strong><code>同步异步取决于被调用者,阻塞非阻塞取决于调用者;</code></strong></p><blockquote><p>同步阻塞: A给B打电话商量事情,通话过程中B考虑了1分钟(同步),A等待了1分钟什么也没干(阻塞);<br>异步阻塞: A给B打电话商量事情,B挂断电话1分钟后回复A(异步),A等待了1分钟什么也没干(阻塞);<br>同步非阻塞: A给B打电话商量事情,通话过程中B考虑了1分钟(同步),A在这1分钟里干了别的事情(非阻塞)<br>异步非阻塞: A给B打电话商量事情,B挂断电话1分钟后回复A(异步),A在这1分钟里干了别的事情(非阻塞);</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-node-能够解决什么问题&quot;&gt;&lt;a href=&quot;#1-node-能够解决什么问题&quot; class=&quot;headerlink&quot; title=&quot;1.node 能够解决什么问题?&quot;&gt;&lt;/a&gt;1.node 能够解决什么问题?&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;nod
      
    
    </summary>
    
      <category term="笔记" scheme="http://www.wanglichao.top/todo/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="前端基础" scheme="http://www.wanglichao.top/todo/tags/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80/"/>
    
      <category term="node" scheme="http://www.wanglichao.top/todo/tags/node/"/>
    
  </entry>
  
  <entry>
    <title>ajax基础知识和核心原理</title>
    <link href="http://www.wanglichao.top/todo/2018/02/15/ajax_base/"/>
    <id>http://www.wanglichao.top/todo/2018/02/15/ajax_base/</id>
    <published>2018-02-14T18:37:24.000Z</published>
    <updated>2018-11-10T16:28:01.291Z</updated>
    
    <content type="html"><![CDATA[<h2 id="ajax基础知识"><a href="#ajax基础知识" class="headerlink" title="ajax基础知识"></a>ajax基础知识</h2><h3 id="1-什么是ajax"><a href="#1-什么是ajax" class="headerlink" title="1.什么是ajax:"></a>1.什么是ajax:</h3><ul><li>Async Javascript And XML ====&gt; 异步的JS和XML;</li><li>XML:可扩展的标记语言(自定义的一些标签,包裹数据,服务器传递数据);</li></ul><figure class="hljs highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--&lt;?xml version="1.0" encoding="UTF-8" ?&gt;--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">root</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">student</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>王二小<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">age</span>&gt;</span>33<span class="hljs-tag">&lt;/<span class="hljs-name">age</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">sex</span>&gt;</span>男<span class="hljs-tag">&lt;/<span class="hljs-name">sex</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">student</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">root</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="2-Ajax异步的概念"><a href="#2-Ajax异步的概念" class="headerlink" title="2. Ajax异步的概念:"></a>2. Ajax异步的概念:</h2><ul><li><code>局部刷新</code>:数据传递的是json字符串,前后端分离</li><li>1).向服务器发送ajax请求;</li><li>2).将服务器返回的数据经过前端的解析处理,绑定到页面上;</li><li>3).页面只需要改变一部分,整个页面不需要重新的渲染;</li><li><code>全局刷新</code>:页面的整体刷新,当页面上数据发生改变时,向后台发送请求,后台会将页面的数据重新渲染一遍,将渲染好的页面返回给客户端呈现,这是全局刷新,也是前后端不分离。这就要求后台去套数据,一般会使用jsp来套数据;</li></ul><h2 id="前后端分离和不分离的优势和劣势"><a href="#前后端分离和不分离的优势和劣势" class="headerlink" title="前后端分离和不分离的优势和劣势"></a>前后端分离和不分离的优势和劣势</h2><h3 id="不分离的优势"><a href="#不分离的优势" class="headerlink" title="不分离的优势:"></a>不分离的优势:</h3><ul><li>1.页面上的数据都是服务器渲染好的,源代码上能看到数据,有利于SEO优化(SEO:搜索引擎的收录和抓取);</li><li>2.从服务器上获取的页面已经是渲染好的,不需要客户端在去额外的请求,所以页面加载速度比较快(前提是服务器够快),一般京东淘宝这样的页面首屏一般都是前后端不分离,直接渲染好页面给前端返回;<br>####不分离的劣势:</li><li>1.如果页面有很多内容需要改变,需要实时获取数据,每次更新数据都要重新刷新一下页面,客户体验不好;</li><li>2.每次都是服务器渲染的话,对服务器的要求比较高,服务器的压力比较大,如果服务器处理不过来,就会导致加载变慢甚至服务器崩溃;所以京东淘宝等网站只有首屏才会采用服务器渲染以提高页面加载速度;</li><li>3.目前市场上前后端分离的项目占大部分;<br>####分离的优势</li><li>1.可以根据需求任意改变页面的某一部分的数据更新,而不用刷新整个页面(例如:实时刷新,表单提交,用户登录),用户体验好;</li><li>2.有利于开发,提高开发效率,开发的时候前后端互不影响,不需要考虑各自使用的技术,相当于实现了技术的分离;可以进行同时开发,项目开始的时候,只需要制定以下交互文档(API文档),规定请求的url,请求方式,参数,返回数据格式等等,前端也可以使用node模拟接口和数据,来验证和调试页面;<br>####分离的弊端</li><li>1.不利于SEO优化(注意:后期使用JS将数据绑定到页面上,不会在源代码上体现,所以不会被SEO收录和抓取);</li><li>2.刚开始加载时,请求资源文件的时候如果请求次数过多,会影响页面的加载速度;为了防止加载速度过慢,可以进行优化处理;<br>###基于原生实现ajax<br>####示例:</li></ul><figure class="hljs highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 创建ajax对象:</span><br><span class="hljs-keyword">let</span> xhr = <span class="hljs-keyword">new</span> XMLHttpRequest();<br><span class="hljs-comment">// 定义请求方式,同步或者异步,请求路径等等:</span><br>xhr.open(<span class="hljs-string">"method"</span>, <span class="hljs-string">"URL"</span>, <span class="hljs-keyword">async</span>, user.name, user.password);<br><span class="hljs-comment">// 定义返回状态:</span><br>xhr.onreadystatechange = <span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> &#123;<br><span class="hljs-keyword">if</span> (xhr.readyState === <span class="hljs-number">4</span> &amp;&amp; xhr.status === <span class="hljs-number">200</span>) &#123;<br><span class="hljs-comment">// 获取响应的文本内容;</span><br><span class="hljs-keyword">let</span> res = xhr.responseText;<br>&#125;<br>&#125;<br><span class="hljs-comment">// 开始发送请求(请求主体的内容数据):</span><br>xhr.send(<span class="hljs-literal">null</span>);<br></code></pre></td></tr></table></figure><h3 id="分析open的参数"><a href="#分析open的参数" class="headerlink" title="分析open的参数:"></a>分析open的参数:</h3><h4 id="method-ajax的请求方式"><a href="#method-ajax的请求方式" class="headerlink" title="method: ajax的请求方式:"></a>method: ajax的请求方式:</h4><ul><li>1).<code>GET</code>系列方式(获取数据):</li><li>get: 从服务器获取数据;</li><li>delete: 从服务器上删除某些文件;</li><li>head: 获取响应头信息;(不要响应主体,只要响应头);</li><li><p>……</p></li><li><p>2).<code>POST</code>系列方式((推送数据):</p></li><li>post: 向服务器传递数据;</li><li>put: 向服务器添加指定的资源文件;</li><li><p>……</p></li><li><p><code>不管是哪一种方式,都可以向服务器发送数据,也可以获取数据,但是一般GET系列以获取为主,POST系列就是以发送数据为主;</code></p></li><li><code>1).想获取动态展示的数据(如:新闻列表),一般使用GET请求,因为只需要告诉服务器需要什么,服务器就返回需要的内容;</code></li><li><code>2).当页面上有大量信息需要发送给服务器(如:表单提交),服务器接收到数据只需要返回成功或失败的状态,此时合适POST请求;</code></li></ul><h3 id="第一个参数-GET和POST具体有哪些区别"><a href="#第一个参数-GET和POST具体有哪些区别" class="headerlink" title="第一个参数:GET和POST具体有哪些区别"></a>第一个参数:GET和POST具体有哪些区别</h3><h4 id="区别1-数据携带方式-GET向服务器发送请求时-发送的内容比POST少-获取的比POST多"><a href="#区别1-数据携带方式-GET向服务器发送请求时-发送的内容比POST少-获取的比POST多" class="headerlink" title="区别1:数据携带方式:  GET向服务器发送请求时,发送的内容比POST少,获取的比POST多;"></a>区别1:数据携带方式:  <code>GET</code>向服务器发送请求时,发送的内容比<code>POST</code>少,获取的比<code>POST</code>多;</h4><ul><li>1.GET请求的参数是拼接在url上的,通过url的参数形式来传递数据,但是url的大小是有限制的,只有几KB,一旦超过限制,就会被默认剪切掉,所以无法携带大量的数据;</li><li>2.<code>POST</code>发送的数据是通过请求主体实现的,理论上大小是没有限制的,但是真实项目中为了保证传输数据的速度,也会加一些限制(例如:上传资料/图片等等文件时,后台服务器做一下特殊处理);</li></ul><h4 id="区别2-缓存问题-GET请求容易走缓存-POST不会"><a href="#区别2-缓存问题-GET请求容易走缓存-POST不会" class="headerlink" title="区别2:缓存问题: GET请求容易走缓存,POST不会:"></a>区别2:缓存问题: <code>GET</code>请求容易走缓存,<code>POST</code>不会:</h4><ul><li><code>GET</code>通过url传参数的方式请求数据,当遇到实时获取数据的时候,以为url是一样的,参数也是一样的,此时浏览器就会默认读取缓存中的内容返回给页面,导致获取不到服务器最新的数据,一般都是在参数后面加一个时间戳或者随机数来防止浏览器读取缓存;</li><li><code>POST</code>请求不会走缓存,因为请求的数据在请求主体中,是不会走缓存的;</li></ul><h4 id="区别3-安全性-GET请求法师没有POST请求方式安全"><a href="#区别3-安全性-GET请求法师没有POST请求方式安全" class="headerlink" title="区别3:安全性: GET请求法师没有POST请求方式安全:"></a>区别3:安全性: <code>GET</code>请求法师没有<code>POST</code>请求方式安全:</h4><ul><li><code>GET</code>的参数在url上,一些简单的黑客技术,拦截url(url劫持),也可以把客户端传递的信息获取到,导致信息泄露;</li><li><code>POST</code>的信息都在请求主体中,相对比较安全;</li></ul><h3 id="第二个参数-URL"><a href="#第二个参数-URL" class="headerlink" title="第二个参数:URL"></a>第二个参数:URL</h3><ul><li><code>这个url地址就是后台给的地址,一般都会有一个API文档,参照文档写就成;</code></li></ul><h3 id="第三个参数-Async"><a href="#第三个参数-Async" class="headerlink" title="第三个参数: Async"></a>第三个参数: Async</h3><ul><li>async: true 不写就是默认true,===&gt;异步;</li><li>async:false ===&gt; 同步;</li></ul><h3 id="最后两个参数-用户名-密码"><a href="#最后两个参数-用户名-密码" class="headerlink" title="最后两个参数:用户名,密码"></a>最后两个参数:用户名,密码</h3><blockquote><p><code>一般不需要写,只有一些服务器不允许匿名访问,只有开通权限的才可以访问,比如一些重要机密的,银行等这样的服务器才会设置权限;</code></p></blockquote><h4 id="第三部分解析"><a href="#第三部分解析" class="headerlink" title="第三部分解析"></a>第三部分解析</h4><figure class="hljs highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">xhr.onreadystatechange = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;&#125;;<br></code></pre></td></tr></table></figure><blockquote><p>ajax请求中xhr.readyState的状态码: </p><ul><li>0: 创建一个ajax对象,默认状态是0;</li><li>1: 执行xhr.open是1;</li><li>2: 请求已发送,并接受到了响应头是2;</li><li>3: 响应主体在路上是3;</li><li>4:响应主体返回客户端是4;</li></ul><p>ajax请求中xhr.status的HTTP网络状态码:</p><ul><li>200:成功状态,一个完整的HTTP事物完成,以2开头的都是成功状态;</li><li>300:以3开头的状态码也是成功状态,只不过是服务器做了一些处理;</li><li>301:永久重定向(永久转移),一般都是域名的迁移;比如京东的www.360buy.com重定向到www.jd.com;</li><li>302:临时重定向(临时转移),在新版的HTTP中307也代表临时重定向,一般是在处理服务器的负载均衡,当一个服务器负荷太大,将内容临时迁移到另一个服务器上处理,主要是一些图片,有一些大公司一般都有专门处理图片的服务器;</li><li>304:从浏览器中读取缓存,把一些不经常更新的文件和图片缓存,减少服务器的压力,增加页面的加载速度;</li></ul><p>以4开头的都是失败的,一般都是客户端的错误;</p><ul><li>400:请求参数错误;</li><li>401:无权限访问;</li><li>404:访问的地址不存在;</li></ul><p>以5开头的一般都是服务器的错误;</p><ul><li>500:服务器未知错误;</li><li>503:服务器超负载;</li></ul></blockquote><p><strong>ajax常用的属性和方法有哪些</strong></p><figure class="hljs highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> xhr = <span class="hljs-keyword">new</span> XMLHttpRequest();<br><span class="hljs-built_in">console</span>.dir(xhr);<br></code></pre></td></tr></table></figure><blockquote><p>[属性]</p><ul><li>readyState:存储的是ajax的状态码;</li><li>responseText/responseXML:返回的是响应主体的内容,只是格式不一样,使用不同的属性接收即可;<ul><li>responseText 一般都是json字符串;</li><li>responseXML是XML格式的数据字符串;</li></ul></li><li>status:记录服务器返回的HTTP状态码;</li><li>statusText:对返回状态码status的描述;</li><li>timeout:设置ajax请求的超时时间;超过设置的时间响应主体还没回来,浏览器就会把请求强制断开;</li></ul><p>[方法]</p><ul><li>abort():强制中断ajax请求;</li><li>getAllResponseHeaders();获取全部响应头的信息(获取的是一堆字符串文本);</li><li>getResponseHeader(“属性名”);获取指定的响应头;如:getResponseHeader(“date”);获取响应头中存储的服务器的时间;</li><li>open(); 略</li><li>overrideMimeType();重写MIME类型;</li><li>send(); 略</li><li>setRequestHeader(“属性名”,属性值);设置请求头;<code>注意</code>:必须写在open()之后,send()之前,内容不可以是中文,否则会报错;</li></ul><p>[事件]</p><ul><li>onabort();当ajax中断的时候触发的事件;</li><li>onreadystatechange();当ajax状态发生变化就会触发的事件;</li><li>ontimeout();当ajax超时触发的事件;</li></ul></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;ajax基础知识&quot;&gt;&lt;a href=&quot;#ajax基础知识&quot; class=&quot;headerlink&quot; title=&quot;ajax基础知识&quot;&gt;&lt;/a&gt;ajax基础知识&lt;/h2&gt;&lt;h3 id=&quot;1-什么是ajax&quot;&gt;&lt;a href=&quot;#1-什么是ajax&quot; class=&quot;he
      
    
    </summary>
    
      <category term="笔记" scheme="http://www.wanglichao.top/todo/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="ajax 前端基础" scheme="http://www.wanglichao.top/todo/tags/ajax-%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>JS编码方式</title>
    <link href="http://www.wanglichao.top/todo/2018/02/15/JS_base/"/>
    <id>http://www.wanglichao.top/todo/2018/02/15/JS_base/</id>
    <published>2018-02-14T18:37:24.000Z</published>
    <updated>2018-11-10T16:00:14.957Z</updated>
    
    <content type="html"><![CDATA[<h2 id="JS的编码解码"><a href="#JS的编码解码" class="headerlink" title="JS的编码解码"></a>JS的编码解码</h2><ul><li>1.escape/unescape(一般只有js支持,前端网页之间的数据传递的时候进行的中文编码和解码);</li><li>2.encodeURI/decodeURI;所有的语言都支持;</li><li>3.encodeURIComponent/decodeURIComponent;同上面,这个可以编译一些特殊字符,上面的不行,最常用的是这个;</li></ul><h2 id="ajax的异步和同步问题"><a href="#ajax的异步和同步问题" class="headerlink" title="ajax的异步和同步问题"></a>ajax的异步和同步问题</h2><ul><li>ajax任务:发送请求到收到响应主体内容(完整的HTTP事物);</li><li>ajax任务开始时发送请求开始(xhr.send());</li><li>同步请求下,绑定监听状态的事件(onreadystatechange)放在open之前可以监听1,4的状态,不可以放在send之后,因为send执行就已经状态为4, 结束了;</li><li>异步请求下,绑定监听状态的事件(onreadystatechange)放在open之前可以监听1,2,3,4的状态,放在open之后可以监听2,3,4的状态,</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;JS的编码解码&quot;&gt;&lt;a href=&quot;#JS的编码解码&quot; class=&quot;headerlink&quot; title=&quot;JS的编码解码&quot;&gt;&lt;/a&gt;JS的编码解码&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;1.escape/unescape(一般只有js支持,前端网页之间的数据传递的时候进行的
      
    
    </summary>
    
      <category term="笔记" scheme="http://www.wanglichao.top/todo/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="前端基础" scheme="http://www.wanglichao.top/todo/tags/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80/"/>
    
      <category term="JS" scheme="http://www.wanglichao.top/todo/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>node介绍</title>
    <link href="http://www.wanglichao.top/todo/2018/02/15/nodejs_base/"/>
    <id>http://www.wanglichao.top/todo/2018/02/15/nodejs_base/</id>
    <published>2018-02-14T18:37:24.000Z</published>
    <updated>2018-11-10T15:53:07.869Z</updated>
    
    <content type="html"><![CDATA[<h2 id="nodejs介绍"><a href="#nodejs介绍" class="headerlink" title="nodejs介绍"></a>nodejs介绍</h2><h4 id="nodejs不是一门语言-是一个运行环境-在node环境中运行JS"><a href="#nodejs不是一门语言-是一个运行环境-在node环境中运行JS" class="headerlink" title="nodejs不是一门语言,是一个运行环境,在node环境中运行JS;"></a>nodejs不是一门语言,是一个运行环境,在node环境中运行JS;</h4><blockquote><p>1.使用的是Chrome的V8引擎;<br>2.基于事件驱动的I/O操作(input/output);<br>3.单线程异步开发;<br>4.因为使用JS,所以适合前端人员上手;<br>5.自带NPM包管理器(全球最大的包管理器,使用NPM安装各种开发需要的安装包);<br>6.模块化开发,node自带很多内置模块;</p></blockquote><h3 id="node中的模块"><a href="#node中的模块" class="headerlink" title="node中的模块"></a>node中的模块</h3><h4 id="node中的模块分为三种"><a href="#node中的模块分为三种" class="headerlink" title="node中的模块分为三种"></a>node中的模块分为三种</h4><blockquote><p>1.内置模块: node自带的模块,如fs,http,url…等等;官方中文文档: <a href="http://nodejs.cn/api" target="_blank" rel="noopener">http://nodejs.cn/api</a><br>2.自定义模块: 自己写的模块,一个JS就是一个模块,用的时候需要导入进来;<br>3.第三方模块: 别人发布的模块,需要下载安装来使用(一般使用NPM包管理器安装);</p></blockquote><h3 id="如何使用npm安装第三方模块"><a href="#如何使用npm安装第三方模块" class="headerlink" title="如何使用npm安装第三方模块"></a>如何使用npm安装第三方模块</h3><blockquote><p><code>npm init -y</code><br>创建package.json文件,记录开发依赖<br><code>npm install less -g</code><br>将less安装在全局中;<br>g  –&gt; global, node中的全局对象<br><code>npm install less</code><br>将less安装在当前项目下;<br><code>npm install less --save-dev</code><br>“–save” 生产依赖<br>“–save-dev” 开发依赖</p><p>在package.json文件中,出现:<br><code>&quot;devDependencies&quot;: {     &quot;less&quot;: &quot;^2.7.3&quot;}</code><br>来记录开发依赖;</p><p><code>&quot;dependencies&quot;: {    &quot;bootstrap&quot;: &quot;^4.0.0&quot;}</code><br>来记录生产依赖</p><p>安装了第三方模块会在当前项目下自动创建一个node_modules文件夹和一个package-lock.json文件</p><ul><li>NODE <ul><li>node_modules</li><li>package-lock.json</li></ul></li></ul><p>得到一个package.json文件,里面有配置好的文件名称,直接运行npm install回车,即可安装所有文件,叫做跑环境;</p></blockquote><h3 id="fs模块"><a href="#fs模块" class="headerlink" title="fs模块"></a>fs模块</h3><blockquote><p>fs是node内置模块,处理文件写入和读取;<br>内置模块需要require导入进来</p><ul><li>引入fs模块</li><li>let fs = require(“fs”);</li><li></li><li>读取文件内容</li><li>fs.readFile();异步读取,不管是否读取完成,后面代码不受影响,继续执行;</li><li>fs.readFileSync();同步读取,只有读取完成后才会执行后面的代码;</li><li>fs.readFileSync([“pathName路径(必填)]”,[编码格式”urf-8”(选填)]);</li><li>fs.readFile([“pathName路径(必填)]”,[编码格式”urf-8”(选填)], (error, value) =&gt; {</li><li>todoSomething…</li><li>});</li><li></li><li>写入文件内容</li><li>fs.writeFile(“文件的路径”, “写入的内容”, “编码”, 回调函数callback);异步写入;</li><li>fs.writeFileSync(“文件的路径”, “写入的内容”, “编码”);同步写入;</li><li>写入文件内容相当于重写文件内容,之前的内容就会覆盖消失;</li><li></li><li>读取文件夹(文件目录)</li><li>fs.readdir(“路径”, (error, value) =&gt; {</li><li>value是一个数组:[“文件夹名字”, “文件夹名字”,…];</li><li>todoSomething…</li><li>});</li><li>fs.readdirSync(“路径”); 也是返回一个数组;</li></ul></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;nodejs介绍&quot;&gt;&lt;a href=&quot;#nodejs介绍&quot; class=&quot;headerlink&quot; title=&quot;nodejs介绍&quot;&gt;&lt;/a&gt;nodejs介绍&lt;/h2&gt;&lt;h4 id=&quot;nodejs不是一门语言-是一个运行环境-在node环境中运行JS&quot;&gt;&lt;a hre
      
    
    </summary>
    
      <category term="笔记" scheme="http://www.wanglichao.top/todo/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="前端基础" scheme="http://www.wanglichao.top/todo/tags/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80/"/>
    
      <category term="node" scheme="http://www.wanglichao.top/todo/tags/node/"/>
    
  </entry>
  
  <entry>
    <title>&#39;人生最重要的三种能力&#39;</title>
    <link href="http://www.wanglichao.top/todo/2018/02/13/article-0001/"/>
    <id>http://www.wanglichao.top/todo/2018/02/13/article-0001/</id>
    <published>2018-02-13T13:21:17.000Z</published>
    <updated>2018-11-10T15:58:10.471Z</updated>
    
    <content type="html"><![CDATA[<h1 id="网络转载——人生最重要的三种能力，不是读书能学来的"><a href="#网络转载——人生最重要的三种能力，不是读书能学来的" class="headerlink" title="网络转载——人生最重要的三种能力，不是读书能学来的"></a>网络转载——人生最重要的三种能力，不是读书能学来的</h1><h3 id="一、人际交往中的期望值管理能力"><a href="#一、人际交往中的期望值管理能力" class="headerlink" title="一、人际交往中的期望值管理能力"></a>一、人际交往中的期望值管理能力</h3><h3 id="二、阈值自控意识"><a href="#二、阈值自控意识" class="headerlink" title="二、阈值自控意识"></a>二、阈值自控意识</h3><h3 id="三、应对主观时空扭曲的能力"><a href="#三、应对主观时空扭曲的能力" class="headerlink" title="三、应对主观时空扭曲的能力"></a>三、应对主观时空扭曲的能力</h3><h2 id="一-期望值管理能力"><a href="#一-期望值管理能力" class="headerlink" title="(一)期望值管理能力"></a>(一)期望值管理能力</h2><ul><li>影视剧中往往有这样的观感：一个地痞或者土匪，平日无恶不作。到了最后一集，哎，这货突然抗日了，例如《大宅门》里的三爷。</li><li>这时候观众对其好感度会突然爆棚，甚至超过许多没有爆点的正面角色，前几十集的劣迹简直一笔勾销。</li><li>这就是期望值在前期被编剧压低之后的福利</li><li>先记住一个公式：</li><li>快乐值 = 现实 - 期望值</li><li>我们刚进入一个团队时，如果一开始就大招尽出，会导致周围人和领导对你的期望值不断升高。</li><li>最后总会有一次你满足不了对方的要求，这时候对你的负面评价也会随之而起，甚至会低过一直表现平平的同仁。</li><li>有人将其总结为“不胜任陷阱”，因为在一个上升通道中，只要达到了上层的期望，就会被继续提拔。</li><li>知道提拔到一个你不能胜任的岗位，让所有人失望，这个升迁过程才会结束。</li><li>这一点在情场上也依然适用，你会发现浪子回头会获得相当的赞美，许多女人甚至可以不计较你之前是个多么烂的人；</li><li>但老实巴交的“好好男人”一旦被抓到一次不老实就立刻被打入“渣男”的行列再也不得翻身。</li><li>娱乐圈这样的例子年年都有，不再赘述。</li><li>这就需要我们对别人对我们的期望值进行有限管理。</li><li>比较常见的手段是憋大招，有一些在对方期待之外的东西不到关键时刻不能随便拿出来用。</li><li>但周围人也不是傻瓜，次数多了，别人都会倾向于相信你藏着一手。</li><li>例如学生时代那些永远叫嚷着这次考砸了的第一名们，信誉早已破产，其他人对其期望值依然在持续上升，这时候成熟的压力可想而知。</li><li><strong>要真正做到有效控制周围人对你的期望值，需要做到真正无迹可寻，并在所有非必要的时候压抑自己的表现欲与虚荣心。</strong></li><li>我认为这是进入职场的第一课。<h2 id="（二）阈值自控意识"><a href="#（二）阈值自控意识" class="headerlink" title="（二）阈值自控意识"></a>（二）阈值自控意识</h2></li><li>阈值又叫临界值，指释放一个行为反应所需要的最小刺激强度。</li><li>引用网上的一段文章：</li><li>A片害了无数正常的男青年，没有A片的岁月里，男孩子满脑邪念充盈。</li><li>可是在这个网络色情泛滥的当今，他们居然对生活中的女人没了想法，这不能不成为信息时代人类异化的经典案例。</li><li>何以至此？阈值使然。也就是不断的持续刺激，太高了男人们欲望的触发点。</li><li>上个世纪初，女人旗袍坐下时偶尔可一瞥的白花花大腿就可以出发老夫子们的欲念；</li><li>可是100年后，看着满屏的玉体横陈，很多人居然会叹上一句： 没意思！</li><li>这就是时代的变迁，使得阈值不断上升的最好例证。</li><li>举个极端的例子，释迦牟尼本是个迦毗罗卫国的王子，很早就过着锦衣玉食的生活。其父为其修筑 春/夏/冬 三座宫殿。但他获得很厌世。</li><li>其父为其选来印度最妖艳美丽的女子来取悦他，但是美酒美女对他的边际效用已经小道忽略，食欲肉欲的一切无法使他获得更高的满足，只有离开世俗创造佛教去了。</li><li>他一出生就享受物质的极大满足，导致他的阈值搞到普通人难以想象的程度，最后凡是物质都无法使他快活。</li><li>中国的例子是贾宝玉，从小活在女人堆里，最后也做和尚去了</li><li>反而自小出家的人却未必能忘俗，所以施耐庵会有和尚最淫一说，潘巧云与裴如海那一段有很精妙的点评。</li><li>自幼出家的人，从未享受过世俗的快感，所以阈值很低，一点就着。</li><li>能大彻大悟的慧根认识，往往反而是富家弟子，也就不奇怪了。</li><li>女人亦然。</li><li>泛滥的韩剧将正常的女生活生生逼成大龄剩女，归根到底也是阈值作怪。</li><li>本来少女看见年轻男子怀春，是老天爷安排的正常心理活动。现在这个自然的程序被突然打断，横插10部韩剧，男一号个个多金英俊完美，还有若干男二男三争抢。</li><li>电视机钱的女人们于是看傻了，爱情阈值被活生生地抬道天上，身边的男人自然再也看不上。</li><li>但你深刻理解了阈值对个人幸福与快乐的影响后，你就知道这个该概念不仅用在性和爱情上，更可以推广到人生幸福的方方面面。</li><li>了解边际效用递减的规律，并学会一定程度的禁欲和自控，是防止阈值升高的不二法门。</li><li>这绝对是需要在人生早期就要着力培养和锻炼的素质与意识，尤其对于男性。</li><li>顺便提下，频繁观看色情片造成的刺激过度，会抑制大脑内对性刺激做出神经反应的奖赏机制。</li><li>与药物成瘾相似，这种神经抑制会促使强迫的色情成瘾行为，并对正常的性意愿和性欲造成影响，可惜，对于有些人，这些话来的有点晚了。<h2 id="（三）应对主观时空扭曲的能力"><a href="#（三）应对主观时空扭曲的能力" class="headerlink" title="（三）应对主观时空扭曲的能力"></a>（三）应对主观时空扭曲的能力</h2></li><li>这个概念有点玄。这里说的时空扭曲，指的是主观的时间流逝感觉随着年龄开始加速，而且一发不可收拾。</li><li>相信大部分人都有这样的感觉，时间过的越来越快了。</li><li>小学时是一个月一个月过，大学一学期一学期过，工作后就变成了一年一年过。</li><li>越往上过度越快，问问你的父母，他们会告诉你十年一眨眼就没了，他们讨论着十几年二十年前的陈年旧事，好像就发生在昨天。</li><li>网上的一个说法比较有趣：</li><li>“五岁的时候人的记忆有五年，这时候过一年，到六岁时，记忆增加了五分之一；六岁到七岁，记忆增加六分之一。</li><li>以此类推，到了二十岁的时候，过一年，记忆便只增加二十分之一。</li><li>这一年的时光虽然没变，但是参照物变了，所以大家就感觉时间过得快了。</li><li>可能等你六十岁的时候，过一年记忆只增加六十分之一，那时候就过得更快了。”</li><li>这个说法有一定的道理。</li><li>如果你仔细回忆一下会发现：</li><li>童年的课间十分钟足够你从楼上跑下去玩点什么；</li><li>但现在你坐在公司电脑前，才喝了杯热饮，把东西摊开准备干活，啥都没干呢一个小时就没了。</li><li>小时候两个月的暑假特别漫长，现在的一个月不就是四个星期，一眨眼就没了。</li><li>如果用记忆增量理论来解释，就就说明我们在成年后的工作和生活都是在简单重复，所以大脑中的“总数居”并没有像儿时那样迅猛增长。</li><li>大脑处理今天的24小时，只需要动用几年前就已经存好的索引，驾轻就熟。</li><li>总信息量几乎没有增加，你主观上感受到的“新东西”当然就少，而体验“新东西”恰恰是放慢主管时间的命门。</li><li><strong>要解决时空扭曲的问题，我们必须走出“熟悉区”，“熟悉区”是时空黑洞，会不断加速消耗，吞噬你的时间。</strong></li><li>如果你走出办公室，去陌生的国家一个月，就会发现这一个月并没有像办公室里那样，星期三过完就差不多能指望星期天了，而是觉得一个星期比在办公室两个星期都要多，这便是对抗时空扭曲的一个例子。</li><li>并不是只有旅游才能有这样的效果，你如果在自己身上多试验，会发现能找到很多使用于你个人的手段，但前提是你要有“摆脱熟悉区”的意识。</li><li><strong>这是我认为人的一生所需要掌握的最重要能力之一，掌握了对抗时空扭曲的本领，你就能延长主观生命。</strong></li><li><img src="http://wx2.sinaimg.cn/mw690/005Io8Oqgy1fof7bt6ywdj30m80m8mzw.jpg" alt="不慌是一种底气，不乱是一种境界"></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;网络转载——人生最重要的三种能力，不是读书能学来的&quot;&gt;&lt;a href=&quot;#网络转载——人生最重要的三种能力，不是读书能学来的&quot; class=&quot;headerlink&quot; title=&quot;网络转载——人生最重要的三种能力，不是读书能学来的&quot;&gt;&lt;/a&gt;网络转载——人生最重要
      
    
    </summary>
    
      <category term="人生杂谈" scheme="http://www.wanglichao.top/todo/categories/%E4%BA%BA%E7%94%9F%E6%9D%82%E8%B0%88/"/>
    
    
      <category term="人生，职场，能力，学习" scheme="http://www.wanglichao.top/todo/tags/%E4%BA%BA%E7%94%9F%EF%BC%8C%E8%81%8C%E5%9C%BA%EF%BC%8C%E8%83%BD%E5%8A%9B%EF%BC%8C%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>Hexo 常用命令入门</title>
    <link href="http://www.wanglichao.top/todo/2018/02/11/Hexo-base/"/>
    <id>http://www.wanglichao.top/todo/2018/02/11/Hexo-base/</id>
    <published>2018-02-11T15:42:05.126Z</published>
    <updated>2018-11-10T16:00:43.645Z</updated>
    
    <content type="html"><![CDATA[<p>欢迎使用hexo! 这是第一篇文章， 查阅 <a href="https://hexo.io/docs/" target="_blank" rel="noopener">文档</a>了解更多信息。 如果在使用Hexo时遇到任何问题, 你可以在 <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">故障诊断</a>中找到答案， 或者在<a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>上向我提问。（前面的链接不是我的<a href="https://github.com/wangwangwanglichao" target="_blank" rel="noopener">Github</a>哦！是原作者的）</p><h2 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h2><h3 id="创建一个新帖子"><a href="#创建一个新帖子" class="headerlink" title="创建一个新帖子"></a>创建一个新帖子</h3><figure class="hljs highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">"My New Post"</span><br></code></pre></td></tr></table></figure><p>详细信息: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">作品示例</a></p><h3 id="运行服务器"><a href="#运行服务器" class="headerlink" title="运行服务器"></a>运行服务器</h3><figure class="hljs highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>详细信息: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">服务器</a></p><h3 id="生成静态文件"><a href="#生成静态文件" class="headerlink" title="生成静态文件"></a>生成静态文件</h3><figure class="hljs highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>详细信息: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">生成</a></p><h3 id="部署到远程站点"><a href="#部署到远程站点" class="headerlink" title="部署到远程站点"></a>部署到远程站点</h3><figure class="hljs highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>详细信息: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">部署</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;欢迎使用hexo! 这是第一篇文章， 查阅 &lt;a href=&quot;https://hexo.io/docs/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;文档&lt;/a&gt;了解更多信息。 如果在使用Hexo时遇到任何问题, 你可以在 &lt;a href=&quot;https:
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>CSS布局之水平居中和垂直居中</title>
    <link href="http://www.wanglichao.top/todo/2018/02/10/CSSlayout-01/"/>
    <id>http://www.wanglichao.top/todo/2018/02/10/CSSlayout-01/</id>
    <published>2018-02-10T13:30:40.000Z</published>
    <updated>2018-11-10T15:56:57.838Z</updated>
    
    <content type="html"><![CDATA[<ul><li>前端布局非常重要的一环就是页面框架的搭建，也是最基础的一环。在页面框架搭建之中，又有居中布局/多列布局/全局布局。今天介绍一下居中布局的一些技巧。</li></ul><h1 id="居中布局"><a href="#居中布局" class="headerlink" title="居中布局"></a>居中布局</h1><h2 id="水平居中"><a href="#水平居中" class="headerlink" title="水平居中"></a>水平居中</h2><h4 id="1-使用inline-block-text-align："><a href="#1-使用inline-block-text-align：" class="headerlink" title="1.使用inline-block + text-align："></a>1.使用inline-block + text-align：</h4><ul><li>原理：先将子框由块级元素改变为行内块元素，再通过设置行内块元素居中以达到水平居中的目的。#####</li><li>用法：对子框设置display:inline-block,对父框设置text-align:center。</li><li>示例：</li></ul><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs undefined">`&lt;div class=&apos;parent&apos;&gt;<br>&lt;div class=&apos;child&apos;&gt;DEMO&lt;/div&gt;<br>&lt;/div&gt;<br>.child &#123;<br>display: inline-block;<br>&#125;<br>.parent &#123;<br>text-align: center;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>优点:兼容性好。</li><li>缺点:.child里的文字也会水平居中。(可以在.child里添加text-align:left还原)</li></ul><h4 id="2-使用table-margin"><a href="#2-使用table-margin" class="headerlink" title="2.使用table + margin"></a>2.使用table + margin</h4><ul><li>原理:先将子框设置为块级表格来显示,再设置子框居中以达到居中水平.</li><li>用法:对子框设置display:table,再设置margin:0 auto;</li><li>示例:</li></ul><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs undefined">`&lt;div class=&apos;parent&apos;&gt;<br>&lt;div class=&apos;child&apos;&gt;DEMO&lt;/div&gt;<br>&lt;/div&gt;<br>.child &#123;<br>display: table;<br>margin: 0 auto;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>优点:只设置了child,IE8以上都支持;</li><li>缺点:不支持IE6/IE7,将div换成了table;</li></ul><h4 id="3-使用absolute-transform"><a href="#3-使用absolute-transform" class="headerlink" title="3.使用absolute + transform"></a>3.使用absolute + transform</h4><ul><li>原理:将子框设置为绝对定位,移动子框,使子框左侧距离相对框左侧边框的距离为相对框宽度的一半,再通过向左移动子框的一半宽度以达到水平居中。父框需要设置为相对定位(或者绝对定位),使父框成为子框的相对框。</li><li>用法:对父框设置position:relative(absolute);对子框设置position:absolute;left:50%;transform:translateX(-50%);</li><li>示例:</li></ul><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs undefined">`&lt;div class=&apos;parent&apos;&gt;<br>&lt;div class=&apos;child&apos;&gt;DEMO&lt;/div&gt;<br>&lt;/div&gt;<br>.parent &#123;<br>position: relative;<br>&#125;<br>.child &#123;<br>position: absolute;<br>left: 50%;<br>transform: translateX(-50%);<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>优点:居中元素不会对其它元素产生影响;</li><li>缺点:transform属于CSS3内容,兼容性存在一定问题;</li></ul><h4 id="4-使用flex-margin"><a href="#4-使用flex-margin" class="headerlink" title="4.使用flex + margin"></a>4.使用flex + margin</h4><ul><li>原理:通过CSS3中的布局利器flex将子框转换为flex item,再设置子框居中以达到居中目的。</li><li>用法:先将父框设置为display:flex;再设置子框margin:0 auto;</li><li>示例:</li></ul><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs undefined">`&lt;div class=&apos;parent&apos;&gt;<br>&lt;div class=&apos;child&apos;&gt;DEMO&lt;/div&gt;<br>&lt;/div&gt;<br>.parent &#123;<br>display:flex;<br>&#125;<br>.child &#123;<br>margin:0 auto;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>缺点:IE6/7/8等低版本浏览器不支持;</li></ul><h4 id="5-使用flex-justify-content"><a href="#5-使用flex-justify-content" class="headerlink" title="5.使用flex + justify-content"></a>5.使用flex + justify-content</h4><ul><li>原理:通过CSS3中的布局利器flex中的justify-content属性来达到居中目的;</li><li>用法:先将父框设置为display:flex;再设置justify-content:center;</li><li>示例:</li></ul><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs undefined">`&lt;div class=&apos;parent&apos;&gt;<br>&lt;div class=&apos;child&apos;&gt;DEMO&lt;/div&gt;<br>&lt;/div&gt;<br>.parent &#123;<br>display:flex;<br>justify-content: center;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>优点:只设置parent即可;</li><li>缺点:IE6/7/8等低版本浏览器不支持;</li></ul><h2 id="垂直居中"><a href="#垂直居中" class="headerlink" title="垂直居中"></a>垂直居中</h2><h4 id="1-使用table-cell-vertical-align"><a href="#1-使用table-cell-vertical-align" class="headerlink" title="1.使用table-cell + vertical-align"></a>1.使用table-cell + vertical-align</h4><ul><li>原理:通过将父框转化为一个表格单元格显示,在通过设置属性,使表格单元格内容垂直居中;</li><li>用法:先将父框设置为display:table-cell;再设置vertical-align:middle;</li><li>实例:</li></ul><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs undefined">`&lt;div class=&apos;parent&apos;&gt;<br>&lt;div class=&apos;child&apos;&gt;DEMO&lt;/div&gt;<br>&lt;/div&gt;<br>.parent &#123;<br>display:table-cell;<br>vertical-align: middle;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>优点: 兼容性较好,IE8以上都支持;</li><li>缺点: 将div元素转化为了table元素;</li></ul><h4 id="2-使用absolute-transform"><a href="#2-使用absolute-transform" class="headerlink" title="2.使用absolute + transform"></a>2.使用absolute + transform</h4><ul><li>原理:类似于上面说过的水平居中的原理，将子框设置为绝对定位，移动子框，使子框上边距离相对框上边边框的距离为相对框高度的一半，再通过向上移动子框的高度的一半以达到垂直居中;父框需设置为相对定位或者绝对定位，使其成为子框的相对框；</li><li>用法:先将父框设置为position:relative(absolute);再设置子框position:absolute;top:50%;transform:translateY(-50%);</li><li>实例:</li></ul><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs undefined">`&lt;div class=&apos;parent&apos;&gt;<br>&lt;div class=&apos;child&apos;&gt;DEMO&lt;/div&gt;<br>&lt;/div&gt;<br>.parent &#123;<br>position:relative;<br>&#125;<br>.child &#123;<br>position: absolute;<br>top: 50%;<br>transform: translateY(-50%);<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>优点: 居中元素不会对其它元素产生影响;</li><li>缺点: transform属于CSS3内容,兼容性存在一定问题;</li></ul><h4 id="３-使用flex-align-items"><a href="#３-使用flex-align-items" class="headerlink" title="３.使用flex + align-items"></a>３.使用flex + align-items</h4><ul><li>原理:通过CSS3中的布局利器flex中的align-items属性来达到居中目的;</li><li>用法:先将父框设置为display:flex;再设置align-items:center;</li><li>示例:</li></ul><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs undefined">`&lt;div class=&apos;parent&apos;&gt;<br>&lt;div class=&apos;child&apos;&gt;DEMO&lt;/div&gt;<br>&lt;/div&gt;<br>.parent &#123;<br>display:flex;<br>align-items: center;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>优点:只设置parent即可;</li><li>缺点:IE6/7/8等低版本浏览器不支持;</li></ul><h2 id="水平-垂直-居中"><a href="#水平-垂直-居中" class="headerlink" title="水平 + 垂直　居中"></a>水平 + 垂直　居中</h2><p>####　1.使用absolute + transform</p><ul><li>原理:将水平居中和垂直居中相结合;</li><li>用法:先将父框设置为position:relative(absolute);再设置子框position:absolute;left:50%;top:50%;transform:translate(-50%,-50%);</li><li>实例:</li></ul><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs undefined">`&lt;div class=&apos;parent&apos;&gt;<br>&lt;div class=&apos;child&apos;&gt;DEMO&lt;/div&gt;<br>&lt;/div&gt;<br>.parent &#123;<br>position:relative;<br>&#125;<br>.child &#123;<br>position: absolute;<br>left: 50%;<br>top: 50%;<br>transform: translate(-50%,-50%);<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>优点: 居中元素不会对其它元素产生影响;</li><li>缺点: transform属于CSS3内容,兼容性存在一定问题;</li></ul><h4 id="2-使用inline-block-text-align-table-cell-vertical-align"><a href="#2-使用inline-block-text-align-table-cell-vertical-align" class="headerlink" title="2.使用inline-block + text-align + table-cell + vertical-align"></a>2.使用inline-block + text-align + table-cell + vertical-align</h4><ul><li>原理:使用inline-block+text-align水平居中;再用table-cell+vertical-align垂直居中;将二者结合起来;</li><li>实例:</li></ul><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs undefined">`&lt;div class=&apos;parent&apos;&gt;<br>&lt;div class=&apos;child&apos;&gt;DEMO&lt;/div&gt;<br>&lt;/div&gt;<br>.parent &#123;<br>text-align:center;<br>display:table-cell;<br>vertical-align:middle;<br>&#125;<br>.child &#123;<br>display: inline-block;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>优点: 兼容性较好;</li><li>缺点: 使用起来比较麻烦;</li></ul><h4 id="2-使用flex-justify-content-align-items"><a href="#2-使用flex-justify-content-align-items" class="headerlink" title="2.使用flex + justify-content + align-items"></a>2.使用flex + justify-content + align-items</h4><ul><li>原理:通过设置flex中的justify-content和align-items,从而达到水平垂直居中;</li><li>实例:</li></ul><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs undefined">`&lt;div class=&apos;parent&apos;&gt;<br>&lt;div class=&apos;child&apos;&gt;DEMO&lt;/div&gt;<br>&lt;/div&gt;<br>.parent &#123;<br>display:flex;<br>justify-content:center;<br>align-items:center;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>优点: 只设置parent元素;</li><li>缺点: 兼容性存在一些问题;</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;前端布局非常重要的一环就是页面框架的搭建，也是最基础的一环。在页面框架搭建之中，又有居中布局/多列布局/全局布局。今天介绍一下居中布局的一些技巧。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;居中布局&quot;&gt;&lt;a href=&quot;#居中布局&quot; class=&quot;headerlin
      
    
    </summary>
    
      <category term="前端布局" scheme="http://www.wanglichao.top/todo/categories/%E5%89%8D%E7%AB%AF%E5%B8%83%E5%B1%80/"/>
    
    
      <category term="前端" scheme="http://www.wanglichao.top/todo/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="CSS" scheme="http://www.wanglichao.top/todo/tags/CSS/"/>
    
      <category term="CSS基础" scheme="http://www.wanglichao.top/todo/tags/CSS%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>你好,Hexo</title>
    <link href="http://www.wanglichao.top/todo/2018/02/10/hello-Hexo/"/>
    <id>http://www.wanglichao.top/todo/2018/02/10/hello-Hexo/</id>
    <published>2018-02-10T13:30:40.000Z</published>
    <updated>2018-11-10T16:03:34.912Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Hi！我是王立超"><a href="#Hi！我是王立超" class="headerlink" title="Hi！我是王立超"></a>Hi！我是王立超</h1><hr><pre><code>一个很普通的人,目前做着一份很普通的工作;后来经过朋友推荐开始边工作边自学前端的菜鸟之路;不管道路有多坎坷,我都不想放弃;每天只要有进步;我就为自己高兴,因为我距离自己的梦想更近了一些;想成为一名前端工程师,我,一直在路上...</code></pre><hr><ul><li>这是我第一次使用hexo搭建我的博客，终于成功了，好高兴！</li><li>努力学习中，希望自己每天都有进步,加油！</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Hi！我是王立超&quot;&gt;&lt;a href=&quot;#Hi！我是王立超&quot; class=&quot;headerlink&quot; title=&quot;Hi！我是王立超&quot;&gt;&lt;/a&gt;Hi！我是王立超&lt;/h1&gt;&lt;hr&gt;
&lt;pre&gt;&lt;code&gt;一个很普通的人,目前做着一份很普通的工作;
后来经过朋友推荐
开始
      
    
    </summary>
    
      <category term="搭建博客" scheme="http://www.wanglichao.top/todo/categories/%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"/>
    
    
      <category term="hexo" scheme="http://www.wanglichao.top/todo/tags/hexo/"/>
    
      <category term="github" scheme="http://www.wanglichao.top/todo/tags/github/"/>
    
      <category term="npm" scheme="http://www.wanglichao.top/todo/tags/npm/"/>
    
      <category term="基础" scheme="http://www.wanglichao.top/todo/tags/%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>CSS布局之多列布局</title>
    <link href="http://www.wanglichao.top/todo/2018/02/10/CSSlayout-02/"/>
    <id>http://www.wanglichao.top/todo/2018/02/10/CSSlayout-02/</id>
    <published>2018-02-10T13:30:40.000Z</published>
    <updated>2018-11-10T15:56:17.326Z</updated>
    
    <content type="html"><![CDATA[<ul><li>前端布局非常重要的一环就是页面框架的搭建，也是最基础的一环。在页面框架搭建之中，又有居中布局/多列布局/全局布局。本文介绍一下多列布局的一些技巧。</li></ul><h1 id="多列布局"><a href="#多列布局" class="headerlink" title="多列布局"></a>多列布局</h1><h2 id="定宽-自适应"><a href="#定宽-自适应" class="headerlink" title="定宽 + 自适应"></a>定宽 + 自适应</h2><h4 id="1-使用float-overflow："><a href="#1-使用float-overflow：" class="headerlink" title="1.使用float + overflow："></a>1.使用float + overflow：</h4><ul><li>原理: 通过将左边子元素脱离文档流,设置右边子元素规定当内容溢出元素框时发生的事情以达到多列布局;</li><li>用法：先将左边子元素设置为float:left;再设置右边子元素为overflow:hidden;</li><li>示例：</li></ul><figure class="hljs highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">'parent'</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">'left'</span>&gt;</span>我是内容<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">'right'</span>&gt;</span>我是内容<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="hljs highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.left</span> &#123;<br><span class="hljs-attribute">float</span>: left;<br><span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;<br><span class="hljs-attribute">margin-right</span>: <span class="hljs-number">20px</span>;<br>&#125;<br><span class="hljs-selector-class">.right</span> &#123;<br><span class="hljs-attribute">overflow</span>: hidden;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>优点:简单。</li><li>缺点:不支持IE6。</li></ul><h4 id="2-使用float-margin"><a href="#2-使用float-margin" class="headerlink" title="2.使用float + margin"></a>2.使用float + margin</h4><ul><li>原理:通过将左边子元素脱离文档流,右边子元素向右移动一定的距离,以达到视觉上的多列布局;</li><li>用法:左边子元素设置为float:left,再设置右边子元素margin-left;</li><li>示例:</li></ul><figure class="hljs highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">'parent'</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">'left'</span>&gt;</span>我是内容<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">'right'</span>&gt;</span>我是内容<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="hljs highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.left</span> &#123;<br><span class="hljs-attribute">float</span>: left;<br><span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;<br>&#125;<br><span class="hljs-selector-class">.right</span> &#123;<br><span class="hljs-attribute">margin-left</span>: <span class="hljs-number">120px</span>;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>优点:简单;</li><li>缺点:兼容性存在一定的问题,IE6下有3px的bug;right下的p清除浮动将产生bug;</li></ul><h4 id="3-使用float-margin-改良版"><a href="#3-使用float-margin-改良版" class="headerlink" title="3.使用float + margin (改良版)"></a>3.使用float + margin (改良版)</h4><ul><li><p>原理:在1的基础上,通过向右边子元素添加一个父元素,再加上设置左边子元素、右边父元素属性使之产生BFC以去除bug。</p></li><li><p>示例:</p></li></ul><figure class="hljs highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">'parent'</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">'left'</span>&gt;</span>我是内容<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">'right-fix'</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">'right'</span>&gt;</span><br>我是内容<br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="hljs highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.left</span> &#123;<br><span class="hljs-attribute">float</span>: left;<br><span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;<br><span class="hljs-attribute">position</span>: relative;<br>&#125;<br><span class="hljs-selector-class">.right-fix</span> &#123;<br><span class="hljs-attribute">float</span>: right;<br><span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;<br><span class="hljs-attribute">margin-left</span>: -<span class="hljs-number">100px</span>;<br>&#125;<br><span class="hljs-selector-class">.right</span> &#123;<br><span class="hljs-attribute">margin-left</span>: <span class="hljs-number">120px</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="4-使用table"><a href="#4-使用table" class="headerlink" title="4.使用table"></a>4.使用table</h4><ul><li>原理:通过将父元素设置为表格,将左右子元素转化为类似于同一行的td,从而达到多列布局</li><li><p>用法:先将父元素设置为display:table;width:100%;table-layout:fixed;,再设置左右子元素display:table-cell;最后设置左子元素的width、padding-right;</p></li><li><p>示例:</p></li></ul><figure class="hljs highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">'parent'</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">'left'</span>&gt;</span><br>我是内容<br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">'right'</span>&gt;</span><br>我是内容<br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="hljs highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.parent</span> &#123;<br><span class="hljs-attribute">display</span>:table;<br><span class="hljs-attribute">width</span>:<span class="hljs-number">100%</span>;<br><span class="hljs-attribute">table-layout</span>:fixed;<br>&#125;<br><span class="hljs-selector-class">.left</span> &#123;<br><span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;<br><span class="hljs-attribute">padding-right</span>: <span class="hljs-number">20px</span>;<br>&#125;<br><span class="hljs-selector-class">.right</span>,<br><span class="hljs-selector-class">.left</span> &#123;<br><span class="hljs-attribute">display</span>:table-cell;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="5-使用flex"><a href="#5-使用flex" class="headerlink" title="5.使用flex"></a>5.使用flex</h4><ul><li>原理:通过设置flex属性,从而达到多列布局</li><li><p>用法:先将父元素设置为display:flex;再设置左边子元素flex:1;最后设置左边子元素的width/margin-right;</p></li><li><p>示例:</p></li></ul><figure class="hljs highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">'parent'</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">'left'</span>&gt;</span><br>我是内容<br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">'right'</span>&gt;</span><br>我是内容<br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="hljs highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.parent</span> &#123;<br><span class="hljs-attribute">display</span>:flex;<br>&#125;<br><span class="hljs-selector-class">.left</span> &#123;<br><span class="hljs-attribute">width</span>: <span class="hljs-number">100</span>;<br><span class="hljs-attribute">margin-right</span>: <span class="hljs-number">20px</span>;<br>&#125;<br><span class="hljs-selector-class">.right</span> &#123;<br><span class="hljs-attribute">flex</span>:<span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>优点:flex很强大;</li><li>缺点:兼容性和性能方面存在一定问题;</li></ul><h2 id="两列定宽-一列自适应"><a href="#两列定宽-一列自适应" class="headerlink" title="两列定宽 + 一列自适应"></a>两列定宽 + 一列自适应</h2><ul><li>这种情况和两列定宽差不多,先将左边子元素和中间子元素设置为float:left;width;margin-right;再设置右边子元素overflow:hidden;</li></ul><figure class="hljs highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">'parent'</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">'left'</span>&gt;</span><br>我是左侧内容<br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">'center'</span>&gt;</span><br>我是中间内容<br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">'right'</span>&gt;</span><br>我是右侧内容<br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="hljs highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.left</span>,<br><span class="hljs-selector-class">.center</span> &#123;<br><span class="hljs-attribute">float</span>:left;<br><span class="hljs-attribute">width</span>:<span class="hljs-number">100px</span>;<br><span class="hljs-attribute">margin-right</span>:<span class="hljs-number">20px</span>;<br>&#125;<br><span class="hljs-selector-class">.right</span> &#123;<br><span class="hljs-attribute">overflow</span>:hidden;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="不定宽-自适应"><a href="#不定宽-自适应" class="headerlink" title="不定宽 + 自适应"></a>不定宽 + 自适应</h2><h4 id="使用float-overflow"><a href="#使用float-overflow" class="headerlink" title="使用float + overflow"></a>使用float + overflow</h4><ul><li>原理:类似于两列定宽;</li><li><p>用法:将左侧框设置为float:left、margin-right:xx,再设置右侧框overflow:hidden,最后设置左侧框的内容宽度;</p></li><li><p>示例:</p></li></ul><figure class="hljs highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">'parent'</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">'left'</span>&gt;</span><br>我是内容<br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">'right'</span>&gt;</span><br>我是内容<br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="hljs highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.left</span> &#123;<br>    <span class="hljs-attribute">float</span>: left;<br>    <span class="hljs-attribute">margin-right</span>: <span class="hljs-number">20px</span>;<br>&#125;<br><span class="hljs-selector-class">.right</span> &#123;<br>    <span class="hljs-attribute">overflow</span>: hidden;<br>&#125;<br><span class="hljs-selector-class">.left</span> <span class="hljs-selector-tag">p</span> &#123;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>优点: 简单;</li><li>缺点: IE6下兼容性存在问题;</li></ul><h4 id="使用table"><a href="#使用table" class="headerlink" title="使用table"></a>使用table</h4><ul><li>原理: 通过将父元素改变为表格,将左右框转换为类似于同一行的td以达到多列布局,设置父元素宽度100%,给左框子元素一个固定宽度从而达到自适应.</li><li>用法: 将父元素设置为display:table;width:100%;再设置左右侧子元素display:table-cell;最后设置左侧子元素width:0.1%;padding-right:xx;以及左侧子元素中的内容宽度width:xxx;</li><li>示例:</li></ul><figure class="hljs highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs html"><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">'parent'</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">'left'</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>我是left内容<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">'right'</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>我是right内容<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="hljs highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.parent</span> &#123;<br>    <span class="hljs-attribute">display</span>: table;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;<br>&#125;<br><span class="hljs-selector-class">.left</span>,<br><span class="hljs-selector-class">.right</span> &#123;<br>    <span class="hljs-attribute">display</span>: table-cell;<br>&#125;<br><span class="hljs-selector-class">.left</span> &#123;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">0.1%</span>;<br>    <span class="hljs-attribute">padding-right</span>: <span class="hljs-number">20px</span>;<br>&#125;<br><span class="hljs-selector-class">.left</span> <span class="hljs-selector-tag">p</span> &#123;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>注意: IE6/7不支持;</li></ul><h4 id="使用flex"><a href="#使用flex" class="headerlink" title="使用flex"></a>使用flex</h4><ul><li>原理: 通过设置CSS3中flex属性达到多列布局,加上给左侧子元素的内容定宽,给右侧子元素设置flex达到不定宽+自适应;</li><li>用法: 父元素设置display:flex;右侧子元素设置flex:1;左侧子元素margin-right:00px;内容设置宽度;</li><li>示例:</li></ul><figure class="hljs highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">'parent'</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">'left'</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>我是left内容<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">'right'</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>我是right内容<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="hljs highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.parnet</span> &#123;<br>  <span class="hljs-attribute">display</span>:flex;<br>&#125;<br><span class="hljs-selector-class">.left</span> &#123;<br>  <span class="hljs-attribute">margin-right</span>: <span class="hljs-number">20px</span>;<br>&#125;<br><span class="hljs-selector-class">.right</span> &#123;<br>  <span class="hljs-attribute">flex</span>: <span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-selector-class">.left</span> <span class="hljs-selector-tag">p</span> &#123;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>优缺点: flex很强大,但是兼容性和性能都存在一些问题;</li></ul><h2 id="两列不定宽-一列自适应"><a href="#两列不定宽-一列自适应" class="headerlink" title="两列不定宽 + 一列自适应"></a>两列不定宽 + 一列自适应</h2><ul><li>原理: 类似于一列不定宽+一列自适应</li><li>用法: 左、中设置为float:left;margin-right:xxx;并设置内容宽度,右设置overflow:hidden;</li><li>示例:<figure class="hljs highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"parent"</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"left"</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>left<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"center"</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>center<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"right"</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>right<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul><figure class="hljs highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.left</span>,<br><span class="hljs-selector-class">.center</span> &#123;<br>  <span class="hljs-attribute">float</span>: left;<br>  <span class="hljs-attribute">margin-right</span>: <span class="hljs-number">20px</span>;<br>&#125;<br><span class="hljs-selector-class">.right</span> &#123;<br>  <span class="hljs-attribute">overflow</span>: hidden;<br>&#125;<br><span class="hljs-selector-class">.left</span> <span class="hljs-selector-tag">p</span>,<br><span class="hljs-selector-class">.center</span> <span class="hljs-selector-tag">p</span> &#123;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="等分布局"><a href="#等分布局" class="headerlink" title="等分布局"></a>等分布局</h2><ul><li>公式转化: </li><li>总宽度 = 子元素宽度 <em> n + 间隙宽度 </em> (n - 1)</li><li>总宽度 = 子元素宽度 <em> n + 间隙宽度 </em> n - 间隙宽度</li><li>总宽度 + 间隙宽度 =( 子元素宽度 + 间隙宽度 ) * n</li><li>两个问题: 如何让总宽度增加间隙宽度   如何让每个子元素宽度包含间隙宽度</li></ul><h4 id="使用float"><a href="#使用float" class="headerlink" title="使用float"></a>使用float</h4><ul><li>原理: 增大父元素的实际宽度,使用CSS3属性box-sizing进行辅助布局;</li><li>用法: 父元素margin-left:-<strong>px;子元素float:left;width:25%;padding-left:</strong>px;box-sizing:border-box;</li><li>示例:<figure class="hljs highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"parent"</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"column"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"column"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"column"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>3<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"column"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>4<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>``` <br>```css<br>.parent &#123;<br>  margin-left: -20px;<br>&#125;<br>.column &#123;<br>  float:left;<br>  width: 25%;<br>  padding-left: 20px;<br>  box-sizing: border-box;<br>&#125;<br>```  <br>- 注意: IE6/7兼容性存在一些问题; <br><br>#### 使用table<br>- 原理: 通过增加一个父元素的修正框,增加其宽度,并将父元素转换为table,将子元素转换为table-cell进行布局;<br>- 用法: 父元素修正框设置为margin-left:-**px;父元素display:table;width:100%;table-layout:fixed;子元素display:table-cell;padding-left:**px;<br>- 示例;<br>```html<br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"parent-fix"</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"parent"</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"column"</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>111<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"column"</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>222<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"column"</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>333<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"column"</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>444<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul><figure class="hljs highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.parent-fix</span> &#123;<br>  <span class="hljs-attribute">margin-left</span>: -<span class="hljs-number">20px</span>;<br>&#125;<br><span class="hljs-selector-class">.parent</span> &#123;<br>  <span class="hljs-attribute">display</span>: table;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;<br>  <span class="hljs-attribute">table-layout</span>: fixed;<br>&#125;<br><span class="hljs-selector-class">.column</span> &#123;<br>  <span class="hljs-attribute">display</span>: table-cell;<br>  <span class="hljs-attribute">padding-left</span>: <span class="hljs-number">20px</span>;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>优点: 结构和块数无关联;</li><li>缺点: 嵌套层数增加;</li></ul><h4 id="使用flex-1"><a href="#使用flex-1" class="headerlink" title="使用flex"></a>使用flex</h4><ul><li>原理: 通过设置CSS3中的flex属性达到等分布局;</li><li>用法: 父元素display:flex;子元素flex:1;并设置间距;</li><li>示例:<figure class="hljs highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"parent"</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"column"</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>111<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"column"</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>222<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"column"</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>333<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"column"</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>444<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul><figure class="hljs highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.parent</span> &#123;<br>  <span class="hljs-attribute">display</span>: flex;<br>&#125;<br><span class="hljs-selector-class">.column</span> &#123;<br>  <span class="hljs-attribute">flex</span>: <span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-selector-class">.column</span>+<span class="hljs-selector-class">.column</span> &#123;<br>  <span class="hljs-attribute">margin-left</span>: <span class="hljs-number">20px</span>;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>优点: 代码量少,与块数无关;</li><li>缺点: 低版本浏览器兼容性存在问题;</li></ul><h2 id="定宽-自适应-两块高度相同"><a href="#定宽-自适应-两块高度相同" class="headerlink" title="定宽 + 自适应 + 两块高度相同"></a>定宽 + 自适应 + 两块高度相同</h2><h4 id="使用float-1"><a href="#使用float-1" class="headerlink" title="使用float"></a>使用float</h4><ul><li>原理: 通过过分加大左右子框的高度，辅助超出隐藏，以达到视觉上的等高。</li><li>用法: 父元素overflow: hidden，左右子元素padding-bottom: 9999px、margin-bottom: -9999px，左子元素float: left、width、margin-right，右子元素overflow: hidden;</li><li>示例:<figure class="hljs highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"parent"</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"left"</span>&gt;</span>left<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"right"</span>&gt;</span>right<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul><figure class="hljs highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">p</span>&#123;<br>    <span class="hljs-attribute">background</span>: none<span class="hljs-meta">!important</span>;<br>&#125;<br><span class="hljs-selector-class">.left</span>,<span class="hljs-selector-class">.right</span>&#123;<br>    <span class="hljs-attribute">background</span>: <span class="hljs-number">#444</span>;<br>&#125;<br><span class="hljs-selector-class">.parent</span>&#123;<br>    <span class="hljs-attribute">overflow</span>: hidden;<br>&#125;<br><span class="hljs-selector-class">.left</span>,<span class="hljs-selector-class">.right</span>&#123;<br>    <span class="hljs-attribute">padding-bottom</span>: <span class="hljs-number">9999px</span>;<br>    <span class="hljs-attribute">margin-bottom</span>: -<span class="hljs-number">9999px</span>;<br>&#125;<br><span class="hljs-selector-class">.left</span>&#123;<br>    <br>    <span class="hljs-attribute">float</span>: left; <br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;<br>    <span class="hljs-attribute">margin-right</span>: <span class="hljs-number">20px</span>;<br>&#125;<br><span class="hljs-selector-class">.right</span>&#123;<br>    <span class="hljs-attribute">overflow</span>: hidden;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>优点: 兼容性好;</li><li>缺点: 伪等高,不是真正意义上的等高;</li></ul><h4 id="使用table-1"><a href="#使用table-1" class="headerlink" title="使用table"></a>使用table</h4><ul><li>原理：将父框转化为tabel，将子框转化为tabel-cell布局，以达到定宽+自适应+两块高度一样高。</li><li>用法：父元素display:table、width:100%、table-layout:fixed，左右子元素display:table-cell，左子元素width、padding-right。</li><li>示例:<figure class="hljs highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"parent"</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"left"</span>&gt;</span>left<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"right"</span>&gt;</span>.right<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul><figure class="hljs highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.parent</span> &#123;<br>  <span class="hljs-attribute">display</span>: table;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;<br>  <span class="hljs-attribute">table-layout</span>: fixed;<br>&#125;<br><span class="hljs-selector-class">.left</span> &#123;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;<br>  <span class="hljs-attribute">padding-right</span>: <span class="hljs-number">20px</span>;<br>&#125;<br><span class="hljs-selector-class">.right</span>,<br><span class="hljs-selector-class">.left</span> &#123;<br>  <span class="hljs-attribute">display</span>: table-cell;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="使用flex-2"><a href="#使用flex-2" class="headerlink" title="使用flex"></a>使用flex</h4><ul><li>原理: 通过设置CSS3布局利器flex中的flex属性以达到定宽+自适应+两块高度一样高。</li><li>用法：父元素display: flex，左子元素width、margin-right;右子元素flex:1。</li><li>示例:<figure class="hljs highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"parent"</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"left"</span>&gt;</span>left<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"right"</span>&gt;</span>right<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul><figure class="hljs highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.parent</span> &#123;<br>  <span class="hljs-attribute">display</span>: flex;<br>&#125;<br><span class="hljs-selector-class">.left</span> &#123;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;<br>  <span class="hljs-attribute">margin-right</span>: <span class="hljs-number">20px</span>;<br>&#125;<br><span class="hljs-selector-class">.right</span> &#123;<br>  <span class="hljs-attribute">flex</span>: <span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>优缺点: 代码量少,简洁,但是兼容性存在一些问题;</li></ul><h4 id="使用display"><a href="#使用display" class="headerlink" title="使用display"></a>使用display</h4><ul><li>原理: 通过设置display中的CSS3的-webkit-box属性以达到定宽+自适应+两块高度一样高。</li><li>用法: 父元素display: -webkit-box、width:100%，左子元素width、margin-right，右子元素-webkit-box-flex: 1;</li><li>示例:<figure class="hljs highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"parent"</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"left"</span>&gt;</span>left<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"right"</span>&gt;</span>right<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul><figure class="hljs highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.parent</span> &#123;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;<br>  <span class="hljs-attribute">display</span>: -webkit-box;<br>&#125;<br><span class="hljs-selector-class">.left</span> &#123;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;<br>  <span class="hljs-attribute">margin-right</span>: <span class="hljs-number">20px</span>;<br>&#125;<br><span class="hljs-selector-class">.right</span> &#123;<br>  <span class="hljs-attribute">-webkit-box-flex</span>: <span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>缺点: 兼容性存在较大问题;</li></ul><h2 id="全屏布局"><a href="#全屏布局" class="headerlink" title="全屏布局"></a>全屏布局</h2><h4 id="全屏布局的特点"><a href="#全屏布局的特点" class="headerlink" title="全屏布局的特点:"></a>全屏布局的特点:</h4><ul><li>滚动条不是全局滚动条,而是出现在内容区域里,一般是主内容区域;</li><li>浏览器变大时,撑满窗口;</li></ul><h3 id="全屏布局的方法"><a href="#全屏布局的方法" class="headerlink" title="全屏布局的方法"></a>全屏布局的方法</h3><h4 id="使用position"><a href="#使用position" class="headerlink" title="使用position"></a>使用position</h4><ul><li>原理: 将上下部分固定,中间部分使用定宽+自适应+等高;</li><li>用法: 见示例;</li><li>示例:<figure class="hljs highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"parent"</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"top"</span>&gt;</span>top<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"left"</span>&gt;</span>left<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"right"</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"inner"</span>&gt;</span>right-inner<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"bottom"</span>&gt;</span>bottom<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul><figure class="hljs highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">html</span>,<br><span class="hljs-selector-tag">body</span>,<br><span class="hljs-selector-class">.parent</span> &#123;<br>  <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;<br>  <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;<br>  <span class="hljs-attribute">overflow</span>: hidden;<br>&#125;<br><span class="hljs-selector-tag">body</span> &#123;<br>  <span class="hljs-attribute">color</span>: white;<br>&#125;<br><span class="hljs-selector-class">.top</span> &#123;<br>  <span class="hljs-attribute">position</span>: absolute;<br>  <span class="hljs-attribute">top</span>: <span class="hljs-number">0</span>;<br>  <span class="hljs-attribute">left</span>: <span class="hljs-number">0</span>;<br>  <span class="hljs-attribute">right</span>: <span class="hljs-number">0</span>;<br>  <span class="hljs-attribute">bottom</span>: <span class="hljs-number">0</span>;<br>  <span class="hljs-attribute">background-color</span>: blue;<br>&#125;<br><span class="hljs-selector-class">.left</span> &#123;<br>  <span class="hljs-attribute">position</span>: absolute;<br>  <span class="hljs-attribute">left</span>: <span class="hljs-number">0</span>;<br>  <span class="hljs-attribute">top</span>: <span class="hljs-number">100px</span>;<br>  <span class="hljs-attribute">bottom</span>: <span class="hljs-number">50px</span>;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;<br>  <span class="hljs-attribute">background-color</span>: red;<br>&#125;<br><span class="hljs-selector-class">.right</span> &#123;<br>  <span class="hljs-attribute">position</span>: absolute;<br>  <span class="hljs-attribute">left</span>: <span class="hljs-number">200px</span>;<br>  <span class="hljs-attribute">top</span>: <span class="hljs-number">100px</span>;<br>  <span class="hljs-attribute">bottom</span>: <span class="hljs-number">50px</span>;<br>  <span class="hljs-attribute">right</span>: <span class="hljs-number">0</span>;<br>  <span class="hljs-attribute">background-color</span>: pink;<br>  <span class="hljs-attribute">overflow</span>: auto;<br>&#125;<br><span class="hljs-selector-class">.right</span> <span class="hljs-selector-class">.inner</span> &#123;<br>  <span class="hljs-attribute">min-height</span>: <span class="hljs-number">1000px</span>;<br>&#125;<br><span class="hljs-selector-class">.bottom</span> &#123;<br>  <span class="hljs-attribute">position</span>: absolute;<br>  <span class="hljs-attribute">left</span>: <span class="hljs-number">0</span>;<br>  <span class="hljs-attribute">right</span>: <span class="hljs-number">0</span>;<br>  <span class="hljs-attribute">bottom</span>: <span class="hljs-number">0</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">50px</span>;<br>  <span class="hljs-attribute">background-color</span>: black;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>优缺点: 兼容性好,IE6以下不支持;</li></ul><h4 id="使用flex-3"><a href="#使用flex-3" class="headerlink" title="使用flex"></a>使用flex</h4><ul><li>原理: 通过CSS3中flex属性和flex-direction属性;</li><li>用法: 见示例;</li><li>示例: <figure class="hljs highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"parent"</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"top"</span>&gt;</span>top<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"middle"</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"left"</span>&gt;</span>left<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"right"</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"inner"</span>&gt;</span>right<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"bottom"</span>&gt;</span>bottom<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul><figure class="hljs highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">html</span>,<br><span class="hljs-selector-tag">body</span>,<br><span class="hljs-selector-class">.parent</span> &#123;<br>  <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;<br>  <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;<br>  <span class="hljs-attribute">overflow</span>: hidden;<br>&#125;<br><span class="hljs-selector-tag">body</span> &#123;<br>  <span class="hljs-attribute">color</span>: white;<br>&#125;<br><span class="hljs-selector-class">.parent</span> &#123;<br>  <span class="hljs-attribute">display</span>: flex;<br>  <span class="hljs-attribute">flex-direction</span>: column;<br>&#125;<br><span class="hljs-selector-class">.top</span> &#123;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;<br>  <span class="hljs-attribute">background-color</span>: blue;<br>&#125;<br><span class="hljs-selector-class">.bottom</span> &#123;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">50px</span>;<br>  <span class="hljs-attribute">background-color</span>: black;<br>&#125;<br><span class="hljs-selector-class">.middle</span> &#123;<br>  <span class="hljs-attribute">flex</span>: <span class="hljs-number">1</span>;<br>  <span class="hljs-attribute">display</span>: flex;<br>&#125;<br><span class="hljs-selector-class">.left</span> &#123;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;<br>  <span class="hljs-attribute">background-color</span>: red;<br>&#125;<br><span class="hljs-selector-class">.right</span> &#123;<br>  <span class="hljs-attribute">flex</span>: <span class="hljs-number">1</span>;<br>  <span class="hljs-attribute">overflow</span>: auto;<br>  <span class="hljs-attribute">background-color</span>: pink;<br>&#125;<br><span class="hljs-selector-class">.right</span> <span class="hljs-selector-class">.inner</span> &#123;<br>  <span class="hljs-attribute">min-height</span>: <span class="hljs-number">1000px</span>;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>优缺点: 兼容性差,IE9及以下不兼容;</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;前端布局非常重要的一环就是页面框架的搭建，也是最基础的一环。在页面框架搭建之中，又有居中布局/多列布局/全局布局。本文介绍一下多列布局的一些技巧。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;多列布局&quot;&gt;&lt;a href=&quot;#多列布局&quot; class=&quot;headerlin
      
    
    </summary>
    
      <category term="前端布局" scheme="http://www.wanglichao.top/todo/categories/%E5%89%8D%E7%AB%AF%E5%B8%83%E5%B1%80/"/>
    
    
      <category term="前端" scheme="http://www.wanglichao.top/todo/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="CSS" scheme="http://www.wanglichao.top/todo/tags/CSS/"/>
    
      <category term="CSS基础" scheme="http://www.wanglichao.top/todo/tags/CSS%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
</feed>
