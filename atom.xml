<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>勇往直前</title>
  
  <subtitle>心有远方</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.wanglichao.top/"/>
  <updated>2018-11-16T22:53:47.345Z</updated>
  <id>http://www.wanglichao.top/</id>
  
  <author>
    <name>王立超</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Vue学习笔记之响应接口</title>
    <link href="http://www.wanglichao.top/2018/11/17/Vue-API-Response/"/>
    <id>http://www.wanglichao.top/2018/11/17/Vue-API-Response/</id>
    <published>2018-11-17T00:00:00.000Z</published>
    <updated>2018-11-16T22:53:47.345Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Vue-js-响应接口"><a href="#Vue-js-响应接口" class="headerlink" title="Vue.js 响应接口"></a>Vue.js 响应接口</h2><blockquote><p>Vue 可以添加数据动态响应接口。<br>例如以下实例，我们通过使用 $watch 属性来实现数据的监听，$watch 必须添加在 Vue 实例之外才能实现正确的响应。<br>实例中通过点击按钮自动加 1。setTimeout 设置两秒后计算器的值加上 20 。</p></blockquote><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs undefined">&lt;div id=&quot;app&quot;&gt;<br>    &lt;p&gt;计数器:&#123;&#123; counter &#125;&#125;&lt;/p&gt;<br>    &lt;button @click=&quot;counter++&quot;&gt;click me&lt;/button&gt;<br>&lt;/div&gt;<br>&lt;script&gt;<br>    const vm = new Vue(&#123;<br>        el: &quot;#app&quot;,<br>        data: &#123;counter: 1&#125;<br>    &#125;);<br>    vm.$watch(&apos;counter&apos;, (newValue, oldValue) =&gt; &#123;<br>        console.log(&quot;newValue:&quot;, newValue);<br>        console.log(&quot;oldValue:&quot;, oldValue);<br>    &#125;);<br>    setTimeout(function () &#123;<br>        vm.counter = 3333333;<br>    &#125;, 2000);<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><blockquote><p>Vue 不允许在已经创建的实例上动态添加新的根级响应式属性。</p><p>　Vue 不能检测到对象属性的添加或删除，最好的方式就是在初始化实例前声明根级响应式属性，哪怕只是一个空值。</p></blockquote><p>＞如果我们需要在运行过程中实现属性的添加或删除，则可以使用全局 Vue，Vue.set 和 Vue.delete 方法。</p><h3 id="Vue-set"><a href="#Vue-set" class="headerlink" title="Vue.set"></a>Vue.set</h3><blockquote><p>　Vue.set 方法用于设置对象的属性，它可以解决 Vue 无法检测添加属性的限制，语法格式如下：<br><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined">Vue.set(target, key , value);<br></code></pre></td></tr></table></figure></p><p>参数说明:</p><ul><li>target 可以是对象或数组</li><li>key 可以是字符串或数字</li><li>value 可以是任何类型</li></ul></blockquote><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs undefined">&lt;div id = &quot;app&quot;&gt;<br>&lt;p style = &quot;font-size:25px;&quot;&gt;计数器: &#123;&#123; products.id &#125;&#125;&lt;/p&gt;<br>&lt;button @click = &quot;products.id++&quot; style = &quot;font-size:25px;&quot;&gt;点我&lt;/button&gt;<br>&lt;/div&gt;<br>&lt;script type = &quot;text/javascript&quot;&gt;<br>var myproduct = &#123;&quot;id&quot;:1, name:&quot;book&quot;, &quot;price&quot;:&quot;20.00&quot;&#125;;<br>var vm = new Vue(&#123;<br>   el: &apos;#app&apos;,<br>   data: &#123;<br>      counter: 1,<br>      products: myproduct<br>   &#125;<br>&#125;);<br>Vue.set(myproduct, &apos;qty&apos;, 1);<br>console.log(vm);<br>vm.$watch(&apos;counter&apos;, function(nval, oval) &#123;<br>   alert(&apos;计数器值的变化 :&apos; + oval + &apos; 变为 &apos; + nval + &apos;!&apos;);<br>&#125;);<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><blockquote><p>从控制台输出的结果可以看出 get/set 方法可用于qty 属性。</p></blockquote><h4 id="Vue-delete"><a href="#Vue-delete" class="headerlink" title="Vue.delete"></a>Vue.delete</h4><blockquote><p>Vue.delete 用于删除动态添加的属性 语法格式：<br><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined">Vue.delete(target, key)<br></code></pre></td></tr></table></figure></p><p>参数说明:</p><ul><li>target: 可以是对象或数组;</li><li>key: 可以是字符串或数字;</li></ul></blockquote><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs undefined">&lt;div id = &quot;app&quot;&gt;<br>   &lt;p style = &quot;font-size:25px;&quot;&gt;计数器: &#123;&#123; products.id &#125;&#125;&lt;/p&gt;<br>   &lt;button @click = &quot;products.id++&quot; style = &quot;font-size:25px;&quot;&gt;点我&lt;/button&gt;<br>&lt;/div&gt;<br>&lt;script type = &quot;text/javascript&quot;&gt;<br>var myproduct = &#123;&quot;id&quot;:1, name:&quot;book&quot;, &quot;price&quot;:&quot;20.00&quot;&#125;;<br>var vm = new Vue(&#123;<br>   el: &apos;#app&apos;,<br>   data: &#123;<br>      counter: 1,<br>      products: myproduct<br>   &#125;<br>&#125;);<br>Vue.delete(myproduct, &apos;price&apos;);<br>console.log(vm);<br>vm.$watch(&apos;counter&apos;, function(nval, oval) &#123;<br>   alert(&apos;计数器值的变化 :&apos; + oval + &apos; 变为 &apos; + nval + &apos;!&apos;);<br>&#125;);<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><blockquote><p>使用Vue.delete删除了product中的price属性；</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Vue-js-响应接口&quot;&gt;&lt;a href=&quot;#Vue-js-响应接口&quot; class=&quot;headerlink&quot; title=&quot;Vue.js 响应接口&quot;&gt;&lt;/a&gt;Vue.js 响应接口&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;Vue 可以添加数据动态响应接口。&lt;br&gt;
      
    
    </summary>
    
      <category term="笔记" scheme="http://www.wanglichao.top/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="前端" scheme="http://www.wanglichao.top/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="JS" scheme="http://www.wanglichao.top/tags/JS/"/>
    
      <category term="vue" scheme="http://www.wanglichao.top/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>Vue学习笔记之混入</title>
    <link href="http://www.wanglichao.top/2018/11/17/Vue-Mixin/"/>
    <id>http://www.wanglichao.top/2018/11/17/Vue-Mixin/</id>
    <published>2018-11-17T00:00:00.000Z</published>
    <updated>2018-11-16T20:32:29.583Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Vue-js-混入"><a href="#Vue-js-混入" class="headerlink" title="Vue.js 混入"></a>Vue.js 混入</h2><blockquote><p>混入 (mixins)定义了一部分可复用的方法或者计算属性。混入对象可以包含任意组件选项。当组件使用混入对象时，所有混入对象的选项将被混入该组件本身的选项。<br><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs undefined">&lt;script type = &quot;text/javascript&quot;&gt;<br>var vm = new Vue(&#123;<br>el: &apos;#databinding&apos;<br>&#125;);<br>// 定义一个混入对象<br>var myMixin = &#123;<br>created: function () &#123;<br>this.startmixin()<br>&#125;,<br>methods: &#123;<br>startmixin: function () &#123;<br>document.write(&quot;欢迎来到混入实例&quot;);<br>&#125;<br>&#125;<br>&#125;;<br>var Component = Vue.extend(&#123;<br>mixins: [myMixin]<br>&#125;)<br>var component = new Component();<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure></p></blockquote><h4 id="选项合并"><a href="#选项合并" class="headerlink" title="选项合并"></a>选项合并</h4><blockquote><p>当组件和混入对象含有同名选项时，这些选项将以恰当的方式混合。</p><p>比如，数据对象在内部会进行浅合并 (一层属性深度)，在和组件的数据发生冲突时以组件数据优先。</p><p>以下实例中，Vue 实例与混入对象包含了相同的方法。从输出结果可以看出两个选项合并了。<br><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs undefined">var mixin = &#123;<br>    created: function () &#123;<br>        document.write(&apos;混入调用&apos; + &apos;&lt;br&gt;&apos;)<br>    &#125;<br>&#125;<br>new Vue(&#123;<br>    mixins: [mixin],<br>    created: function () &#123;<br>        document.write(&apos;组件调用&apos; + &apos;&lt;br&gt;&apos;)<br>    &#125;<br>&#125;);<br></code></pre></td></tr></table></figure></p><p>输出结果为:<br>混入调用<br>组件调用</p><p>如果 methods 选项中有相同的函数名，则 Vue 实例优先级会较高。如下实例，Vue 实例与混入对象的 methods 选项都包含了相同的函数：</p></blockquote><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs undefined">var mixin = &#123;<br>    methods: &#123;<br>        hellworld() &#123;<br>            document.write(&apos;HelloWorld 方法&apos; + &apos;&lt;br&gt;&apos;);<br>        &#125;,<br>        samemethod() &#123;<br>            document.write(&apos;Mixin：相同方法名&apos; + &apos;&lt;br&gt;&apos;);<br>        &#125;<br>    &#125;<br>&#125;;<br>var vm = new Vue(&#123;<br>    mixins: [mixin],<br>    methods: &#123;<br>        start() &#123;<br>            document.write(&apos;start 方法&apos; + &apos;&lt;br&gt;&apos;);<br>        &#125;,<br>        samemethod() &#123;<br>            document.write(&apos;Main：相同方法名&apos; + &apos;&lt;br&gt;&apos;);<br>        &#125;<br>    &#125;<br>&#125;);<br>vm.hellworld();<br>vm.start();<br>vm.samemethod();<br></code></pre></td></tr></table></figure><blockquote><p>HelloWorld 方法<br>start 方法<br>Main：相同方法名</p><p>以上实例，我们调用了以下三个方法：<br><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs undefined">vm.hellworld();<br>vm.start();<br>vm.samemethod();<br></code></pre></td></tr></table></figure></p><p>从输出结果 methods 选项中如果碰到相同的函数名则 Vue 实例有更高的优先级会执行输出。</p></blockquote><h4 id="全局混入"><a href="#全局混入" class="headerlink" title="全局混入"></a>全局混入</h4><blockquote><p>也可以全局注册混入对象。注意使用！ 一旦使用全局混入对象，将会影响到 所有 之后创建的 Vue 实例。使用恰当时，可以为自定义对象注入处理逻辑。</p><p>谨慎使用全局混入对象，因为会影响到每个单独创建的 Vue 实例 (包括第三方模板)。</p></blockquote><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs undefined">&lt;script&gt;<br>    Vue.mixin(&#123;<br>        created() &#123;<br>            let myOption = this.$options.myOption;<br>            if (myOption) &#123;<br>                document.write(myOption);<br>            &#125;<br>        &#125;<br>    &#125;);<br>    new Vue(&#123;<br>        myOption: &apos;Hello Vue!!&apos;<br>    &#125;)<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Vue-js-混入&quot;&gt;&lt;a href=&quot;#Vue-js-混入&quot; class=&quot;headerlink&quot; title=&quot;Vue.js 混入&quot;&gt;&lt;/a&gt;Vue.js 混入&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;混入 (mixins)定义了一部分可复用的方法或者计算属性
      
    
    </summary>
    
      <category term="笔记" scheme="http://www.wanglichao.top/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="前端" scheme="http://www.wanglichao.top/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="JS" scheme="http://www.wanglichao.top/tags/JS/"/>
    
      <category term="vue" scheme="http://www.wanglichao.top/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>Vue学习笔记之Ａｊａｘ</title>
    <link href="http://www.wanglichao.top/2018/11/17/Vue-Ajax/"/>
    <id>http://www.wanglichao.top/2018/11/17/Vue-Ajax/</id>
    <published>2018-11-17T00:00:00.000Z</published>
    <updated>2018-11-16T20:54:22.685Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Vue-js-Ajax-vue-resource"><a href="#Vue-js-Ajax-vue-resource" class="headerlink" title="Vue.js Ajax(vue-resource)"></a>Vue.js Ajax(vue-resource)</h2><blockquote><p> Vue 要实现异步加载需要使用到 vue-resource 库。</p></blockquote><h3 id="get请求"><a href="#get请求" class="headerlink" title="get请求"></a>get请求</h3><blockquote><p> 以下是一个简单的 Get 请求实例，请求地址是一个简单的 txt 文本：</p></blockquote><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs undefined">window.onload = function()&#123;<br>    var vm = new Vue(&#123;<br>        el:&apos;#box&apos;,<br>        data:&#123;<br>            msg:&apos;Hello World!&apos;,<br>        &#125;,<br>        methods:&#123;<br>            get:function()&#123;<br>                //发送get请求<br>                this.$http.get(&apos;/try/ajax/ajax_info.txt&apos;).then(function(res)&#123;<br>                    document.write(res.body);    <br>                &#125;,function()&#123;<br>                    console.log(&apos;请求失败处理&apos;);<br>                &#125;);<br>            &#125;<br>        &#125;<br>    &#125;);<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>　如果需要传递数据，可以使用 this.$http.get(‘get.php’,jsonData) 格式，第二个参数 jsonData 就是传到后端的数据。</p></blockquote><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs undefined">this.$http.get(&apos;get.php&apos;,&#123;a:1,b:2&#125;).then(function(res)&#123;<br>    document.write(res.body);    <br>&#125;,function(res)&#123;<br>    console.log(res.status);<br>&#125;);<br></code></pre></td></tr></table></figure><h4 id="post请求"><a href="#post请求" class="headerlink" title="post请求"></a>post请求</h4><blockquote><p>post 发送数据到后端，需要第三个参数 {emulateJSON:true}。<br>emulateJSON 的作用： 如果Web服务器无法处理编码为 application/json 的请求，你可以启用 emulateJSON 选项。</p></blockquote><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs undefined">window.onload = function()&#123;<br>    var vm = new Vue(&#123;<br>        el:&apos;#box&apos;,<br>        data:&#123;<br>            msg:&apos;Hello World!&apos;,<br>        &#125;,<br>        methods:&#123;<br>            post:function()&#123;<br>                //发送 post 请求<br>                this.$http.post(&apos;/try/ajax/demo_test_post.php&apos;,&#123;name:&quot;呵呵哈哈&quot;,url:&quot;http://www.wanglichao.top&quot;&#125;,  &#123;emulateJSON:true&#125;).then(function(res)&#123;<br>                    document.write(res.body);    <br>                &#125;,function(res)&#123;<br>                    console.log(res.status);<br>                &#125;);<br>            &#125;<br>        &#125;<br>    &#125;);<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>demo_test_post.php 代码如下：</p></blockquote><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs undefined">&lt;?php<br>$name = isset($_POST[&apos;name&apos;]) ? htmlspecialchars($_POST[&apos;name&apos;]) : &apos;&apos;;<br>$city = isset($_POST[&apos;url&apos;]) ? htmlspecialchars($_POST[&apos;url&apos;]) : &apos;&apos;;<br>echo &apos;网站名: &apos; . $name;<br>echo &quot;\n&quot;;<br>echo &apos;URL 地址: &apos; .$city;<br>?&gt;<br></code></pre></td></tr></table></figure><h4 id="语法-amp-API"><a href="#语法-amp-API" class="headerlink" title="语法 &amp; API"></a>语法 &amp; API</h4><blockquote><p>　你可以使用全局对象方式 Vue.http 或者在一个 Vue 实例的内部使用 this.$http来发起 HTTP 请求。</p></blockquote><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs undefined">// 基于全局Vue对象使用http<br>Vue.http.get(&apos;/someUrl&apos;, [options]).then(successCallback, errorCallback);<br>Vue.http.post(&apos;/someUrl&apos;, [body], [options]).then(successCallback, errorCallback);<br><br>// 在一个Vue实例内使用$http<br>this.$http.get(&apos;/someUrl&apos;, [options]).then(successCallback, errorCallback);<br>this.$http.post(&apos;/someUrl&apos;, [body], [options]).then(successCallback, errorCallback);<br></code></pre></td></tr></table></figure><blockquote><p>vue-resource 提供了 7 种请求 API(REST 风格)：</p></blockquote><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs undefined">get(url, [options])<br>head(url, [options])<br>delete(url, [options])<br>jsonp(url, [options])<br>post(url, [body], [options])<br>put(url, [body], [options])<br>patch(url, [body], [options])<br></code></pre></td></tr></table></figure><blockquote><p>　除了 jsonp 以外，另外 6 种的 API 名称是标准的 HTTP 方法。</p><p>options 参数说明:</p></blockquote><table><thead><tr><th>参数</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>url</td><td>string</td><td>请求的目标URL</td></tr><tr><td>body</td><td>Object, FormData, string</td><td>作为请求体发送的数据</td></tr><tr><td>headers</td><td>　    Object</td><td>作为请求头部发送的头部对象</td></tr><tr><td>params</td><td>Object</td><td>作为URL参数的参数对象</td></tr><tr><td>method</td><td>string</td><td>HTTP方法 (例如GET，POST，…)</td></tr><tr><td>timeout</td><td>number</td><td>请求超时（单位：毫秒） (0表示永不超时)</td></tr><tr><td>before</td><td>function(request)</td><td>在请求发送之前修改请求的回调函数</td></tr><tr><td>progress</td><td>function(event)</td><td>用于处理上传进度的回调函数ProgressEvent</td></tr><tr><td>credentials</td><td>boolean</td><td>是否需要出示用于跨站点请求的凭据</td></tr><tr><td>emulateHTTP</td><td>boolean</td><td>是否需要通过设置X-HTTP-Method-Override头部并且以传统POST方式发送PUT，PATCH和DELETE请求。</td></tr><tr><td>emulateJSON</td><td>boolean</td><td>设置请求体的类型为application/x-www-form-urlencoded</td></tr></tbody></table><blockquote><p> 通过如下属性和方法处理一个请求获取到的响应对象：</p></blockquote><table><thead><tr><th>属性</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td> url</td><td>string</td><td>响应的URL源</td></tr><tr><td>body</td><td>Object, Blob, string</td><td>响应体数据</td></tr><tr><td>headers</td><td>Header</td><td>请求头部对象</td></tr><tr><td>ok</td><td>boolean</td><td>当HTTP响应码为200到299之间的数值时该值为true</td></tr><tr><td>status</td><td>number</td><td>HTTP响应吗</td></tr><tr><td>statusText</td><td>string</td><td>HTTP响应状态</td></tr><tr><td>方法</td><td>类型</td><td>描述</td><td></td></tr><tr><td>text()</td><td>约定值</td><td>以字符串方式返回响应体</td></tr><tr><td>json()</td><td>约定值</td><td>以格式化后的json对象方式返回响应体</td></tr><tr><td>blob()</td><td>约定值</td><td>以二进制Blob对象方式返回响应体</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Vue-js-Ajax-vue-resource&quot;&gt;&lt;a href=&quot;#Vue-js-Ajax-vue-resource&quot; class=&quot;headerlink&quot; title=&quot;Vue.js Ajax(vue-resource)&quot;&gt;&lt;/a&gt;Vue.js Ajax(v
      
    
    </summary>
    
      <category term="笔记" scheme="http://www.wanglichao.top/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="前端" scheme="http://www.wanglichao.top/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="JS" scheme="http://www.wanglichao.top/tags/JS/"/>
    
      <category term="vue" scheme="http://www.wanglichao.top/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>Vue学习笔记之路由</title>
    <link href="http://www.wanglichao.top/2018/11/17/Vue-Router/"/>
    <id>http://www.wanglichao.top/2018/11/17/Vue-Router/</id>
    <published>2018-11-16T22:49:05.000Z</published>
    <updated>2018-11-16T16:00:29.747Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Vue-js-路由"><a href="#Vue-js-路由" class="headerlink" title="Vue.js 路由"></a>Vue.js 路由</h2><blockquote><p>Vue.js 路由语序我们通过不同的URL访问不同的内容;<br>通过Vue.js可以实现多视图的单页Web应用SPA(single page web application);</p></blockquote><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><blockquote><p>1 直接下载或CDN<br><a href="https://unpkg.com/vue-router/dist/vue-router.js" target="_blank" rel="noopener">https://unpkg.com/vue-router/dist/vue-router.js</a><br>2 NPM 推荐使用淘宝镜像<br> $ cnpm install vue-router</p></blockquote><h4 id="简单实例"><a href="#简单实例" class="headerlink" title="简单实例"></a>简单实例</h4><blockquote><p>Vue.js + vue-router  可以很简单的实现单页应用;<br><code>&lt;router-link&gt;</code>是一个组件,该组件用于设置一个导航链接,切换不同HTML内容.to属性为目标地址,即:要显示的内容<br>以下实例中将vue-router加入,然后配置组件和路由映射,在告诉vue-router在哪里渲染组件:<br><figure class="hljs highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs html">&lt;script src="https://unpkg.com/vue/dist/vue.js"&gt;&lt;/script&gt;<br>&lt;script src="https://unpkg.com/vue-router/dist/vue-router.js"&gt;&lt;/script&gt;<br>&lt;div id="app"&gt;<br>&lt;h1&gt;Hello, Vue-Router!!!&lt;/h1&gt;<br>&lt;p&gt;<br>&lt;router-link to="/foo"&gt;Go to Foo-Component&lt;/router-link&gt;<br>&lt;router-link to="/bar"&gt;Go to Bar-Component&lt;/router-link<br>&lt;/p&gt;<br>&lt;/div&gt;<br></code></pre></td></tr></table></figure></p></blockquote><figure class="hljs highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 定义路由组件</span><br><span class="hljs-keyword">const</span> Foo = &#123;<span class="hljs-attr">template</span>:<span class="hljs-string">'&lt;div&gt;Foo-Component&lt;/div&gt;'</span>&#125;;<br><span class="hljs-keyword">const</span> Bar  = &#123;<span class="hljs-attr">template</span>:<span class="hljs-string">'&lt;div&gt;Bar-Component&lt;/div&gt;'</span>&#125;;<br><span class="hljs-comment">// 定义路由配置</span><br><span class="hljs-keyword">const</span> routes = &#123;<br>&#123;<span class="hljs-attr">path</span>: <span class="hljs-string">'/foo'</span>, <span class="hljs-attr">component</span>: Foo&#125;,<br>&#123;<span class="hljs-attr">path</span>: <span class="hljs-string">'/bar'</span>, <span class="hljs-attr">component</span>: Bar&#125;<br>&#125;;<br><span class="hljs-comment">// 创建router实例,出入routes配置;</span><br><span class="hljs-keyword">const</span> router = <span class="hljs-keyword">new</span> VueRouter(&#123;<br>routes      <span class="hljs-comment">// routes:routes 缩写</span><br>&#125;)<br><span class="hljs-comment">// 创建和挂载根实例</span><br><span class="hljs-keyword">const</span> vm = <span class="hljs-keyword">new</span> Vue(&#123;<br>router<br>&#125;).$mount(<span class="hljs-string">"#app"</span>);<br></code></pre></td></tr></table></figure><blockquote><p>点击过的导航链接都会加上样式 class=”router-link-exact-active router-link-active”;</p><h4 id="lt-router-link-gt-属性"><a href="#lt-router-link-gt-属性" class="headerlink" title="&lt;router-link&gt; 属性"></a><code>&lt;router-link&gt;</code> 属性</h4><p>router-link 的属性:</p><h5 id="to"><a href="#to" class="headerlink" title="to"></a>to</h5><p>表示目标路由的链接,当被点击后,内部会立刻把to的值传到router.push(),所以这个值可以是一个字符串或者描述目标位置的对象<br><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs undefined">字符串<br>&lt;router-link to=&quot;home&apos;&gt;Home&lt;/router-link&gt;<br>使用v-bind的js表达式<br>&lt;router-link v-bind:to=&quot;&apos;home&apos;&quot;&gt;Home&lt;/router-link&gt;<br>简写方式<br>&lt;router-link :to=&quot;&apos;home&apos;&quot;&gt;Home&lt;/router-link&gt;<br><br>&lt;router-link :to=&quot;&#123;path: &apos;home&apos;&#125;&quot;&gt;&lt;/router-link&gt;<br>&lt;router-link :to=&quot;&#123;name: &apos;user&apos;, params: &#123;userId: 123&#125;&#125;&quot;&gt;&lt;/router-link&gt;<br>&lt;router-link :to=&quot;&#123;path: &apos;register&apos;,query: &#123;plan: &apos;private&apos;&#125;&#125;&quot;&gt;&lt;/router-link&gt;<br></code></pre></td></tr></table></figure></p></blockquote><h5 id="replace"><a href="#replace" class="headerlink" title="replace"></a>replace</h5><blockquote><p>设置replace属性的话,当点击时,会调用router.replace()而不是router.push(),导航后不会留下history记录;<br><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined">&lt;router-link :to=&quot;&#123;path: &apos;/aaa&apos;&#125;&quot; replace&gt;&lt;/router-link&gt;<br></code></pre></td></tr></table></figure></p></blockquote><h5 id="append"><a href="#append" class="headerlink" title="append"></a>append</h5><blockquote><p>设置append属性后,则在当前(相对)路径前添加基路径<br>例如: 从/a导航到一个相对路径b,如果没有配置append,则路径为/b,如果配了,则为/a/b;</p><h4 id="tag"><a href="#tag" class="headerlink" title="tag"></a>tag</h4><p>有时候想要<code>&lt;router-link&gt;</code>渲染成某种标签,例如<code>&lt;li&gt;</code>,可以使用tag prop类指定何种标签,同样它还是会监听点击,触发导航;<br><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined">&lt;router-link to=&quot;/foo&quot; tag=&quot;li&quot;&gt;foo&lt;/router-link&gt;<br></code></pre></td></tr></table></figure></p></blockquote><h4 id="active-class"><a href="#active-class" class="headerlink" title="active-class"></a>active-class</h4><blockquote><p>设置链接激活时使用的css类名,可以通过以下代码来替代:<br><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs undefined">&lt;style&gt;<br>.active &#123;<br>background-color: #333;<br>&#125;<br>&lt;/style&gt;<br>&lt;p&gt;<br>&lt;router-link v-bind:to=&quot;&#123;path: &apos;/user&apos;&#125;&quot; active-class=&quot;active&quot;&gt;user&lt;/router-link&gt;<br>&lt;/p&gt;<br></code></pre></td></tr></table></figure></p></blockquote><h4 id="exact-active-class"><a href="#exact-active-class" class="headerlink" title="exact-active-class"></a>exact-active-class</h4><blockquote><p>配置当链接被精确匹配的时候应该激活的class;<br><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined">&lt;router-link v-bind:to=&quot;&#123;path; &apos;/goods&apos;&#125;&quot; exact-active-class=&quot;active&quot;&gt;xxx&lt;/router-link&gt;<br></code></pre></td></tr></table></figure></p></blockquote><h4 id="event"><a href="#event" class="headerlink" title="event"></a>event</h4><blockquote><p>声明可以用来触发导航的事件,可以是一个字符串或是一个包含字符串的数组;<br><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined">&lt;router-link :to=&quot;&#123;path: &apos;/home&apos;&#125;&quot; event=&quot;mousevoer&quot;&gt;Home&lt;/router-link&gt;<br></code></pre></td></tr></table></figure></p></blockquote><h4 id="exact-active-class-和-active-class-的区别"><a href="#exact-active-class-和-active-class-的区别" class="headerlink" title="exact-active-class 和 active-class 的区别"></a>exact-active-class 和 active-class 的区别</h4><blockquote><p>router-link 默认情况下的路由是模糊匹配;<br>例如:当前路径是/article/1,那么也会激活<code>&lt;router-link to=&quot;/article&quot;&gt;</code>,所以当设置exact-active-class以后,这个router-link只有在当前路由被全包含匹配时才会被激活exact-active-class中的class;<br><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs undefined">&lt;router-link to=&quot;/goods&quot;&gt; active-class=&quot;router-active&quot;&gt;&lt;/router-link&gt;<br>当用户访问/goods/1时会被激活为<br>&lt;a href=&quot;#/goods&quot; class=&quot;router-active&quot; rel=&quot;nofollow&quot;&gt;&lt;/a&gt;<br>而使用:<br>&lt;router-link to=&quot;/goods&quot; exact-active-class=&quot;router-active&quot;&gt;&lt;/router-link&gt;<br>当用户访问/goods/1时,不会激活这个link的class:<br>&lt;a href=&quot;#/goods&quot; res=&quot;nofollow&quot;&gt;&lt;/a&gt;<br></code></pre></td></tr></table></figure></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Vue-js-路由&quot;&gt;&lt;a href=&quot;#Vue-js-路由&quot; class=&quot;headerlink&quot; title=&quot;Vue.js 路由&quot;&gt;&lt;/a&gt;Vue.js 路由&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;Vue.js 路由语序我们通过不同的URL访问不同的内容;
      
    
    </summary>
    
      <category term="笔记" scheme="http://www.wanglichao.top/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="前端" scheme="http://www.wanglichao.top/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="JS" scheme="http://www.wanglichao.top/tags/JS/"/>
    
      <category term="vue" scheme="http://www.wanglichao.top/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>Vue学习笔记之过渡/动画</title>
    <link href="http://www.wanglichao.top/2018/11/17/Vue-Transition/"/>
    <id>http://www.wanglichao.top/2018/11/17/Vue-Transition/</id>
    <published>2018-11-16T22:49:05.000Z</published>
    <updated>2018-11-16T19:23:19.658Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Vue-js-过渡-动画"><a href="#Vue-js-过渡-动画" class="headerlink" title="Vue.js 过渡 / 动画"></a>Vue.js 过渡 / 动画</h2><h3 id="过渡"><a href="#过渡" class="headerlink" title="过渡"></a>过渡</h3><blockquote><p>Vue 在插入/更新或者移出DOM时,提供多种不同方式的应用过渡效果;<br>Vue 提供了内置的过渡封装组件,该组件用于包裹要实现过渡效果的组件;<br><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs undefined">&lt;transition name=&quot;nameOfTransition&quot;&gt;<br>&lt;div&gt;&lt;/div&gt;<br>&lt;/transition&gt;<br></code></pre></td></tr></table></figure></p><p>通过实例来理解Vue的过渡是如何实现的:<br><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs undefined">&lt;style&gt;<br>        .fade-enter-active,<br>        .fade-leave-active &#123;<br>            transition: opacity 1s;<br>        &#125;<br>        .fade-enter,<br>        .fade-leave-to &#123;<br>            opacity: 0;<br>        &#125;<br>    &lt;/style&gt;<br>&lt;div id=&quot;app&quot;&gt;<br>        &lt;button @click=&quot;show=!show&quot;&gt;点我&lt;/button&gt;<br>        &lt;transition name=&quot;fade&quot;&gt;<br>            &lt;p v-show=&quot;show&quot; :style=&quot;styleObj&quot;&gt;动画示例&lt;/p&gt;<br>        &lt;/transition&gt;<br>    &lt;/div&gt;<br>&lt;script&gt;<br>    new Vue(&#123;<br>        el: &quot;#app&quot;,<br>        data: &#123;<br>            show: true,<br>            styleObj: &#123;<br>                fontSize: &apos;30px&apos;,<br>                color: &apos;red&apos;<br>            &#125;<br>        &#125;<br>    &#125;)<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure></p><p>此过渡其实就是一个淡入淡出的效果,Vue在元素显示于隐藏的过渡中,提供了6个class来切换;</p><ul><li>v-enter: 定义进入过渡的开始状态,在元素被插入之前生效,在元素被插入之后的下一帧移除;</li><li>v-enter-active: 定义进入过渡生效时的状态,在整个进入过渡的阶段中应用,在元素被插入之前生效,在过渡/动画完成只I后移除,这个类可以被用来定义进入过渡的过程时间/延迟和曲线函数;</li><li>v-enter-to: 2.1.8版本及以上: 定义进入过渡的结束状态,在元素被插入之后下一帧生效(与此同时v-enter被移除),在过渡/动画完成之后移除;</li><li>v-leave: 定义离开过渡的开始状态,在离开过渡被触发时立刻生效,在下一帧被移除;</li><li>v-leave-active: 定义离开过渡生效时的状态,在整个离开过渡的阶段中应用,在离开过渡被触发时生效,在过渡/动画完成之后移除.这个类可以被用来定义过渡的过程时间/延迟和曲线函数;</li><li>v-leave-to: 2.1.8版本及以上: 定义离开过渡的结束状态,在离开过渡被触发之后下一帧生效(与此同时v-leave被移除),在过渡/动画完成之后移除;<br>对于这些在过渡中切换的类名来说，如果你使用一个没有名字的 <code>&lt;transition&gt;</code>，则 v- 是这些类名的默认前缀。如果你使用了<code>&lt;transition name=&quot;my-transition&quot;&gt;</code>，那么 v-enter 会替换为 my-transition-enter。</li></ul><p>v-enter-active 和 v-leave-active 可以控制进入/离开过渡的不同的缓和曲线</p></blockquote><h4 id="css过渡"><a href="#css过渡" class="headerlink" title="css过渡"></a>css过渡</h4><blockquote><p>通常我们都使用 CSS 过渡来实现效果。<br><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs undefined">&lt;style&gt;<br>/* 可以设置不同的进入和离开动画 */<br>/* 设置持续时间和动画函数 */<br>.slide-fade-enter-active &#123;<br>  transition: all .3s ease;<br>&#125;<br>.slide-fade-leave-active &#123;<br>  transition: all .8s cubic-bezier(1.0, 0.5, 0.8, 1.0);<br>&#125;<br>.slide-fade-enter, .slide-fade-leave-to<br>/* .slide-fade-leave-active 用于 2.1.8 以下版本 */ &#123;<br>  transform: translateX(10px);<br>  opacity: 0;<br>&#125;<br>&lt;/style&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>&lt;div id = &quot;databinding&quot;&gt;<br>&lt;button v-on:click = &quot;show = !show&quot;&gt;点我&lt;/button&gt;<br>&lt;transition name=&quot;slide-fade&quot;&gt;<br>    &lt;p v-if=&quot;show&quot;&gt;哈哈哈&lt;/p&gt;<br>&lt;/transition&gt;<br>&lt;/div&gt;<br>&lt;script type = &quot;text/javascript&quot;&gt;<br>new Vue(&#123;<br>    el: &apos;#databinding&apos;,<br>    data: &#123;<br>        show: true<br>    &#125;<br>&#125;)<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure></p></blockquote><h4 id="css动画"><a href="#css动画" class="headerlink" title="css动画"></a>css动画</h4><blockquote><p>CSS 动画用法类似 CSS 过渡，但是在动画中 v-enter 类名在节点插入 DOM 后不会立即删除，而是在 animationen 事件触发时删除。<br><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs undefined">    &lt;style&gt;<br>        .bounce-enter-active &#123;<br>            animation: bounce-in .5s;<br>        &#125;<br>        .bounce-leave-active &#123;<br>            animation: bounce-in .5s reverse;<br>        &#125;<br>        @keyframes bounce-in &#123;<br>            0% &#123;<br>                transform: scale(0);<br>            &#125;<br>            50% &#123;<br>                transform: scale(1.5);<br>            &#125;<br>            100% &#123;<br>                transform: scale(1);<br>            &#125;<br>        &#125;<br>    &lt;/style&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>&lt;div id = &quot;app&quot;&gt;<br>    &lt;button @click = &quot;show = !show&quot;&gt;点我&lt;/button&gt;<br>    &lt;transition name=&quot;bounce&quot;&gt;<br>        &lt;p v-if=&quot;show&quot;&gt;啊哈哈,看我!!看我!!看我!!&lt;/p&gt;<br>    &lt;/transition&gt;<br>&lt;/div&gt;<br>&lt;script type = &quot;text/javascript&quot;&gt;<br>    new Vue(&#123;<br>        el: &apos;#app&apos;,<br>        data: &#123;<br>            show: true<br>        &#125;<br>    &#125;)<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure></p></blockquote><h4 id="自定义过渡的类名"><a href="#自定义过渡的类名" class="headerlink" title="自定义过渡的类名"></a>自定义过渡的类名</h4><blockquote><p>我们可以通过以下特性来自定义过渡类名：</p><ul><li>enter-class</li><li>enter-active-class</li><li>enter-to-class (2.1.8+)</li><li>leave-class</li><li>leave-active-class</li><li>leave-to-class (2.1.8+)<br>自定义过渡的类名优先级高于普通的类名，这样就能很好的与第三方（如：animate.css）的动画库结合使用。<figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs undefined">&lt;div id = &quot;app&quot;&gt;<br>    &lt;button @click = &quot;show = !show&quot;&gt;点我&lt;/button&gt;<br>    &lt;transition name=&quot;custom-classes-transition&quot;<br>                enter-active-class=&quot;animated tada&quot;<br>                leave-active-class=&quot;animated bounceOutRight&quot;<br>    &gt;<br>        &lt;p v-if=&quot;show&quot;&gt;啊哈哈,看我!!看我!!看我!!&lt;/p&gt;<br>    &lt;/transition&gt;<br>&lt;/div&gt;<br>&lt;script type = &quot;text/javascript&quot;&gt;<br>    new Vue(&#123;<br>        el: &apos;#app&apos;,<br>        data: &#123;<br>            show: true<br>        &#125;<br>    &#125;)<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure></li></ul></blockquote><h4 id="同时使用过渡和动画"><a href="#同时使用过渡和动画" class="headerlink" title="同时使用过渡和动画"></a>同时使用过渡和动画</h4><blockquote><p>Vue 为了知道过渡的完成，必须设置相应的事件监听器。它可以是 transitionend 或 animationend ，这取决于给元素应用的 CSS 规则。如果你使用其中任何一种，Vue 能自动识别类型并设置监听。</p><p>但是，在一些场景中，你需要给同一个元素同时设置两种过渡动效，比如 animation 很快的被触发并完成了，而 transition 效果还没结束。在这种情况中，你就需要使用 type 特性并设置 animation 或 transition 来明确声明你需要 Vue 监听的类型。</p></blockquote><h4 id="显性的过渡持续时间"><a href="#显性的过渡持续时间" class="headerlink" title="显性的过渡持续时间"></a>显性的过渡持续时间</h4><blockquote><p>在很多情况下，Vue 可以自动得出过渡效果的完成时机。默认情况下，Vue 会等待其在过渡效果的根元素的第一个 transitionend 或 animationend 事件。然而也可以不这样设定——比如，我们可以拥有一个精心编排的一系列过渡效果，其中一些嵌套的内部元素相比于过渡效果的根元素有延迟的或更长的过渡效果。</p><p>在这种情况下你可以用<code>&lt;transition&gt;</code>组件上的 duration 属性定制一个显性的过渡持续时间 (以毫秒计)：<br>`</p><p><transition :duration="1000">…</transition><br><code>你也可以定制进入和移出的持续时间：</code></p><p><transition :duration="{ enter: 500, leave: 800 }">…</transition><br>`</p><h3 id="JavaScript-钩子"><a href="#JavaScript-钩子" class="headerlink" title="JavaScript 钩子"></a>JavaScript 钩子</h3><p>可以在属性中声明JavaScript钩子;<br><figure class="hljs highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">transition</span><br>  <span class="hljs-attr">v-on:before-enter</span>=<span class="hljs-string">"beforeEnter"</span><br>  <span class="hljs-attr">v-on:enter</span>=<span class="hljs-string">"enter"</span><br>  <span class="hljs-attr">v-on:after-enter</span>=<span class="hljs-string">"afterEnter"</span><br>  <span class="hljs-attr">v-on:enter-cancelled</span>=<span class="hljs-string">"enterCancelled"</span><br> <br>  <span class="hljs-attr">v-on:before-leave</span>=<span class="hljs-string">"beforeLeave"</span><br>  <span class="hljs-attr">v-on:leave</span>=<span class="hljs-string">"leave"</span><br>  <span class="hljs-attr">v-on:after-leave</span>=<span class="hljs-string">"afterLeave"</span><br>  <span class="hljs-attr">v-on:leave-cancelled</span>=<span class="hljs-string">"leaveCancelled"</span><br>&gt;</span><br>  <span class="hljs-comment">&lt;!-- ... --&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">transition</span>&gt;</span><br></code></pre></td></tr></table></figure></p></blockquote><figure class="hljs highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs javascript">methods: &#123;<br>  <span class="hljs-attr">beforeEnter</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">el</span>) </span>&#123;<br>    <span class="hljs-comment">// ...</span><br>  &#125;,<br>  <span class="hljs-attr">enter</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">el, done</span>) </span>&#123;<br>  <span class="hljs-comment">// 此回调函数是可选项的设置</span><br>  <span class="hljs-comment">// 与 CSS 结合时使用</span><br>    done()<br>  &#125;,<br>  <span class="hljs-attr">afterEnter</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">el</span>) </span>&#123;<br>    <span class="hljs-comment">// ...</span><br>  &#125;,<br>  <span class="hljs-attr">enterCancelled</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">el</span>) </span>&#123;<br>    <span class="hljs-comment">// ...</span><br>  &#125;<br>  beforeLeave: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">el</span>) </span>&#123;<br>    <span class="hljs-comment">// ...</span><br>  &#125;,<br><br>  <span class="hljs-attr">leave</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">el, done</span>) </span>&#123;<br>     <span class="hljs-comment">// 此回调函数是可选项的设置</span><br>    <span class="hljs-comment">// 与 CSS 结合时使用</span><br>    done()<br>  &#125;,<br>  <span class="hljs-attr">afterLeave</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">el</span>) </span>&#123;<br>    <span class="hljs-comment">// ...</span><br>  &#125;,<br>  <span class="hljs-comment">// leaveCancelled 只用于 v-show 中</span><br>  leaveCancelled: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">el</span>) </span>&#123;<br>    <span class="hljs-comment">// ...</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>这些钩子函数可以结合 CSS transitions/animations 使用，也可以单独使用。</p><p>当只用 JavaScript 过渡的时候，在 enter 和 leave 中必须使用 done 进行回调。否则，它们将被同步调用，过渡会立即完成。</p><p>推荐对于仅使用 JavaScript 过渡的元素添加 v-bind:css=”false”，Vue 会跳过 CSS 的检测。这也可以避免过渡过程中 CSS 的影响</p><h4 id="初始渲染的过渡"><a href="#初始渲染的过渡" class="headerlink" title="初始渲染的过渡"></a>初始渲染的过渡</h4><p>可以通过 appear 特性设置节点在初始渲染的过渡<br><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs undefined">&lt;transition appear&gt;<br>  &lt;!-- ... --&gt;<br>&lt;/transition&gt;<br></code></pre></td></tr></table></figure></p><p>这里默认和进入/离开过渡一样，同样也可以自定义 CSS 类名。<br><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs undefined">&lt;transition<br>  appear<br>  appear-class=&quot;custom-appear-class&quot;<br>  appear-to-class=&quot;custom-appear-to-class&quot; (2.1.8+)<br>  appear-active-class=&quot;custom-appear-active-class&quot;<br>&gt;<br>  &lt;!-- ... --&gt;<br>&lt;/transition&gt;<br></code></pre></td></tr></table></figure></p><p>　自定义 JavaScript 钩子：<br><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs undefined">&lt;transition<br>  appear<br>  v-on:before-appear=&quot;customBeforeAppearHook&quot;<br>  v-on:appear=&quot;customAppearHook&quot;<br>  v-on:after-appear=&quot;customAfterAppearHook&quot;<br>  v-on:appear-cancelled=&quot;customAppearCancelledHook&quot;<br>&gt;<br>  &lt;!-- ... --&gt;<br>&lt;/transition&gt;<br></code></pre></td></tr></table></figure></p></blockquote><h4 id="多个元素的过渡"><a href="#多个元素的过渡" class="headerlink" title="多个元素的过渡"></a>多个元素的过渡</h4><blockquote><p>我们可以设置多个元素的过渡，一般列表与描述：</p><p>需要注意的是当有相同标签名的元素切换时，需要通过 key 特性设置唯一的值来标记以让 Vue 区分它们，否则 Vue 为了效率只会替换相同标签内部的内容。<br><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs undefined">&lt;transition&gt;<br>  &lt;table v-if=&quot;items.length &gt; 0&quot;&gt;<br>    &lt;!-- ... --&gt;<br>  &lt;/table&gt;<br>  &lt;p v-else&gt;抱歉，没有找到您查找的内容。&lt;/p&gt;<br>&lt;/transition&gt;<br></code></pre></td></tr></table></figure></p></blockquote><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs undefined">&lt;transition&gt;<br>  &lt;button v-if=&quot;isEditing&quot; key=&quot;save&quot;&gt;<br>    Save<br>  &lt;/button&gt;<br>  &lt;button v-else key=&quot;edit&quot;&gt;<br>    Edit<br>  &lt;/button&gt;<br>&lt;/transition&gt;<br></code></pre></td></tr></table></figure><blockquote><p>在一些场景中，也可以通过给同一个元素的 key 特性设置不同的状态来代替 v-if 和 v-else，上面的例子可以重写为：<br><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs undefined">&lt;transition&gt;<br>  &lt;button v-bind:key=&quot;isEditing&quot;&gt;<br>    &#123;&#123; isEditing ? &apos;Save&apos; : &apos;Edit&apos; &#125;&#125;<br>  &lt;/button&gt;<br>&lt;/transition&gt;<br></code></pre></td></tr></table></figure></p><p>使用多个 v-if 的多个元素的过渡可以重写为绑定了动态属性的单个元素过渡。例如：<br><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs undefined">&lt;transition&gt;<br>  &lt;button v-if=&quot;docState === &apos;saved&apos;&quot; key=&quot;saved&quot;&gt;<br>    Edit<br>  &lt;/button&gt;<br>  &lt;button v-if=&quot;docState === &apos;edited&apos;&quot; key=&quot;edited&quot;&gt;<br>    Save<br>  &lt;/button&gt;<br>  &lt;button v-if=&quot;docState === &apos;editing&apos;&quot; key=&quot;editing&quot;&gt;<br>    Cancel<br>  &lt;/button&gt;<br>&lt;/transition&gt;<br></code></pre></td></tr></table></figure></p><p>可以重写为:<br><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs undefined">&lt;transition&gt;<br>  &lt;button v-bind:key=&quot;docState&quot;&gt;<br>    &#123;&#123; buttonMessage &#125;&#125;<br>  &lt;/button&gt;<br>&lt;/transition&gt;<br>//-----------------------------<br>computed: &#123;<br>  buttonMessage: function () &#123;<br>    switch (this.docState) &#123;<br>      case &apos;saved&apos;: return &apos;Edit&apos;<br>      case &apos;edited&apos;: return &apos;Save&apos;<br>      case &apos;editing&apos;: return &apos;Cancel&apos;<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Vue-js-过渡-动画&quot;&gt;&lt;a href=&quot;#Vue-js-过渡-动画&quot; class=&quot;headerlink&quot; title=&quot;Vue.js 过渡 / 动画&quot;&gt;&lt;/a&gt;Vue.js 过渡 / 动画&lt;/h2&gt;&lt;h3 id=&quot;过渡&quot;&gt;&lt;a href=&quot;#过渡&quot; cla
      
    
    </summary>
    
      <category term="笔记" scheme="http://www.wanglichao.top/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="前端" scheme="http://www.wanglichao.top/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="JS" scheme="http://www.wanglichao.top/tags/JS/"/>
    
      <category term="vue" scheme="http://www.wanglichao.top/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>Vue学习笔记之自定义指令</title>
    <link href="http://www.wanglichao.top/2018/11/17/Vue-Custom-Directive/"/>
    <id>http://www.wanglichao.top/2018/11/17/Vue-Custom-Directive/</id>
    <published>2018-11-16T21:44:05.000Z</published>
    <updated>2018-11-16T14:50:00.669Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Vue-js-自定义指令"><a href="#Vue-js-自定义指令" class="headerlink" title="Vue.js 自定义指令"></a>Vue.js 自定义指令</h3><blockquote><p>除了默认设置的核心指令(v-model 和v-show ), Vue也允许注册自定义指令;<br>注册一个全局指令v-focus, 该指令的功能是在页面加载的时候,元素获得焦点:<br><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs undefined">&lt;div id=&quot;app&quot;&gt;<br>    &lt;input v-focus&gt;<br>&lt;/div&gt;<br>&lt;script&gt;<br>    Vue.directive(&apos;focus&apos;, &#123;<br>        inserted(el) &#123;<br>            el.focus();<br>        &#125;<br>    &#125;);<br>    new Vue(&#123;<br>        el: &apos;#app&apos;<br>    &#125;)<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure></p><p>也可以在实例使用directives选项来注册局部指令,这样指令只能在这个实例中使用;<br><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs undefined">&lt;div id=&quot;app&quot;&gt;<br>    &lt;input v-focus&gt;<br>&lt;/div&gt;<br>&lt;script&gt;<br>    new Vue(&#123;<br>        el: &apos;#app&apos;,<br>        directives: &#123;<br>            focus: &#123;<br>                inserted(el) &#123;<br>                    el.focus();<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;)<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure></p></blockquote><h3 id="钩子"><a href="#钩子" class="headerlink" title="钩子"></a>钩子</h3><h4 id="钩子函数"><a href="#钩子函数" class="headerlink" title="钩子函数"></a>钩子函数</h4><blockquote><p>指定定义函数提供了几个钩子函数:</p><ul><li>bind: 只调用一次,指令第一次绑定到元素时调用,用这个钩子函数可以定义一个在绑定时执行一次的初始化动作;</li><li>inserted: 被绑定元素插入父节点时调用(父节点存在即可调用,不必存在于document中);</li><li>update: 被绑定元素所在的模板更新时调用,而不论绑定值是否变化,通过比较更新前后的绑定值,可以忽略不必要的模板更新;<br>componentUpdated: 被绑定元素所在模板完成一次更新周期时调用;<br>unbind: 只调用一次,指令与元素解绑时调用;</li></ul></blockquote><h4 id="钩子函数参数"><a href="#钩子函数参数" class="headerlink" title="钩子函数参数"></a>钩子函数参数</h4><blockquote><p>钩子函数的参数有:</p><ul><li>el: 指令所绑定的元素,可以用来直接操作DOM;</li><li>binding: 一个对象,包含以下属性:<ul><li>name:指令名,不包含’v-‘前缀;</li><li>value:指令的绑定值,例如: v-my-directive=”1+1”,value的值是2;</li><li>oldValue: 指令绑定的前一个值,仅在update和componentUpdated钩子中可用,无论值是否改变都可用;</li><li>expression: 绑定值的表达式或变量名,例如:v-my-directive=”1+1”,expression的值是”1+1”;</li><li>arg: 传给指令的参数,例如: v-my-directive:foo, arg的值是foo;</li><li>modifiers: 一个包含修饰符的对象;例如: v-my-directive.foo.bar,修饰符对象modifiers的值是{foo:true,bar:true};</li></ul></li><li>vnode: Vue编译生成的虚拟节点;</li><li>oldVnode: 上一个虚拟节点,仅在update和componentUpdated钩子中可用;<figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs undefined">&lt;div id=&quot;app&quot; v-custom:hello.a.b=&quot;message&quot;&gt;&lt;/div&gt;<br>&lt;script&gt;<br>    Vue.directive(&apos;custom&apos;, &#123;<br>        bind: function (el, binding, vnode) &#123;<br>            let s = JSON.stringify;<br>            el.innerHTML =<br>                &apos;name:&apos; + s(binding.name) + &apos;&lt;br&gt;&apos; +<br>                &apos;value:&apos; + s(binding.value) + &apos;&lt;br&gt;&apos; +<br>                &apos;expression:&apos; + s(binding.expression) + &apos;&lt;br&gt;&apos; +<br>                &apos;argument:&apos; + s(binding.arg) + &apos;&lt;br&gt;&apos; +<br>                &apos;modifiers:&apos; + s(binding.modifiers) + &apos;&lt;br&gt;&apos; +<br>                &apos;vnode keys:&apos; + Object.keys(vnode).join(&apos;,&apos;)<br>        &#125;<br>    &#125;);<br>    new Vue(&#123;<br>        el: &apos;#app&apos;,<br>        data: &#123;<br>            message: &apos;哈哈哈哈哈哈&apos;<br>        &#125;<br>    &#125;);<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure></li></ul></blockquote><p>`</p><ul><li>name:”custom”</li><li>value:”哈哈哈哈哈哈”</li><li>expression:”message”</li><li>argument:”hello”</li><li>modifiers:{“a”:true,”b”:true}</li><li>vnodekeys:tag,data,children,text,elm,ns,context,functionalContext,key,componentOptions,componentInstance,parent,raw,isStatic,isRootInsert,isComment,isCloned,isOnce<br>`<blockquote><p>有时候不需要其他钩子函数,可以简写函数.如下:</p><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs undefined">Vue.directive(&apos;custom&apos;,function(el,binding)&#123;<br>el.style.backgroundColor = binding.value.color;<br>&#125;)<br></code></pre></td></tr></table></figure></blockquote></li></ul><blockquote><p>指令函数可以接受所有合法的JavaScript表达式:<br><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs undefined">&lt;div id=&apos;app&apos;&gt;<br>&lt;div v-custom=&quot;&#123;color: &apos;green&apos;,text: &apos;好好学习&apos;&#125;&quot;&gt;&lt;/div&gt;<br>&lt;/div&gt;<br>&lt;script&gt;<br>Vue.directive(&apos;custom&apos;, function (el, binding)&#123;<br>el.innerHTML = binding.value.text;<br>el.style.backgroundColor = binding.value.color;<br>&#125;);<br>new Vue(&#123;<br>el: &apos;#app&apos;<br>&#125;)<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Vue-js-自定义指令&quot;&gt;&lt;a href=&quot;#Vue-js-自定义指令&quot; class=&quot;headerlink&quot; title=&quot;Vue.js 自定义指令&quot;&gt;&lt;/a&gt;Vue.js 自定义指令&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;除了默认设置的核心指令(v-mod
      
    
    </summary>
    
      <category term="笔记" scheme="http://www.wanglichao.top/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="前端" scheme="http://www.wanglichao.top/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="JS" scheme="http://www.wanglichao.top/tags/JS/"/>
    
      <category term="vue" scheme="http://www.wanglichao.top/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>Vue学习笔记之监听属性</title>
    <link href="http://www.wanglichao.top/2018/11/16/Vue-watch/"/>
    <id>http://www.wanglichao.top/2018/11/16/Vue-watch/</id>
    <published>2018-11-16T00:00:00.000Z</published>
    <updated>2018-11-16T14:50:12.102Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Vue-js监听属性"><a href="#Vue-js监听属性" class="headerlink" title="Vue.js监听属性"></a>Vue.js监听属性</h2><blockquote><p>计数器<br><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs undefined">&lt;div id=&quot;app&quot;&gt;<br>    &lt;p&gt;计数器: &#123;&#123;counter&#125;&#125;&lt;/p&gt;<br>    &lt;button @click=&quot;counter++&quot;&gt;点我&lt;/button&gt;<br>&lt;/div&gt;<br>&lt;script&gt;<br>    const vm = new Vue(&#123;<br>        el: &quot;#app&quot;,<br>        data: &#123;<br>            counter: 1<br>        &#125;<br>    &#125;);<br>    vm.$watch(&apos;counter&apos;, (mewValue, oldValue)=&gt;&#123;<br>        console.log(&apos;计数器值得变化:&apos; + oldValue + &apos;变为&apos; + mewValue);<br>    &#125;)<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure></p><p>千米换算<br><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs undefined">&lt;div id=&quot;app&quot;&gt;<br>    &lt;input type=&quot;text&quot; v-model=&quot;kilometers&quot;&gt;<br>    &lt;input type=&quot;text&quot; v-model=&quot;meters&quot;&gt;<br>    &lt;p id=&quot;info&quot;&gt;&lt;/p&gt;<br>&lt;/div&gt;<br>&lt;script&gt;<br>    const vm = new Vue(&#123;<br>        el: &quot;#app&quot;,<br>        data: &#123;<br>            kilometers: 0,<br>            meters: 0<br>        &#125;,<br>       watch: &#123;<br>            kilometers(value) &#123;<br>                this.kilometers = value;<br>                this.meters = value * 1000<br>            &#125;,<br>           meters(value) &#123;<br>                this.kilometers = value / 1000;<br>                this.meters = value;<br>           &#125;<br>       &#125;<br>    &#125;);<br>    vm.$watch(&apos;kilometers&apos;, (newValue, oldValue) =&gt; &#123;<br>        document.getElementById(&quot;info&quot;).innerHTML = &apos;old ==&gt;&apos; + oldValue + &apos;,new ==&gt;&apos; + newValue;<br>    &#125;)<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure></p></blockquote><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs undefined">&lt;div id=&quot;app&quot;&gt;<br>    &lt;table&gt;<br>        &lt;tr&gt;<br>            &lt;th&gt;序号&lt;/th&gt;<br>            &lt;th&gt;商品名称&lt;/th&gt;<br>            &lt;th&gt;商品价格&lt;/th&gt;<br>            &lt;th&gt;购买数量&lt;/th&gt;<br>            &lt;th&gt;操作&lt;/th&gt;<br>        &lt;/tr&gt;<br>        &lt;tr v-for=&quot;iphone in Ip_Json&quot;&gt;<br>            &lt;td&gt;&#123;&#123; iphone.id &#125;&#125;&lt;/td&gt;<br>            &lt;td&gt;&#123;&#123; iphone.name &#125;&#125;&lt;/td&gt;<br>            &lt;td&gt;&#123;&#123; iphone.price &#125;&#125;&lt;/td&gt;<br>            &lt;td&gt;<br>                &lt;button @click=&quot;iphone.count-=1&quot;&gt;-&lt;/button&gt;<br>                &#123;&#123; iphone.count &#125;&#125;<br>                &lt;button @click=&quot;iphone.count+=1&quot;&gt;+&lt;/button&gt;<br>            &lt;/td&gt;<br>            &lt;td&gt;<br>                &lt;button @click=&quot;iphone.count=0&quot;&gt;移出&lt;/button&gt;<br>            &lt;/td&gt;<br>        &lt;/tr&gt;<br>    &lt;/table&gt;<br>    总价: $&#123;&#123; totalPrice() &#125;&#125;<br>&lt;/div&gt;<br>&lt;script&gt;<br>    const vm = new Vue(&#123;<br>        el: &quot;#app&quot;,<br>        data: &#123;<br>            Ip_Json: [<br>                &#123;<br>                    id: 1,<br>                    name: &apos;iPhone 8&apos;,<br>                    price: 5000,<br>                    count: 1<br>                &#125;,<br>                &#123;<br>                    id: 2,<br>                    name: &apos;iPhone XS&apos;,<br>                    price: 6000,<br>                    count: 1<br>                &#125;,<br>                &#123;<br>                    id: 3,<br>                    name: &apos;iPhone XR&apos;,<br>                    price: 7000,<br>                    count: 1<br>                &#125;<br>            ]<br>        &#125;,<br>        methods: &#123;<br>            totalPrice() &#123;<br>                let totalP = 0;<br>                for (let i = 0, len = this.Ip_Json.length; i &lt; len; i++) &#123;<br>                    totalP += this.Ip_Json[i].price * this.Ip_Json[i].count;<br>                &#125;<br>                return totalP;<br>            &#125;<br>        &#125;<br>    &#125;);<br><br>&lt;/script&gt;<br></code></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Vue-js监听属性&quot;&gt;&lt;a href=&quot;#Vue-js监听属性&quot; class=&quot;headerlink&quot; title=&quot;Vue.js监听属性&quot;&gt;&lt;/a&gt;Vue.js监听属性&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;计数器&lt;br&gt;&lt;figure class=&quot;hlj
      
    
    </summary>
    
      <category term="笔记" scheme="http://www.wanglichao.top/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="前端" scheme="http://www.wanglichao.top/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="JS" scheme="http://www.wanglichao.top/tags/JS/"/>
    
      <category term="vue" scheme="http://www.wanglichao.top/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>Vue学习笔记之组件</title>
    <link href="http://www.wanglichao.top/2018/11/16/Vue-Component/"/>
    <id>http://www.wanglichao.top/2018/11/16/Vue-Component/</id>
    <published>2018-11-16T00:00:00.000Z</published>
    <updated>2018-11-16T14:50:02.244Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Vue-js-组件"><a href="#Vue-js-组件" class="headerlink" title="Vue.js 组件"></a>Vue.js 组件</h2><blockquote><p>组件(Component)是Vue.js最强大的功能之一;<br>组件可以扩展HTML元素,封装可重用的代码;<br>组件系统让我们可以用独立可复用的小组件来构建大型应用,几乎任意类型的应用的界面都可以抽象为一个组件树:</p></blockquote><p><img src="/2018/11/16/Vue-Component/Vue-component/Vue-components-tree.png" alt="ComponentTree"></p><blockquote><p>注册一个全局组件的语法格式:<br><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined">Vue.component(tagName,options)<br></code></pre></td></tr></table></figure></p><p>tagName为组件名,options为配置选项,注册后可以用下面的方式调用U组件:<br><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined">&lt;tagName&gt;&lt;/tagName&gt;<br></code></pre></td></tr></table></figure></p></blockquote><h4 id="全局组件"><a href="#全局组件" class="headerlink" title="全局组件"></a>全局组件</h4><blockquote><p>　所有实例都能用全局组件<br>　实例：注册一个全局组件并调用:<br><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs undefined">&lt;div id=&quot;app&quot;&gt;<br>    &lt;good&gt;&lt;/good&gt;<br>&lt;/div&gt;<br>&lt;script&gt;<br>    // 注册组件<br>    Vue.component(&quot;good&quot;, &#123;<br>        template: &quot;&lt;h1&gt;我是注册的自定义组件!!!&lt;/h1&gt;&quot;<br>    &#125;);<br>    // 根实例<br>    new Vue(&#123;<br>        el: &quot;#app&quot;<br>    &#125;)<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure></p></blockquote><h4 id="局部组件"><a href="#局部组件" class="headerlink" title="局部组件"></a>局部组件</h4><blockquote><p>也可以在实例选项中注册局部组件,这样的最贱只能在这个实例中使用:<br><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs undefined">&lt;div id=&quot;app&quot;&gt;<br>    &lt;good&gt;&lt;/good&gt;<br>&lt;/div&gt;<br>&lt;script&gt;<br>    const Child = &#123;<br>        template: &apos;&lt;h1&gt;我是自定义组件:Child-Component!!!&lt;/h1&gt;&apos;<br>    &#125;;<br>    // 根实例<br>    new Vue(&#123;<br>        el: &quot;#app&quot;,<br>        components: &#123;<br>            &quot;good&quot;: Child<br>        &#125;<br>    &#125;)<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure></p></blockquote><h4 id="Props"><a href="#Props" class="headerlink" title="Props"></a>Props</h4><blockquote><p>prop是父组件用来传递参数的一个自定义属性;<br>父组件的数据需要通过props把数据传给子组件,子组件需要显式地用props选项声明prop;<br><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs undefined">&lt;div id=&quot;app&quot;&gt;<br>    &lt;h1&gt;我是根组件&lt;/h1&gt;<br>    &lt;good message=&quot;Hello, Vue.js!!!&quot;&gt;&lt;/good&gt;<br>&lt;/div&gt;<br>&lt;script&gt;<br>    new Vue(&#123;<br>        el: &quot;#app&quot;,<br>        components: &#123;<br>            &quot;good&quot;: &#123;<br>                props: [&quot;message&quot;],<br>                template: `<br>                    &lt;div&gt;<br>                        &lt;h1&gt;我是自定义组件: goodComponent&lt;/h1&gt;<br>                        &lt;h2&gt;父组件传来的信息: &#123;&#123; message &#125;&#125;&lt;/h2&gt;<br>                    &lt;/div&gt;<br>                `<br>            &#125;<br>        &#125;<br>    &#125;)<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure></p></blockquote><h4 id="动态Prop"><a href="#动态Prop" class="headerlink" title="动态Prop"></a>动态Prop</h4><blockquote><p>类似于用v-bind绑定HTML特性到一个表达式,也可以用v-bind动态绑定props的值到父组件的数据中,每当父组件的数据变化时,该变化也会传导给子组件;<br><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs undefined">&lt;div id=&quot;app&quot;&gt;<br>    &lt;h1&gt;我是根组件&lt;/h1&gt;<br>    &lt;input type=&quot;text&quot; v-model=&quot;parentMessage&quot;&gt;<br>    &lt;hr&gt;<br>    &lt;good :message=&quot;parentMessage&quot;&gt;&lt;/good&gt;<br>&lt;/div&gt;<br>&lt;script&gt;<br>    new Vue(&#123;<br>        el: &quot;#app&quot;,<br>        data: &#123;<br>            parentMessage: &apos;父组件的数据&apos;<br>        &#125;,<br>        components: &#123;<br>            &quot;good&quot;: &#123;<br>                props: [&quot;message&quot;],<br>                template: `<br>                    &lt;div&gt;<br>                        &lt;h1&gt;我是自定义组件: goodComponent&lt;/h1&gt;<br>                        &lt;h2&gt;父组件传来的信息: &#123;&#123; message &#125;&#125;&lt;/h2&gt;<br>                    &lt;/div&gt;<br>                `<br>            &#125;<br>        &#125;<br>    &#125;)<br></code></pre></td></tr></table></figure></p><p>注意: prop 是单向绑定的：当父组件的属性变化时，将传导给子组件，但是子组件的变化不会传递到父组件;</p><h4 id="Prop-验证"><a href="#Prop-验证" class="headerlink" title="Prop 验证"></a>Prop 验证</h4><p>组件可以为props指定验证要求<br>prop 是一个对象而不是字符串数组时,它包含验证要求;</p></blockquote><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs undefined">Vue.copmonent(&apos;example&apos;, &#123;<br>        props: &#123;<br>            // 基础类型检测(null指任意类型都可以)<br>            propA: Number,<br>            // 多种类型<br>            propB: [String, Number],<br>            // 必须且是字符串<br>            propC: &#123;<br>                type: String,<br>                required: true<br>            &#125;,<br>            // 有默认值,数字类型<br>            propD: &#123;<br>                type: Number,<br>                default: 1000<br>            &#125;,<br>            // 数组/对象的默认值应当由一个工厂函数返回<br>            propE: &#123;<br>                type: Object,<br>                default: function() &#123;<br>                    return &#123;message: &apos;hello&apos;&#125;<br>                &#125;<br>            &#125;,<br>            // 自定义函数<br>            propF: &#123;<br>                validator: function(value) &#123;<br>                    return value &gt; 100;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;)<br></code></pre></td></tr></table></figure><p>type 可以是下面原生构造器:</p><blockquote><ul><li>String</li><li>Number</li><li>Boolean</li><li>Function</li><li>Object</li><li>Array<br>type也可以是一个自定义构造器,使用instanceof检测;</li></ul></blockquote><h4 id="自定义事件"><a href="#自定义事件" class="headerlink" title="自定义事件"></a>自定义事件</h4><blockquote><p>父组件是使用props传递数据给子组件,但如果子组件要把数据传递回去,就需要使用自定义事件;<br>我们可以使用v-on绑定自定义事件,每个Vue实例都实现了事件接口(Events interface);</p><ul><li>使用 $on(eventName) 监听事件</li><li>使用 $emit(eventName) 触发事件<br>另外,父组件可以在使用子组件的地方直接用v-on来监听子组件触发的事件;<br>以下示例中子组件已经和它外部完全解耦了,它所做的指示触发一个父组件关心的内部事件;<figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs undefined">&lt;div id=&quot;app&quot;&gt;<br>    &lt;p&gt;&#123;&#123; total &#125;&#125;&lt;/p&gt;<br>    &lt;button-counter v-on:increment=&quot;incrementTotal&quot;&gt;&lt;/button-counter&gt;<br>    &lt;button-counter v-on:increment=&quot;incrementTotal&quot;&gt;&lt;/button-counter&gt;<br>&lt;/div&gt;<br>&lt;script&gt;<br>    Vue.component(&apos;button-counter&apos;, &#123;<br>        data: function() &#123;<br>            return &#123;<br>                counter: 0<br>            &#125;<br>        &#125;,<br>        template: &apos;&lt;button @click=&quot;incrementHandler&quot;&gt;&#123;&#123; counter &#125;&#125;&lt;/button&gt;&apos;,<br>        methods: &#123;<br>            incrementHandler() &#123;<br>                this.counter += 1;<br>                this.$emit(&quot;increment&quot;);<br>            &#125;<br>        &#125;<br>    &#125;);<br>    new Vue(&#123;<br>        el: &quot;#app&quot;,<br>        data: &#123;<br>            total: 0<br>        &#125;,<br>        methods: &#123;<br>            incrementTotal() &#123;<br>                this.total += 1;<br>            &#125;<br>        &#125;<br>    &#125;)<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure></li></ul><p>如果想在某个组件的根元素上监听一个原生事件,可以使用.native修饰v-on;<br><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined">&lt;my-component v-on:click.native=&quot;doSomething&quot;&gt;&lt;/my-component&gt;<br></code></pre></td></tr></table></figure></p><p>父组件给子组件传值的时候,如果想传入一个变量,写法如下:<br><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs undefined">Vue.component(&apos;child&apos;, &#123;<br>props: [&apos;message&apos;],<br>template: &apos;&lt;p&gt;&#123;&#123;message&#125;&#125;&lt;/p&gt;<br>&#125;)<br>new Vue(&#123;<br>el: &apos;#app&apos;,<br>data: &#123;<br>message: &apos;hello, vue.js&apos;<br>&#125;<br>&#125;)<br></code></pre></td></tr></table></figure></p><p>子组件通过$emit触发父组件的方法时,如果需要传递参数,可在方法后面加参数数组:<br>比如 $emit(‘FunctionName’) 需要传递参数时: $emit(‘FunctionName’, [arg1, arg2,…])<br><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs undefined">methods: &#123;<br>incrementHandler: function (v) &#123;<br>if (v == 1) &#123;<br>this.counter -=1;<br>this.$emit(&apos;increment&apos;, [1]);<br>&#125; else &#123;<br>this.counter += 1;<br>this.$emit(&apos;increment&apos;, [2]);<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Vue-js-组件&quot;&gt;&lt;a href=&quot;#Vue-js-组件&quot; class=&quot;headerlink&quot; title=&quot;Vue.js 组件&quot;&gt;&lt;/a&gt;Vue.js 组件&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;组件(Component)是Vue.js最强大的功能之一;
      
    
    </summary>
    
      <category term="笔记" scheme="http://www.wanglichao.top/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="前端" scheme="http://www.wanglichao.top/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="JS" scheme="http://www.wanglichao.top/tags/JS/"/>
    
      <category term="vue" scheme="http://www.wanglichao.top/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>Vue学习笔记之样式绑定</title>
    <link href="http://www.wanglichao.top/2018/11/16/Vue-bind-style/"/>
    <id>http://www.wanglichao.top/2018/11/16/Vue-bind-style/</id>
    <published>2018-11-16T00:00:00.000Z</published>
    <updated>2018-11-16T14:50:10.301Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Vue-js样式绑定"><a href="#Vue-js样式绑定" class="headerlink" title="Vue.js样式绑定"></a>Vue.js样式绑定</h3><h4 id="class"><a href="#class" class="headerlink" title="class"></a>class</h4><blockquote><p>class 与style 时HTML元素的属性,用于设置元素的样式,用v-bind来设置 样式属性;<br>v-bind在处理class和style时,表达式的结果类型除了字符串意外,还可以是对象或数组;</p><h4 id="class属性绑定"><a href="#class属性绑定" class="headerlink" title="class属性绑定"></a>class属性绑定</h4><p>为b-bind:class设置一个对象,动态的切换class;<br><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs undefined">&lt;style&gt;<br>.active &#123;<br>width: 100px;<br>height: 100px;<br>background: green;<br>&#125;<br>&lt;/style&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>&lt;div id=&quot;app&quot;&gt;<br>  &lt;div v-bind:class=&quot;&#123; active: isActive &#125;&quot;&gt;&lt;/div&gt;<br>&lt;/div&gt;<br><br>&lt;script&gt;<br>new Vue(&#123;<br>  el: &apos;#app&apos;,<br>  data: &#123;<br>  // 将 isActive 设置为 true 显示了一个绿色的 div 块，如果设置为 false 则不显示<br>    isActive: true<br>  &#125;<br>&#125;)<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure></p><p>也可以在对象中传入更多属性用来动态切换多个 class 。<br><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined">&lt;div class=&quot;box&quot; :class=&quot;&#123;active: isActive, &apos;text-danger&apos;: hasError&#125;&quot;&gt;&lt;/div&gt;<br></code></pre></td></tr></table></figure></p><p>也可以直接绑定数据里的一个对象：<br><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs undefined">&lt;div id=&quot;app&quot;&gt;<br>    &lt;div class=&quot;box&quot; :class=&quot;objClass&quot;&gt;&lt;/div&gt;<br>&lt;/div&gt;<br>&lt;script&gt;<br>    new Vue(&#123;<br>        el: &quot;#app&quot;,<br>        data: &#123;<br>            objClass: &#123;<br>                isActive: true,<br>                hasError: true<br>            &#125;<br>        &#125;<br>    &#125;)<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure></p><p>也可以在这里绑定返回对象的计算属性,这是一个常用且强大的模式<br><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs undefined">&lt;div id=&quot;app&quot;&gt;<br>    &lt;div class=&quot;box&quot; :class=&quot;classObj&quot;&gt;&lt;/div&gt;<br>&lt;/div&gt;<br>&lt;script&gt;<br>    new Vue(&#123;<br>        el: &quot;#app&quot;,<br>        data: &#123;<br>            isActive: true,<br>            error: &#123;<br>                value: false,<br>                type: &apos;fatal&apos;<br>            &#125;<br>        &#125;,<br>        computed: &#123;<br>            classObj() &#123;<br>                return &#123;<br>                    base: true,<br>                    active: this.isActive &amp;&amp; !this.error.value,<br>                    &apos;text-danger&apos;: this.error.value &amp;&amp; this.error.type === &apos;fatal&apos;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;)<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure></p><p>传一个数组给v-bind:class<br><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs undefined">&lt;div id=&quot;app&quot;&gt;<br>    &lt;div class=&quot;box&quot; :class=&quot;[activeClass, errorClass]&quot;&gt;&lt;/div&gt;<br>&lt;/div&gt;<br>&lt;script&gt;<br>    new Vue(&#123;<br>        el: &quot;#app&quot;,<br>        data: &#123;<br>            activeClass: &apos;active&apos;,<br>            errorClass: &apos;text-danger&apos;<br>        &#125;<br>    &#125;)<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure></p><p>errorClass 始终存在，isActive 为 true 时添加 activeClass 类：<br><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined">&lt;div v-bind:class=&quot;[errorClass ,isActive ? activeClass : &apos;&apos;]&quot;&gt;&lt;/div&gt;<br></code></pre></td></tr></table></figure></p></blockquote><h4 id="style-内联样式"><a href="#style-内联样式" class="headerlink" title="style(内联样式)"></a>style(内联样式)</h4><blockquote><p>可以在 v-bind:style 直接设置样式：<br><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs undefined">&lt;div id=&apos;app&apos;&gt;<br>&lt;div :style=&quot;&#123;color:activeColor, fontSize: fontSize + &apos;px&apos;&#125;&quot;&gt;哈哈&lt;/div&gt;<br>&lt;/div&gt;<br></code></pre></td></tr></table></figure></p></blockquote><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined">&lt;div style=&quot;color:green; font-size: 30px;&quot;&gt;&lt;/div&gt;<br></code></pre></td></tr></table></figure><blockquote><p>可以直接绑定到一个样式对象,让模板更清晰;<br><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined">&lt;div v-bind:style=&quot;styleObject&quot;&gt;&lt;/div&gt;<br></code></pre></td></tr></table></figure></p><p>v-bing:style 可以使用数组将多个样式对象应用到一个元素上;<br><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined">&lt;div v-bind:style=&quot;[baseStyle, overridingStyle]&quot;&gt;&lt;/div&gt;<br></code></pre></td></tr></table></figure></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Vue-js样式绑定&quot;&gt;&lt;a href=&quot;#Vue-js样式绑定&quot; class=&quot;headerlink&quot; title=&quot;Vue.js样式绑定&quot;&gt;&lt;/a&gt;Vue.js样式绑定&lt;/h3&gt;&lt;h4 id=&quot;class&quot;&gt;&lt;a href=&quot;#class&quot; class=&quot;he
      
    
    </summary>
    
      <category term="笔记" scheme="http://www.wanglichao.top/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="前端" scheme="http://www.wanglichao.top/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="JS" scheme="http://www.wanglichao.top/tags/JS/"/>
    
      <category term="vue" scheme="http://www.wanglichao.top/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>Vue学习笔记之事件处理器</title>
    <link href="http://www.wanglichao.top/2018/11/16/Vue-Events/"/>
    <id>http://www.wanglichao.top/2018/11/16/Vue-Events/</id>
    <published>2018-11-16T00:00:00.000Z</published>
    <updated>2018-11-16T14:50:08.687Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Vue-js-事件处理器"><a href="#Vue-js-事件处理器" class="headerlink" title="Vue.js 事件处理器"></a>Vue.js 事件处理器</h2><blockquote><p>事件监听可以使用v-on指令:<br><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs undefined">&lt;div id=&quot;app&quot;&gt;<br>  &lt;button v-on:click=&quot;counter += 1&quot;&gt;增加 1&lt;/button&gt;<br>  &lt;p&gt;这个按钮被点击了 &#123;&#123; counter &#125;&#125; 次。&lt;/p&gt;<br>&lt;/div&gt;<br> <br>&lt;script&gt;<br>new Vue(&#123;<br>  el: &apos;#app&apos;,<br>  data: &#123;<br>    counter: 0<br>  &#125;<br>&#125;)<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure></p><p>通常情况下,需要使用一个方法来调用JavaScript方法;<br>v-on 可以接收一个定义的方法来调用;<br><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs undefined">&lt;div id=&quot;app&quot;&gt;<br>    &lt;button @click=&quot;greet&quot;&gt;Greet&lt;/button&gt;<br>&lt;/div&gt;<br>&lt;script&gt;<br>    const app = new Vue(&#123;<br>        el: &apos;#app&apos;,<br>        data: &#123;<br>            name: &apos;Vue.js&apos;<br>        &#125;,<br>        methods: &#123;<br>            greet(event) &#123;<br>                console.log(&apos;Hello &apos; + this.name);<br>                if (event) &#123;<br>                    console.log(&quot;Event:&quot; + event.target.tagName);<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;);<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure></p><p>可以用内联JavaScript语句;<br><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs undefined">&lt;div id=&quot;app&quot;&gt;<br>  &lt;button v-on:click=&quot;say(&apos;hi&apos;)&quot;&gt;Say hi&lt;/button&gt;<br>  &lt;button v-on:click=&quot;say(&apos;what&apos;)&quot;&gt;Say what&lt;/button&gt;<br>&lt;/div&gt;<br>&lt;script&gt;<br>new Vue(&#123;<br>  el: &apos;#app&apos;,<br>  methods: &#123;<br>    say(message) &#123;<br>      consle.log(message)<br>    &#125;<br>  &#125;<br>&#125;)<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure></p></blockquote><h3 id="事件修饰符"><a href="#事件修饰符" class="headerlink" title="事件修饰符"></a>事件修饰符</h3><blockquote><p>Vue.js为v-on提供了事件修饰符来处理DOM事件细节;<br>如:event.preventDefault()组织默认行为,或event.stopPropagation() 阻止冒泡;</p><ul><li>.stop</li><li>.prevent</li><li>.capture</li><li>.self</li><li>.once<figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs undefined">&lt;a v-on:click.stop=&quot;doSomething&quot;&gt; 阻止单击事件冒泡<br>&lt;form v-on:submit.prevent=&quot;onSubmit&quot;&gt; 提交事件不再重载页面<br>&lt;a v-on:click.stop.prevent=&quot;doSomething&quot;&gt; 串联修饰符<br>&lt;form v-on:submit.prevent&gt; 只有修饰符<br>&lt;div v-on:click.capture=&quot;doSomething&quot;&gt; 添加事件侦听器使用事件捕获模式<br>&lt;div v-on:click.self=&quot;doSomething&quot;&gt; 只当事件在该元素本身触发时触发回调(而不是子元素)<br>&lt;a v-on:click.once=&quot;doSomething&quot;&gt; click事件只能点击一次<br></code></pre></td></tr></table></figure></li></ul></blockquote><h4 id="按键修饰符"><a href="#按键修饰符" class="headerlink" title="按键修饰符"></a>按键修饰符</h4><blockquote><p>Vue 允许为v-on 在监听键盘事件时添加按键修好符;<br><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined">&lt;input v-on:keyup.13=&quot;submit&quot;&gt; 只有可以Code是13时调用submit;<br></code></pre></td></tr></table></figure></p><p>Vue为最常用的按键提供了别名;<br><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined">&lt;input v-on:keyup.enter=&quot;submit&quot;&gt;<br></code></pre></td></tr></table></figure></p><p>全部按键的别名</p><ul><li>.enter</li><li>.tab</li><li>.delete (捕获”删除键”和”退格键”)</li><li>.esc</li><li>.space</li><li>.up</li><li>.down</li><li>.left</li><li>.right</li><li>.ctrl</li><li>.alt</li><li>.shift</li><li>.meta<br>实例:<figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs undefined">&lt;input @keyup.alt.67=&quot;doSomething&quot;&gt; Alt + C<br>&lt;div @click.ctrl=&quot;doSomething&quot;&gt;&lt;/div&gt; Ctrl+ Click<br></code></pre></td></tr></table></figure></li></ul></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Vue-js-事件处理器&quot;&gt;&lt;a href=&quot;#Vue-js-事件处理器&quot; class=&quot;headerlink&quot; title=&quot;Vue.js 事件处理器&quot;&gt;&lt;/a&gt;Vue.js 事件处理器&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;事件监听可以使用v-on指令:&lt;b
      
    
    </summary>
    
      <category term="笔记" scheme="http://www.wanglichao.top/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="前端" scheme="http://www.wanglichao.top/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="JS" scheme="http://www.wanglichao.top/tags/JS/"/>
    
      <category term="vue" scheme="http://www.wanglichao.top/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>Vue学习笔记之表单</title>
    <link href="http://www.wanglichao.top/2018/11/16/Vue-Form/"/>
    <id>http://www.wanglichao.top/2018/11/16/Vue-Form/</id>
    <published>2018-11-16T00:00:00.000Z</published>
    <updated>2018-11-16T14:50:03.674Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Vue-js-表单"><a href="#Vue-js-表单" class="headerlink" title="Vue.js 表单"></a>Vue.js 表单</h2><blockquote><p>可以用v-model指令在表单空间元素上创建双向数据绑定;</p></blockquote><p><img src="/2018/11/16/Vue-Form/Vue-form/viewmodel.png" alt="viewmodel"></p><blockquote><p>v-model 会根据控件类型自动选取正确的方法来更新元素:<br><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs undefined">&lt;div id=&quot;app&quot;&gt;<br>  &lt;p&gt;input 元素：&lt;/p&gt;<br>  &lt;input v-model=&quot;message&quot; placeholder=&quot;请输入……&quot;&gt;<br>  &lt;p&gt;消息是: &#123;&#123; message &#125;&#125;&lt;/p&gt;<br>  &lt;p&gt;textarea 元素：&lt;/p&gt;<br>  &lt;p style=&quot;white-space: pre&quot;&gt;&#123;&#123; message2 &#125;&#125;&lt;/p&gt;<br>  &lt;textarea v-model=&quot;message2&quot; placeholder=&quot;多行文本输入……&quot;&gt;&lt;/textarea&gt;<br>&lt;/div&gt;<br> <br>&lt;script&gt;<br>new Vue(&#123;<br>  el: &apos;#app&apos;,<br>  data: &#123;<br>    message: &apos;心有远方&apos;,<br>    message2: &apos;www.wanglichao.top&apos;<br>  &#125;<br>&#125;)<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure></p></blockquote><h6 id="复选按钮"><a href="#复选按钮" class="headerlink" title="复选按钮"></a>复选按钮</h6><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs undefined">&lt;div id=&quot;app&quot;&gt;<br>    &lt;p&gt;单个复选框&lt;/p&gt;<br>    &lt;input type=&quot;checkbox&quot; id=&quot;checkbox&quot; v-model=&quot;checked&quot;&gt;<br>    &lt;label for=&quot;checkbox&quot;&gt;&#123;&#123; checked &#125;&#125;&lt;/label&gt;<br>    &lt;p&gt;多个复选框&lt;/p&gt;<br>    &lt;input type=&quot;checkbox&quot; id=&quot;baidu&quot; value=&quot;baidu&quot; v-model=&quot;checkedNames&quot;&gt;<br>    &lt;label for=&quot;baidu&quot;&gt;baidu&lt;/label&gt;<br>    &lt;input type=&quot;checkbox&quot; id=&quot;google&quot; value=&quot;google&quot; v-model=&quot;checkedNames&quot;&gt;<br>    &lt;label for=&quot;google&quot;&gt;google&lt;/label&gt;<br>    &lt;input type=&quot;checkbox&quot; id=&quot;facebook&quot; value=&quot;facebook&quot; v-model=&quot;checkedNames&quot;&gt;<br>    &lt;label for=&quot;facebook&quot;&gt;facebook&lt;/label&gt;<br>    &lt;hr&gt;<br>    &lt;span&gt;选择的值是: &#123;&#123; checkedNames &#125;&#125;&lt;/span&gt;<br>&lt;/div&gt;<br>&lt;script&gt;<br>    new Vue(&#123;<br>        el: &quot;#app&quot;,<br>        data: &#123;<br>            checked: false,<br>            checkedNames: []<br>        &#125;<br>    &#125;)<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h6 id="单选按钮"><a href="#单选按钮" class="headerlink" title="单选按钮"></a>单选按钮</h6><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs undefined">&lt;div id=&quot;app&quot;&gt;<br>    &lt;input type=&quot;radio&quot; id=&quot;google&quot; value=&quot;google&quot; v-model=&quot;picked&quot;&gt;<br>    &lt;label for=&quot;google&quot;&gt;Google&lt;/label&gt;<br>    &lt;input type=&quot;radio&quot; id=&quot;baidu&quot; value=&quot;baidu&quot; v-model=&quot;picked&quot;&gt;<br>    &lt;label for=&quot;baidu&quot;&gt;Baidu&lt;/label&gt;<br>    &lt;input type=&quot;radio&quot; id=&quot;taobao&quot; value=&quot;taobao&quot; v-model=&quot;picked&quot;&gt;<br>    &lt;label for=&quot;taobao&quot;&gt;Taobao&lt;/label&gt;<br>&lt;/div&gt;<br>&lt;script&gt;<br>    new Vue(&#123;<br>        el: &quot;#app&quot;,<br>        data: &#123;<br>            picked: &quot;google&quot;<br>        &#125;<br>    &#125;)<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><blockquote><p>select 列表<br><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs undefined">&lt;div id=&quot;app&quot;&gt;<br>    &lt;select name=&quot;site&quot; v-model=&quot;selected&quot;&gt;<br>        &lt;option value=&quot;&quot;&gt;选择一个网站&lt;/option&gt;<br>        &lt;option value=&quot;www.wanglichao.top&quot;&gt;我的博客&lt;/option&gt;<br>        &lt;option value=&quot;www.google.com&quot;&gt;谷歌&lt;/option&gt;<br>        &lt;option value=&quot;www.baidu.com&quot;&gt;百度&lt;/option&gt;<br>    &lt;/select&gt;<br>    &lt;div&gt;<br>        &lt;h1&gt;&#123;&#123; selected &#125;&#125;&lt;/h1&gt;<br>    &lt;/div&gt;<br>&lt;/div&gt;<br>&lt;script&gt;<br>    new Vue(&#123;<br>        el: &quot;#app&quot;,<br>        data: &#123;<br>            selected: &quot;&quot;<br>        &#125;<br>    &#125;)<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure></p></blockquote><h4 id="修饰符"><a href="#修饰符" class="headerlink" title="修饰符"></a>修饰符</h4><h6 id="lazy"><a href="#lazy" class="headerlink" title=".lazy"></a>.lazy</h6><blockquote><p>在默认情况下,v-model在input事件中同步输入框的值与数据,但可以添加一个修饰符lazy,从而转变为在change事件中同步;<br><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs undefined">在&quot;change&quot;而不是&quot;input&quot;事件中更新<br>&lt;input v-model.lazy=&quot;message&quot;&gt;<br></code></pre></td></tr></table></figure></p></blockquote><h6 id="number"><a href="#number" class="headerlink" title=".number"></a>.number</h6><blockquote><p>如果想自动将用户的输入值转为Number类型,可以添加一个修饰符number给v-model来处理输入值,如果原值的转换结果为NaN,则返回原值:<br><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined">&lt;input v-model.number=&quot;age&quot; type=&quot;number&quot;&gt;<br></code></pre></td></tr></table></figure></p><p>这通常很有用,因为在type=”number”时HTML中输入的值也总是会返回字符串类型;</p><h6 id="trim"><a href="#trim" class="headerlink" title=".trim"></a>.trim</h6><p>如果要自动过滤用户输入的首尾空格,可以添加trim修饰符懂啊v-model上过滤输入;<br><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined">&lt;input v-model.trim=&quot;message&quot;&gt;<br></code></pre></td></tr></table></figure></p></blockquote><h6 id="全选与取消全选"><a href="#全选与取消全选" class="headerlink" title="全选与取消全选"></a>全选与取消全选</h6><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs undefined">&lt;div id=&quot;app&quot;&gt;<br>    &lt;p&gt;全选&lt;/p&gt;<br>    &lt;input type=&quot;checkbox&quot; id=&quot;checkbox&quot; v-model=&quot;checked&quot; @change=&quot;changeAllChecked()&quot;&gt;<br>    &lt;label for=&quot;checkbox&quot;&gt;&#123;&#123; checked &#125;&#125;&lt;/label&gt;<br>    &lt;p&gt;多个复选框&lt;/p&gt;<br>    &lt;input type=&quot;checkbox&quot; id=&quot;google&quot; value=&quot;Google&quot; v-model=&quot;checkedNames&quot;&gt;<br>    &lt;label for=&quot;google&quot;&gt;Google&lt;/label&gt;<br>    &lt;input type=&quot;checkbox&quot; id=&quot;baidu&quot; value=&quot;Baidu&quot; v-model=&quot;checkedNames&quot;&gt;<br>    &lt;label for=&quot;baidu&quot;&gt;Baidu&lt;/label&gt;<br>    &lt;input type=&quot;checkbox&quot; id=&quot;taobao&quot; value=&quot;Taobao&quot; v-model=&quot;checkedNames&quot;&gt;<br>    &lt;label for=&quot;taobao&quot;&gt;Taobao&lt;/label&gt;<br>    &lt;hr&gt;<br>    &lt;span&gt;选择得知为: &#123;&#123; checkedNames &#125;&#125;&lt;/span&gt;<br>&lt;/div&gt;<br>&lt;script&gt;<br>    new Vue(&#123;<br>        el: &quot;#app&quot;,<br>        data: &#123;<br>            checked: false,<br>            checkedNames: [],<br>            checkedArray: [&quot;谷歌&quot;, &quot;百度&quot;, &quot;淘宝&quot;]<br>        &#125;,<br>        methods: &#123;<br>            changeAllChecked() &#123;<br>                if (this.checked) &#123;<br>                    this.checkedNames = this.checkedArray;<br>                &#125; else &#123;<br>                    this.checkedNames = [];<br>                &#125;<br>            &#125;<br>        &#125;,<br>        watch: &#123;<br>            &quot;checkedNames&quot;() &#123;<br>                if (this.checkedNames.length === this.checkedArray.length) &#123;<br>                    this.checked = true;<br>                &#125; else &#123;<br>                    this.checked = false;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;)<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Vue-js-表单&quot;&gt;&lt;a href=&quot;#Vue-js-表单&quot; class=&quot;headerlink&quot; title=&quot;Vue.js 表单&quot;&gt;&lt;/a&gt;Vue.js 表单&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;可以用v-model指令在表单空间元素上创建双向数据绑定;
      
    
    </summary>
    
      <category term="笔记" scheme="http://www.wanglichao.top/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="前端" scheme="http://www.wanglichao.top/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="JS" scheme="http://www.wanglichao.top/tags/JS/"/>
    
      <category term="vue" scheme="http://www.wanglichao.top/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>Vue学习笔记之计算属性</title>
    <link href="http://www.wanglichao.top/2018/11/15/Vue-Computed/"/>
    <id>http://www.wanglichao.top/2018/11/15/Vue-Computed/</id>
    <published>2018-11-15T00:00:00.000Z</published>
    <updated>2018-11-14T22:46:56.149Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Vue-js计算属性"><a href="#Vue-js计算属性" class="headerlink" title="Vue.js计算属性"></a>Vue.js计算属性</h2><blockquote><p>计算属性关键词: computed<br>计算属性在处理一些复杂逻辑的时候是非常有用的<br>如: 反转字符串实例的计算属性方式实现:<br><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs undefined">&lt;div id=&quot;app&quot;&gt;<br>    &lt;p&gt;反转之前的字符串:----&gt;&#123;&#123;message&#125;&#125;&lt;/p&gt;<br>    &lt;p&gt;反转之后的字符串:----&gt;&#123;&#123;reverseMessage&#125;&#125;&lt;/p&gt;<br>&lt;/div&gt;<br>&lt;script&gt;<br>    new Vue(&#123;<br>        el: &quot;#app&quot;,<br>        data: &#123;<br>            message: &quot;Hello, World!!!&quot;<br>        &#125;,<br>        computed: &#123;<br>            reverseMessage() &#123;<br>                return this.message.split(&quot;&quot;).reverse().join(&apos;&apos;);<br>            &#125;<br>        &#125;<br>    &#125;)<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure></p><p>实例中声明了一个计算属性 reversedMessage ;<br>提供的函数将用作属性 vm.reversedMessage 的 getter ;<br>vm.reversedMessage 依赖于 vm.message;<br>在 vm.message 发生改变时，vm.reversedMessage 也会更新;</p></blockquote><h5 id="computed-对比-methods"><a href="#computed-对比-methods" class="headerlink" title="computed 对比 methods"></a>computed 对比 methods</h5><blockquote><p>我们可以使用 methods 来替代 computed，效果上两个都是一样的，&gt; 但是 computed 是基于它的依赖缓存，只有相关依赖发生改变时才会重新取值。<br>而使用 methods ，在重新渲染的时候，函数总会重新调用执行。<br>可以说使用 computed 性能会更好，但是如果不希望缓存，可以使用 methods 属性。<br><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs undefined">methods: &#123;<br>  reversedMessage2: function () &#123;<br>    return this.message.split(&apos;&apos;).reverse().join(&apos;&apos;)<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure></p></blockquote><h3 id="computed-setter"><a href="#computed-setter" class="headerlink" title="computed setter"></a>computed setter</h3><blockquote><p>computed 属性默认只有getter,不过在需要时也可以提供一个setter;<br>在运行vm.site=”xxx”;的时候,setter会被调用,vm.name和vm.url也会被对应更新;<br><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs undefined">&lt;div id=&quot;app&quot;&gt;<br>    &lt;p&gt;&#123;&#123; site &#125;&#125;&lt;/p&gt;<br>&lt;/div&gt;<br>&lt;script&gt;<br>    const vm = new Vue(&#123;<br>        el: &quot;#app&quot;,<br>        data: &#123;<br>            name: &quot;心有远方&quot;,<br>            url: &quot;http://www.wanglichao.top&quot;<br>        &#125;,<br>        computed: &#123;<br>            site: &#123;<br>                get() &#123;<br>                    return this.name + &quot; &quot; + this.url;<br>                &#125;,<br>                set(newValue) &#123;<br>                    let names = newValue.split(&quot; &quot;);<br>                    this.name = names[0];<br>                    this.url = names[names.length - 1]<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;);<br>    vm.site = &quot;勇往直前 www.wanglichao.top&quot;;<br>    document.write(&apos;name: &apos; + vm.name);<br>    document.write(&apos;&lt;br&gt;&apos;);<br>    document.write(&apos;url: &apos; + vm.url);<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Vue-js计算属性&quot;&gt;&lt;a href=&quot;#Vue-js计算属性&quot; class=&quot;headerlink&quot; title=&quot;Vue.js计算属性&quot;&gt;&lt;/a&gt;Vue.js计算属性&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;计算属性关键词: computed&lt;br&gt;计算属性
      
    
    </summary>
    
      <category term="笔记" scheme="http://www.wanglichao.top/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="前端" scheme="http://www.wanglichao.top/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="JS" scheme="http://www.wanglichao.top/tags/JS/"/>
    
      <category term="vue" scheme="http://www.wanglichao.top/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>Vue学习笔记之循环语句</title>
    <link href="http://www.wanglichao.top/2018/11/15/Vue-for/"/>
    <id>http://www.wanglichao.top/2018/11/15/Vue-for/</id>
    <published>2018-11-15T00:00:00.000Z</published>
    <updated>2018-11-14T22:02:29.325Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Vue-js-循环语句"><a href="#Vue-js-循环语句" class="headerlink" title="Vue.js 循环语句"></a>Vue.js 循环语句</h2><blockquote><p>循环使用v-for指令;<br>v-for指令需要以 list in lists 形式的特殊语法,lists是源数据数组并且list时数组元素迭代的别名;<br>v-for可以绑定数据到数组来渲染一个列表;<br><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs undefined">&lt;div id=&quot;app&quot;&gt;<br>    &lt;ul&gt;<br>        &lt;li v-for=&quot;(arr, index) in array&quot; :key=&quot;index&quot;&gt;&#123;&#123;arr&#125;&#125;&lt;/li&gt;<br>    &lt;/ul&gt;<br>&lt;/div&gt;<br>&lt;script&gt;<br>    new Vue(&#123;<br>        el: &quot;#app&quot;,<br>        data: &#123;<br>            array: [&apos;google&apos;, &apos;baidu&apos;, &apos;taobao&apos;, &apos;facebook&apos;]<br>        &#125;<br>    &#125;)<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure></p><p>也可以在模板中使用<br><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs undefined">&lt;div id=&quot;app&quot;&gt;<br>    &lt;ul&gt;<br>        &lt;template v-for=&quot;arr in array&quot;&gt;<br>            &lt;li&gt;&#123;&#123;arr&#125;&#125;&lt;/li&gt;<br>        &lt;/template&gt;<br>    &lt;/ul&gt;<br>&lt;/div&gt;<br>&lt;script&gt;<br>    new Vue(&#123;<br>        el: &quot;#app&quot;,<br>        data: &#123;<br>            array: [&apos;google&apos;, &apos;baidu&apos;, &apos;taobao&apos;, &apos;facebook&apos;]<br>        &#125;<br>    &#125;)<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure></p></blockquote><h4 id="v-for-迭代对象"><a href="#v-for-迭代对象" class="headerlink" title="v-for 迭代对象"></a>v-for 迭代对象</h4><blockquote><p>v-for 可以通过一个对象的属性来迭代数据:<br>第一个参数是value,第二个参数(可选)是key,第三个参数(可选)是index;<br><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs undefined">&lt;div id=&quot;app&quot;&gt;<br>    &lt;ul&gt;<br>        &lt;template v-for=&quot;(value,key,index) in object&quot;&gt;<br>            &lt;li&gt;&#123;&#123;index&#125;&#125;:&#123;&#123;key&#125;&#125;: &#123;&#123;value&#125;&#125;&lt;/li&gt;<br>        &lt;/template&gt;<br>    &lt;/ul&gt;<br>&lt;/div&gt;<br>&lt;script&gt;<br>    new Vue(&#123;<br>        el: &quot;#app&quot;,<br>        data: &#123;<br>            object: &#123;<br>                site1:&apos;google&apos;,<br>                site2:&apos;baidu&apos;,<br>                site3:&apos;taobao&apos;,<br>                site4:&apos;facebook&apos;<br>            &#125;<br>        &#125;<br>    &#125;)<br></code></pre></td></tr></table></figure></p><p>v-for可以直接迭代整数<br><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs undefined">&lt;div id=&quot;app&quot;&gt;<br>  &lt;ul&gt;<br>    &lt;li v-for=&quot;n in 10&quot;&gt;<br>     &#123;&#123; n &#125;&#125;<br>    &lt;/li&gt;<br>  &lt;/ul&gt;<br>&lt;/div&gt;<br></code></pre></td></tr></table></figure></p><p>嵌套迭代对象<br><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs undefined">&lt;div id=&quot;app&quot;&gt;<br>    &lt;ul&gt;<br>        &lt;li v-for=&quot;(value,key,index) in object&quot;&gt;<br>            &lt;p v-if=&quot;typeof value != &apos;object&apos;&quot;&gt;&#123;&#123;value&#125;&#125; ===&gt; &#123;&#123;key&#125;&#125;&lt;/p&gt;<br>            &lt;p v-else&gt;嵌套对象:&#123;&#123;value&#125;&#125;&lt;/p&gt;<br>            &lt;ul v-if=&quot;typeof value == &apos;object&apos;&quot;&gt;<br>                &lt;li v-for=&quot;(val, key, index) in value&quot;&gt;<br>                    &#123;&#123;val&#125;&#125; ===&gt; &#123;&#123;key&#125;&#125;<br>                &lt;/li&gt;<br>            &lt;/ul&gt;<br>        &lt;/li&gt;<br>    &lt;/ul&gt;<br>&lt;/div&gt;<br>&lt;script&gt;<br>    new Vue(&#123;<br>        el: &quot;#app&quot;,<br>        data: &#123;<br>            object: &#123;<br>                site1: &apos;谷歌&apos;,<br>                site2: &apos;百度&apos;,<br>                site3: &apos;淘宝&apos;,<br>                object2: &#123;<br>                    name1: &quot;京东&quot;,<br>                    name2: &quot;天猫&quot;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;)<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure></p><p>乘法表<br><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs undefined">&lt;div id=&quot;app&quot;&gt;<br>    &lt;div v-for=&quot;n in 9&quot;&gt;<br>        &lt;b v-for=&quot;m in n&quot;&gt;<br>            &#123;&#123;m&#125;&#125;*&#123;&#123;n&#125;&#125;=&#123;&#123;m*n&#125;&#125;<br>        &lt;/b&gt;<br>    &lt;/div&gt;<br>&lt;/div&gt;<br>&lt;script&gt;<br>    new Vue(&#123;<br>        el: &quot;#app&quot;<br>    &#125;)<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Vue-js-循环语句&quot;&gt;&lt;a href=&quot;#Vue-js-循环语句&quot; class=&quot;headerlink&quot; title=&quot;Vue.js 循环语句&quot;&gt;&lt;/a&gt;Vue.js 循环语句&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;循环使用v-for指令;&lt;br&gt;v-for
      
    
    </summary>
    
      <category term="笔记" scheme="http://www.wanglichao.top/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="前端" scheme="http://www.wanglichao.top/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="JS" scheme="http://www.wanglichao.top/tags/JS/"/>
    
      <category term="vue" scheme="http://www.wanglichao.top/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>Vue学习笔记之条件语句</title>
    <link href="http://www.wanglichao.top/2018/11/15/Vue-if/"/>
    <id>http://www.wanglichao.top/2018/11/15/Vue-if/</id>
    <published>2018-11-15T00:00:00.000Z</published>
    <updated>2018-11-14T19:15:55.503Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Vue-js条件语句"><a href="#Vue-js条件语句" class="headerlink" title="Vue.js条件语句"></a>Vue.js条件语句</h2><h3 id="条件判断"><a href="#条件判断" class="headerlink" title="条件判断:"></a>条件判断:</h3><h4 id="v-if"><a href="#v-if" class="headerlink" title="v-if"></a>v-if</h4><blockquote><p>条件判断使用v-if指令:<br><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs undefined">&lt;div id=&quot;app&quot;&gt;<br>    &lt;button @click=&quot;isShow=!isShow&quot;&gt;显示或隐藏&lt;/button&gt;<br>    &lt;p v-if=&quot;isShow&quot;&gt;能看到我吗?&lt;/p&gt;<br>&lt;/div&gt;<br>&lt;script&gt;<br>    new Vue(&#123;<br>        el: &quot;#app&quot;,<br>        data: &#123;<br>            isShow: true<br>        &#125;<br>    &#125;)<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure></p></blockquote><h4 id="v-else"><a href="#v-else" class="headerlink" title="v-else"></a>v-else</h4><blockquote><p>可以用v-else指令给v-if添加一个else块:<br><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs undefined">&lt;div id=&quot;app&quot;&gt;<br>&lt;div v-if=&quot;Math.random() &gt; 0.5&quot;&gt;<br>  哈哈<br>&lt;/div&gt;<br>&lt;div v-else&gt;<br>  呵呵<br>&lt;/div&gt;<br>&lt;/div&gt;<br>&lt;script&gt;<br>new Vue(&#123;<br>  el: &apos;#app&apos;<br>&#125;)<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure></p></blockquote><h4 id="v-else-if"><a href="#v-else-if" class="headerlink" title="v-else-if"></a>v-else-if</h4><blockquote><p>v-else-if 在2.1.0中新增,用作v-if的else-if块,可以链式使用;<br><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs undefined">&lt;div id=&quot;app&quot;&gt;<br>    &lt;div v-if=&quot;type === &apos;A&apos;&quot;&gt;<br>      A<br>    &lt;/div&gt;<br>    &lt;div v-else-if=&quot;type === &apos;B&apos;&quot;&gt;<br>      B<br>    &lt;/div&gt;<br>    &lt;div v-else-if=&quot;type === &apos;C&apos;&quot;&gt;<br>      C<br>    &lt;/div&gt;<br>    &lt;div v-else&gt;<br>      Not A/B/C<br>    &lt;/div&gt;<br>&lt;/div&gt;<br></code></pre></td></tr></table></figure></p><p>v-else v-else-if v-else 必须跟在v-if或者v-else之后; </p></blockquote><h4 id="v-show"><a href="#v-show" class="headerlink" title="v-show"></a>v-show</h4><p>根据true或者false来展示或者隐藏元素;<br><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined">&lt;div v-show=&quot;true&quot;&gt;&lt;/div&gt;<br></code></pre></td></tr></table></figure></p><h4 id="v-if-和-v-show-的区别"><a href="#v-if-和-v-show-的区别" class="headerlink" title="v-if 和 v-show 的区别"></a>v-if 和 v-show 的区别</h4><blockquote><p>在切换 v-if 块时，Vue.js 有一个局部编译/卸载过程，因为 v-if 之中的模板也可能包括数据绑定或子组件。v-if 是真实的条件渲染，因为它会确保条件块在切换当中合适地销毁与重建条件块内的事件监听器和子组件。</p><p>v-if 也是惰性的：如果在初始渲染时条件为假，则什么也不做——在条件第一次变为真时才开始局部编译（编译会被缓存起来）。</p><p>相比之下，v-show 简单得多——元素始终被编译并保留，只是简单地基于 CSS 切换。</p><p>一般来说，v-if 有更高的切换消耗而 v-show 有更高的初始渲染消耗。因此，如果需要频繁切换 v-show 较好，如果在运行时条件不大可能改变 v-if 较好。</p><p>v-if 是动态添加，当值为 false 时，是完全移除该元素，即 dom 树中不存在该元素。</p><p>v-show 仅是隐藏 / 显示，值为 false 时，该元素依旧存在于 dom 树中。若其原有样式设置了 display: none 则会导致其无法正常显示。</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Vue-js条件语句&quot;&gt;&lt;a href=&quot;#Vue-js条件语句&quot; class=&quot;headerlink&quot; title=&quot;Vue.js条件语句&quot;&gt;&lt;/a&gt;Vue.js条件语句&lt;/h2&gt;&lt;h3 id=&quot;条件判断&quot;&gt;&lt;a href=&quot;#条件判断&quot; class=&quot;head
      
    
    </summary>
    
      <category term="笔记" scheme="http://www.wanglichao.top/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="前端" scheme="http://www.wanglichao.top/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="JS" scheme="http://www.wanglichao.top/tags/JS/"/>
    
      <category term="vue" scheme="http://www.wanglichao.top/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>React学习笔记之ajax</title>
    <link href="http://www.wanglichao.top/2018/11/15/React-ajax/"/>
    <id>http://www.wanglichao.top/2018/11/15/React-ajax/</id>
    <published>2018-11-14T21:28:01.000Z</published>
    <updated>2018-11-13T22:07:53.489Z</updated>
    
    <content type="html"><![CDATA[<h2 id="React-AJAX"><a href="#React-AJAX" class="headerlink" title="React AJAX"></a>React AJAX</h2><blockquote><p>React组件的数据可以通过componentDidMount方法中的ajax来获取,当从服务端获取数据时可以将数据存储在state中,再用this.setState()方法重新渲染UI.<br>当使用异步加载数据的时候,在组件卸载前使用componentWillUnmount来取消未完成的请求;<br>以下实例演示了获取 Github 用户最新 gist 共享描述:</p></blockquote><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs undefined">class UserGist extends React.Component &#123;<br>        constructor(props) &#123;<br>            super(props);<br>            this.state = &#123;<br>                username : &apos;&apos;,<br>                lastGistUrl: &apos;&apos;<br>            &#125;;<br>        &#125;<br><br>        componentDidMount() &#123;<br>            this.serverRequest = $.get(this.props.source, res =&gt; &#123;<br>                let lastGist = res[0];<br>                this.setState(&#123;<br>                    username: lastGist.owner.login,<br>                    lastGistUrl: lastGist.html_url<br>                &#125;);<br>            &#125;);<br>        &#125;<br><br>        componentWillUnmount() &#123;<br>            this.serverRequest.abort();<br>        &#125;<br><br>        render() &#123;<br>            return (<br>                &lt;div&gt;<br>                    &#123;this.state.username&#125; 用户最新的Gist共享地址:<br>                    &lt;a href=&#123;this.state.lastGistUrl&#125;&gt;&#123;this.state.lastGistUrl&#125;&lt;/a&gt;<br>                &lt;/div&gt;<br>            )<br>        &#125;<br>    &#125;<br><br>    ReactDOM.render(<br>        &lt;UserGist source=&quot;https://api.github.com/users/octocat/gists&quot; /&gt;,<br>        document.getElementById(&quot;example&quot;)<br>    )<br></code></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;React-AJAX&quot;&gt;&lt;a href=&quot;#React-AJAX&quot; class=&quot;headerlink&quot; title=&quot;React AJAX&quot;&gt;&lt;/a&gt;React AJAX&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;React组件的数据可以通过componentDi
      
    
    </summary>
    
      <category term="笔记" scheme="http://www.wanglichao.top/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="前端" scheme="http://www.wanglichao.top/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="react" scheme="http://www.wanglichao.top/tags/react/"/>
    
      <category term="JS" scheme="http://www.wanglichao.top/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>React学习笔记之表单与事件</title>
    <link href="http://www.wanglichao.top/2018/11/15/React-form-and-events/"/>
    <id>http://www.wanglichao.top/2018/11/15/React-form-and-events/</id>
    <published>2018-11-14T21:28:01.000Z</published>
    <updated>2018-11-13T22:07:47.291Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Reactor-表单与事件"><a href="#Reactor-表单与事件" class="headerlink" title="Reactor 表单与事件"></a>Reactor 表单与事件</h2><blockquote><p>HTML表单元素与Reactor中的其它DOM元素有所不同,因为表单元素生来就保留一些内部状态;<br>在HTML当中,像input,textarea和select这类表单元素会维持自身状态,并根据用户输入进行更新,但在React中,可变的状态通常保存在组件的状态属性中,并且只能用setState()方法进行更新;</p></blockquote><h5 id="实例1"><a href="#实例1" class="headerlink" title="实例1"></a>实例1</h5><blockquote><p>在实例中设置了输入框input的值value={this.state.data},在输入框的值发生变化时我们可以更新state,我们可以使用onChange事件来监听input的变化,并修改state;<br><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs undefined">class Content extends React.Component &#123;<br>        render() &#123;<br>            return (<br>                &lt;div&gt;<br>                    &lt;input type=&quot;text&quot;<br>                           value=&#123;this.props.myDataProp&#125;<br>                           onChange=&#123;this.props.updateStateProp&#125;<br>                    /&gt;<br>                    &lt;h4&gt;&#123;this.props.myDataProp&#125;&lt;/h4&gt;<br>                &lt;/div&gt;<br>            )<br>        &#125;<br>    &#125;<br>    class HelloMessage extends React.Component &#123;<br>        constructor(props) &#123;<br>            super(props);<br>            this.state = &#123;value: &quot;Hello, React!&quot;&#125;;<br>        &#125;<br>        handleChange(e) &#123;<br>            this.setState(&#123;value: e.target.value&#125;);<br>        &#125;<br>        render() &#123;<br>            let value = this.state.value;<br>            return (<br>                &lt;div&gt;<br>                    &lt;Content myDataProp=&#123;value&#125;<br>                             updateStateProp=&#123;(e)=&gt;this.handleChange(e)&#125;<br>                    /&gt;<br>                &lt;/div&gt;<br>            )<br>        &#125;<br>    &#125;<br>    ReactDOM.render(<br>        &lt;HelloMessage /&gt;,<br>        document.getElementById(&apos;example&apos;)<br>    )<br></code></pre></td></tr></table></figure></p><p>上面的代码将渲染出一个值为Hello React! 的input元素,并通过onChange事件影响更新用户输入的值</p></blockquote><h5 id="实例2"><a href="#实例2" class="headerlink" title="实例2"></a>实例2</h5><blockquote><p>在以下实例中,将演示如何在子组件上使用表单,onChange方法将触发state的更新,并将更新的值传递到子组件的输入框的value上来重新渲染界面;<br>需要在父组件通过创建事件句柄(handleChange),并作为prop(updateStateProp)传递到子组件上;<br><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs undefined">// 创建一个Content组件:<br>    class Content extends React.Component &#123;<br>        render() &#123;<br>            return (<br>                &lt;div&gt;<br>                    &lt;input type=&quot;text&quot;<br>                           value=&#123;this.props.myDataProp&#125;<br>                           onChange=&#123;this.props.updateStateProp&#125;<br>                    /&gt;<br>                    &lt;h4&gt;&#123;this.props.myDataProp&#125;&lt;/h4&gt;<br>                &lt;/div&gt;<br>            )<br>        &#125;<br>    &#125;<br><br>    // 创建HelloMessage组件<br>    class HelloMessage extends React.Component &#123;<br>        constructor(props) &#123;<br>            super(props);<br>            this.state = &#123;<br>                value: &apos;Hello, React&apos;<br>            &#125;;<br>        &#125;<br><br>        handleChange(e) &#123;<br>            this.setState(&#123;<br>                value: e.target.value<br>            &#125;)<br>        &#125;<br><br>        render() &#123;<br>            let value = this.state.value;<br>            return (<br>                &lt;div&gt;<br>                    &lt;Content myDataProp=&#123;value&#125;<br>                             updateStateProp=&#123;e=&gt;this.handleChange(e)&#125;<br>                    /&gt;<br>                &lt;/div&gt;<br>            )<br>        &#125;<br>    &#125;<br><br>    ReactDOM.render(<br>        &lt;HelloMessage/&gt;,<br>        document.getElementById(&quot;example&quot;)<br>    )<br></code></pre></td></tr></table></figure></p></blockquote><h5 id="Select下拉菜单"><a href="#Select下拉菜单" class="headerlink" title="Select下拉菜单"></a>Select下拉菜单</h5><blockquote><p>在React中,不使用selected属性,而是在根select标签上用value属性来表示选中项;<br><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs undefined">class LikeForm extends React.Component &#123;<br>        constructor(props) &#123;<br>            super(props);<br>            this.state = &#123;<br>                value: &apos;coconut&apos;<br>            &#125;<br>        &#125;<br>        handleChange(e) &#123;<br>            this.setState(&#123;<br>                value: e.target.value<br>            &#125;)<br>        &#125;<br>        handleSubmit(e) &#123;<br>            alert(&quot;你最喜欢的网站是&quot; + this.state.value);<br>            e.preventDefault();<br>        &#125;<br>        render() &#123;<br>            return (<br>                &lt;form onSubmit=&#123;(e)=&gt;this.handleSubmit(e)&#125;&gt;<br>                    &lt;label&gt;<br>                        &lt;select value=&#123;this.state.value&#125;<br>                                onChange=&#123;e=&gt;this.handleChange(e)&#125;<br>                        &gt;<br>                            &lt;option value=&quot;谷歌&quot;&gt;Google&lt;/option&gt;<br>                            &lt;option value=&quot;脸书&quot;&gt;Facebook&lt;/option&gt;<br>                            &lt;option value=&quot;淘宝&quot;&gt;Taobao&lt;/option&gt;<br>                            &lt;option value=&quot;草榴&quot;&gt;Caoliu&lt;/option&gt;<br>                        &lt;/select&gt;<br>                    &lt;/label&gt;<br>                    &lt;input type=&quot;submit&quot; value=&apos;提交&apos;/&gt;<br>                &lt;/form&gt;<br>            )<br>        &#125;<br>    &#125;<br>    ReactDOM.render(<br>        &lt;LikeForm /&gt;,<br>        document.getElementById(&apos;example&apos;)<br>    )<br></code></pre></td></tr></table></figure></p></blockquote><h5 id="多个表单"><a href="#多个表单" class="headerlink" title="多个表单"></a>多个表单</h5><blockquote><p>当需要处理多个input元素时,可以通过给每个元素添加一个name属性,来让处理函数根据event.target.name的值来选择做什么:<br><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs undefined">class Reservation extends React.Component &#123;<br>        constructor(props) &#123;<br>            super(props);<br>            this.state = &#123;<br>                isGoing: true,<br>                numberOfGuests: 10<br>            &#125;;<br>        &#125;<br>        handleInputChange(e) &#123;<br>            const target = e.target;<br>            const value = target.type === &apos;checkbox&apos; ? target.checked : target.value;<br>            const name = target.name;<br>            this.setState(&#123;<br>                [name]: value<br>            &#125;)<br>        &#125;<br>        render() &#123;<br>            return (<br>                &lt;form&gt;<br>                    &lt;label&gt;<br>                        是或否:<br>                        &lt;input type=&quot;checkbox&quot;<br>                               name=&quot;isGoing&quot;<br>                               checked=&#123;this.state.isGoing&#125;<br>                               onChange=&#123;e=&gt;this.handleInputChange(e)&#125;<br>                        /&gt;<br>                    &lt;/label&gt;<br>                    &lt;br/&gt;<br>                    &lt;label&gt;<br>                        统计数:<br>                        &lt;input type=&quot;number&quot;<br>                               name=&quot;numberOfGuests&quot;<br>                               value=&#123;this.state.numberOfGuests&#125;<br>                               onChange=&#123;e=&gt;this.handleInputChange(e)&#125;<br>                        /&gt;<br>                    &lt;/label&gt;<br>                &lt;/form&gt;<br>            )<br>        &#125;<br>    &#125;<br>    ReactDOM.render(<br>        &lt;Reservation /&gt;,<br>        document.getElementById(&quot;example&quot;)<br>    )<br></code></pre></td></tr></table></figure></p></blockquote><h5 id="React事件"><a href="#React事件" class="headerlink" title="React事件"></a>React事件</h5><blockquote><p>通过onClick事件来修改数据:<br><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs undefined">class Message extends React.Component &#123;<br>        constructor(props) &#123;<br>            super(props);<br>            this.state = &#123;<br>                value: &quot;Hello, React!&quot;<br>            &#125;;<br>        &#125;<br>        handleChangeValue() &#123;<br>            this.setState(&#123;<br>                value: &quot;Hello, Vue!&quot;<br>            &#125;)<br>        &#125;<br>        render() &#123;<br>            return (<br>                &lt;div&gt;<br>                    &lt;button onClick=&#123;()=&gt;this.handleChangeValue()&#125;&gt;点我&lt;/button&gt;<br>                    &lt;h4&gt;&#123;this.state.value&#125;&lt;/h4&gt;<br>                &lt;/div&gt;<br>            )<br>        &#125;<br>    &#125;<br>    ReactDOM.render(<br>        &lt;Message /&gt;,<br>        document.getElementById(&quot;example&quot;)<br>    )<br></code></pre></td></tr></table></figure></p><p>当需要从子组件中更新父组件的state时,需要在父组件通过创建事件句柄(handleChange),并作为prop(updateStateProp)传递到子组件上;<br><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs undefined">class Content extends React.Component &#123;<br>        render() &#123;<br>            return(<br>                &lt;div&gt;<br>                    &lt;button onClick=&#123;this.props.updateStateProp&#125;&gt;button&lt;/button&gt;<br>                    &lt;h4&gt;&#123;this.props.myDataProp&#125;&lt;/h4&gt;<br>                &lt;/div&gt;<br>            )<br>        &#125;<br>    &#125;<br>    class Message extends React.Component &#123;<br>        constructor(props) &#123;<br>            super(props);<br>            this.state = &#123;<br>                value: &quot;Hello React!!!&quot;<br>            &#125;;<br>        &#125;<br>        handleChange() &#123;<br>            this.setState(&#123;<br>                value: &quot;My App is Success!!!&quot;<br>            &#125;)<br>        &#125;<br>        render() &#123;<br>            return (<br>                &lt;div&gt;<br>                    &lt;Content updateStateProp=&#123;()=&gt;this.handleChange()&#125;<br>                             myDataProp=&#123;this.state.value&#125;<br>                    /&gt;<br>                &lt;/div&gt;<br>            )<br>        &#125;<br>    &#125;<br>    ReactDOM.render(<br>        &lt;Message /&gt;,<br>        document.getElementById(&quot;example&quot;)<br>    )<br></code></pre></td></tr></table></figure></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Reactor-表单与事件&quot;&gt;&lt;a href=&quot;#Reactor-表单与事件&quot; class=&quot;headerlink&quot; title=&quot;Reactor 表单与事件&quot;&gt;&lt;/a&gt;Reactor 表单与事件&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;HTML表单元素与Reac
      
    
    </summary>
    
      <category term="笔记" scheme="http://www.wanglichao.top/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="前端" scheme="http://www.wanglichao.top/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="react" scheme="http://www.wanglichao.top/tags/react/"/>
    
      <category term="JS" scheme="http://www.wanglichao.top/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>React学习笔记之渲染</title>
    <link href="http://www.wanglichao.top/2018/11/14/React-refs/"/>
    <id>http://www.wanglichao.top/2018/11/14/React-refs/</id>
    <published>2018-11-14T06:10:05.000Z</published>
    <updated>2018-11-13T22:18:10.734Z</updated>
    
    <content type="html"><![CDATA[<h2 id="React-Refs"><a href="#React-Refs" class="headerlink" title="React Refs"></a>React Refs</h2><blockquote><p>React支持一种非常特殊的属性 ref , 可以用来绑定到render()输出的任何组件上;<br>这个特殊的属性允许引用render()返回的相应的支撑实例(backing instance),这样就可以确保在任何时间都能拿到正确的实例;</p><h5 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h5><p>绑定一个ref属性到render的返回值上:<br><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined">&lt;input ref=&quot;myInput&quot;/&gt;<br></code></pre></td></tr></table></figure></p></blockquote><p>在其他代码中,通过this.refs获取支撑实例:<br><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs undefined">let input = this.refs.myInput;<br>let inputValue = input.value;<br></code></pre></td></tr></table></figure></p><h4 id="完整实例"><a href="#完整实例" class="headerlink" title="完整实例"></a>完整实例</h4><blockquote><p>可以通过使用this来获取当前React组件,或使用ref来获取组件的引用;<br><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs undefined">class MyComponent extends React.Component &#123;<br>  handleClick() &#123;<br>    // 使用原生的DOM API获取焦点<br>    this.refs.myInput.focus();<br>  &#125;<br>  render() &#123;<br>    // 当组件插入到DOM后，ref属性添加一个组件的引用于到this.refs<br>    return (<br>      &lt;div&gt;<br>        &lt;input type=&quot;text&quot; ref=&quot;myInput&quot; /&gt;<br>        &lt;input<br>          type=&quot;button&quot;<br>          value=&quot;点我输入框获取焦点&quot;<br>          onClick=&#123;this.handleClick.bind(this)&#125;<br>        /&gt;<br>      &lt;/div&gt;<br>    );<br>  &#125;<br>&#125;<br> <br>ReactDOM.render(<br>  &lt;MyComponent /&gt;,<br>  document.getElementById(&apos;example&apos;)<br>);<br></code></pre></td></tr></table></figure></p><p>也可以使用getDOMNode()方法获取DOM元素;</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;React-Refs&quot;&gt;&lt;a href=&quot;#React-Refs&quot; class=&quot;headerlink&quot; title=&quot;React Refs&quot;&gt;&lt;/a&gt;React Refs&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;React支持一种非常特殊的属性 ref , 可以
      
    
    </summary>
    
      <category term="笔记" scheme="http://www.wanglichao.top/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="前端" scheme="http://www.wanglichao.top/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="react" scheme="http://www.wanglichao.top/tags/react/"/>
    
      <category term="JS" scheme="http://www.wanglichao.top/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>React学习笔记之组件API</title>
    <link href="http://www.wanglichao.top/2018/11/14/React-component-API/"/>
    <id>http://www.wanglichao.top/2018/11/14/React-component-API/</id>
    <published>2018-11-13T21:28:01.000Z</published>
    <updated>2018-11-13T22:08:05.749Z</updated>
    
    <content type="html"><![CDATA[<h2 id="React-组件-API"><a href="#React-组件-API" class="headerlink" title="React 组件 API"></a>React 组件 API</h2><blockquote><p>React 组件API的7个方法:</p><ul><li>设置状态:setState</li><li>替换状态: replaceState</li><li>设置属性: setProps</li><li>替换属性: replaceState</li><li>强制更新: forceUpdate</li><li>获取DOM节点: findDOMNode</li><li>判断组件挂在状态： isMounted</li></ul></blockquote><h3 id="设置状态-setState"><a href="#设置状态-setState" class="headerlink" title="设置状态: setState"></a>设置状态: setState</h3><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined">setState(object nextState[, function callback])<br></code></pre></td></tr></table></figure><h5 id="参数说明"><a href="#参数说明" class="headerlink" title="参数说明"></a>参数说明</h5><pre><code>&gt; * nextState 将要设置新的状态,该状态会和当前的state合并;&gt; * callback 可选参数,回调函数,该函数会在setState设置成功,且组件重新渲染后调用;</code></pre><blockquote><p>合并nextState和当前state,并重新渲染组件,setState是React事件处理函数中和请求回调函数中触发UI更新的主要方法;</p></blockquote><h5 id="关于setState"><a href="#关于setState" class="headerlink" title="关于setState"></a>关于setState</h5><blockquote><p>不能在组件内部通过this.state修改状态,因为该状态会在调用setState()后被替换;<br>setState()并不会立即改变this.state,而是创建一个即将处理的state;<br>setState()并不一定是同步的,为了提升性能React会批量执行state和DOM渲染;<br>setState()总是会触发一次组件重绘,除非在shouldComponentUpdate()中实现了一些条件渲染逻辑;<br>点击计数器:<br><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs undefined">class Counter extends React.Component &#123;<br>        constructor(props) &#123;<br>            super(props);<br>            this.state = &#123;<br>                clickCount: 0<br>            &#125;;<br>            this.handleClick = this.handleClick.bind(this);<br>        &#125;<br><br>        handleClick() &#123;<br>            this.setState(function (state) &#123;<br>                return &#123;clickCount: state.clickCount + 1&#125;;<br>            &#125;)<br>        &#125;<br><br>        render() &#123;<br>            return(<br>                &lt;div&gt;<br>                    &lt;button onClick=&#123;this.handleClick&#125;&gt;点我&lt;/button&gt;<br>                    &lt;h3&gt;点击次数为&#123;this.state.clickCount&#125;&lt;/h3&gt;<br>                &lt;/div&gt;<br>            )<br>        &#125;<br>    &#125;<br><br>    ReactDOM.render(<br>        &lt;Counter /&gt;,<br>        document.getElementById(&quot;example&quot;)<br>    )<br></code></pre></td></tr></table></figure></p></blockquote><h3 id="替换状态-replaceState"><a href="#替换状态-replaceState" class="headerlink" title="替换状态: replaceState"></a>替换状态: replaceState</h3><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined">replaceState(object nextState[, function callback])<br></code></pre></td></tr></table></figure><blockquote><p>replaceState() 方法与setState() 类似,但是方法只会保留nextState中的状态,原state不在nextState中的状态都会被删除</p></blockquote><h3 id="设置属性-setProps"><a href="#设置属性-setProps" class="headerlink" title="设置属性: setProps"></a>设置属性: setProps</h3><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined">setProps(object nextProps[, function callback])<br></code></pre></td></tr></table></figure><pre><code>&gt; * nextProps 将要设置的新属性,该状态会和当前的props合并;&gt; * callback 可选参数,回调函数,该函数会在setProps设置成功,且组件重新渲染后调用;</code></pre><blockquote><p>props相当于组件的数据流,它总是会从父组件向下传递至所有的子组件中.<br>当和一个外部的javascript应用集成时,我们可能需要向组件传递数据或者通知React.render() 组件需要重新渲染,可以使用setProps();<br>更新组件,我可以在节点上再次调用React.render(),也可以通过setProps() 方法改变组件属性,触发组件重新渲染;</p></blockquote><h3 id="替换属性-replaceProps"><a href="#替换属性-replaceProps" class="headerlink" title="替换属性: replaceProps"></a>替换属性: replaceProps</h3><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined">replaceProps(object nextProps[, function callback])<br></code></pre></td></tr></table></figure><blockquote><p>replaceProps()方法与setProps()方法类似,但是它会删除原有的props;</p></blockquote><h3 id="强制更新-forceUpdate"><a href="#强制更新-forceUpdate" class="headerlink" title="强制更新: forceUpdate"></a>强制更新: forceUpdate</h3><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined">forceUpdate([function callback])<br></code></pre></td></tr></table></figure><blockquote><ul><li>callback 可选参数,回调函数,该函数会在组件render()方法调用后调用;<br>forceUpdate()方法会使组件调用自身的render() 方法重新渲染组件,组件的子组件也会调用自己的render() ,但是,组件重新渲染时,依然会读取this.props和this.state,如果状态没有改变,那么React只会更新DOM;<br>forceUpdate()方式适用于this.props和this.state之外的组件重绘(如:修改了this.state后), 通过该方法通知React需要调用render();<br>一般来说,应该尽量避免使用forceUpdate(),而仅从this.props和this.state中读取状态并由React触发render调用;</li></ul></blockquote><h3 id="获取DOM节点-findDOMNode"><a href="#获取DOM节点-findDOMNode" class="headerlink" title="获取DOM节点: findDOMNode"></a>获取DOM节点: findDOMNode</h3><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined">DOMElement findDOMNode<br></code></pre></td></tr></table></figure><blockquote><ul><li>返回值: DOM元素DOMElement<br>如果组件已经挂载到DOM中,该方法返回对应的本地浏览器DOM元素<br>当render()返回null或false时,this.findDOMNode()也会返回null.<br>从DOM中读取值得时候，该方法很有用，如：获取表单字段的值和做一些DOM操作；</li></ul></blockquote><h3 id="判断组件挂载状态：-isMounted"><a href="#判断组件挂载状态：-isMounted" class="headerlink" title="判断组件挂载状态： isMounted"></a>判断组件挂载状态： isMounted</h3><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined">bool isMounted()<br></code></pre></td></tr></table></figure><blockquote><ul><li>返回值： true或false，表示组件是否已经挂载到DOM中<br>isMounted()方法用于判断组件是否已挂在到DOM中<br>可以使用该方法保证来setState（）和forceUpdate（）在异步场景下的调用不会出错。</li></ul></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;React-组件-API&quot;&gt;&lt;a href=&quot;#React-组件-API&quot; class=&quot;headerlink&quot; title=&quot;React 组件 API&quot;&gt;&lt;/a&gt;React 组件 API&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;React 组件API的7个方法:
      
    
    </summary>
    
      <category term="笔记" scheme="http://www.wanglichao.top/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="前端" scheme="http://www.wanglichao.top/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="react" scheme="http://www.wanglichao.top/tags/react/"/>
    
      <category term="JS" scheme="http://www.wanglichao.top/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>React学习笔记之生命周期</title>
    <link href="http://www.wanglichao.top/2018/11/14/React-life/"/>
    <id>http://www.wanglichao.top/2018/11/14/React-life/</id>
    <published>2018-11-13T21:28:01.000Z</published>
    <updated>2018-11-13T22:08:00.075Z</updated>
    
    <content type="html"><![CDATA[<h2 id="React-生命周期"><a href="#React-生命周期" class="headerlink" title="React 生命周期"></a>React 生命周期</h2><blockquote><p>组件的生命周期可分成三个状态:</p><ul><li>Mounting: 已插入真实DOM;</li><li>Updating: 正在被重新渲染;</li><li>Unmounting: 已移出真实DOM;</li></ul></blockquote><p><strong>生命周期的方法有</strong>：</p><blockquote><ul><li>componentWillComponent 在渲染前调用,在客户端也在服务端;</li><li>componentDidMount 在第一次渲染后调用,只在客户端.  之后已经生成了对应的DOM结构,可以通过this.getDOMNode()来进行访问,如果你想和其他javascript框架一起使用,可以在这个方法中调用setTimeout,setInterval或者发送ajax请求等操作(防止异步操作阻塞UI);</li><li>componentWillReceiveProps 在组件接收到一个新的prop(更新后)时被调用,这个方法在初始化render时不会被调用;</li><li>shouldComponentUpdate 返回一个布尔值,在组件接收到新的props或者state时被调用,在初始化时或者使用forceUpdate时不被调用;<br>componentWillUpdate 在组件接收到新的props或者state,但还没有render时调用,在初始化时不会被调用;</li><li>componentDidUpdate 在组件完成更新后立即调用,在初始化时不会被调用;</li><li>componentWillUnmount 在组件从DOM中移除之前立刻被调用;<figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs undefined">componentWillMount() &#123;<br>            console.log(&apos;Component Will Mount&apos;);<br>        &#125;<br>        componentDidMount() &#123;<br>            console.log(&apos;Component Did Mount&apos;);<br>        &#125;<br>        componentWillReceiveProps(newProps) &#123;<br>            console.log(&apos;Component Will Receive Props&apos;);<br>        &#125;<br>        shouldComponentUpdate(newProps, newState) &#123;<br>            console.log(&apos;Should Component Update&apos;);<br>            return true;<br>        &#125;<br>        componentWillUpdate(nextProps, nextState) &#123;<br>            console.log(&apos;Component Will Update&apos;);<br>        &#125;<br>        componentDidUpdate(prevProps, prevState) &#123;<br>            console.log(&apos;Component Did Update&apos;);<br>        &#125;<br>        componentWillUnmount() &#123;<br>            console.log(&apos;Component Will Unmount&apos;);<br>        &#125;<br></code></pre></td></tr></table></figure></li></ul></blockquote><p><img src="/2018/11/14/React-life/React-life1.png" alt="生命周期1"><br><img src="/2018/11/14/React-life/React-life2.jpg" alt="生命周期2"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;React-生命周期&quot;&gt;&lt;a href=&quot;#React-生命周期&quot; class=&quot;headerlink&quot; title=&quot;React 生命周期&quot;&gt;&lt;/a&gt;React 生命周期&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;组件的生命周期可分成三个状态:&lt;/p&gt;
&lt;ul&gt;

      
    
    </summary>
    
      <category term="笔记" scheme="http://www.wanglichao.top/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="前端" scheme="http://www.wanglichao.top/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="react" scheme="http://www.wanglichao.top/tags/react/"/>
    
      <category term="JS" scheme="http://www.wanglichao.top/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>React学习笔记之列表和keys</title>
    <link href="http://www.wanglichao.top/2018/11/14/React-list/"/>
    <id>http://www.wanglichao.top/2018/11/14/React-list/</id>
    <published>2018-11-13T21:28:01.000Z</published>
    <updated>2018-11-13T22:08:14.160Z</updated>
    
    <content type="html"><![CDATA[<h2 id="React-列表-和-keys"><a href="#React-列表-和-keys" class="headerlink" title="React 列表 和 keys"></a>React 列表 和 keys</h2><blockquote><p>我们可以使用javascript的map()方法来创建数字列表:<br><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs undefined">const numbers = [1, 2, 3, 4, 5];<br>    const listItem = numbers.map(number =&gt;<br>        &lt;li&gt;&#123;number&#125;&lt;/li&gt;<br>    );<br>    ReactDOM.render(<br>        &lt;ul&gt;<br>            &#123;listItem&#125;<br>        &lt;/ul&gt;,<br>        document.getElementById(&quot;example&quot;)<br>    )<br></code></pre></td></tr></table></figure></p><p>我们可以将以上实例重构成一个组件,组件接收数组参数,每个列表元素分配一个key,不然会出现警告<br><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs undefined">let numbers = [1, 2, 3, 4, 5];<br><br>   function NumberList(props) &#123;<br>       const numbers = props.numbers;<br>       const listItems = numbers.map(number =&gt;<br>           &lt;li key=&#123;number&#125;&gt;&#123;number&#125;&lt;/li&gt;<br>       );<br>       return (<br>           &lt;ul&gt;<br>               &#123;listItems&#125;<br>           &lt;/ul&gt;<br>       )<br>   &#125;<br><br>   ReactDOM.render(<br>       &lt;NumberList numbers=&#123;numbers&#125;/&gt;,<br>       document.getElementById(&quot;example&quot;)<br>   )<br></code></pre></td></tr></table></figure></p></blockquote><h3 id="Keys"><a href="#Keys" class="headerlink" title="Keys"></a>Keys</h3><blockquote><p>keys可以在DOM中的某些元素被增加或删除的时候,帮助React识别哪些元素发生了变化,因此应当给数组中每一个元素赋予一个确定的标识.<br><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined">&lt;li key=&#123;number.toString()&#125;&gt;<br></code></pre></td></tr></table></figure></p><p>一个元素的key最好是这个元素在列表中拥有的独一无二的字符串,通常,我们使用来自数据的ID作为元素的key;<br><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs undefined">const todoItems = todos.map(todo =&gt;<br>&lt;li key=&#123;todo.id&#125;&gt;<br>&#123;todo.text&#125;<br>&lt;/li&gt;<br>);<br></code></pre></td></tr></table></figure></p><p>当元素没有确定的id时,可以使用它的序列号索引index作为它的key<br> <figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs undefined">const todoItems = todos.map((todo, index) =&gt;<br>&lt;li key=&#123;index&#125;&gt;<br>&#123;todo.text&#125;<br>&lt;/li&gt;<br>);<br></code></pre></td></tr></table></figure></p><p>如果列表可以重新排序,我们不建议使用索引来进行排序,因为这回导致渲染变得很慢</p></blockquote><h3 id="用Keys-提取组件"><a href="#用Keys-提取组件" class="headerlink" title="用Keys 提取组件"></a>用Keys 提取组件</h3><blockquote><p>元素的key只有在它和它的兄弟节点对比时才有意义;<br>比方说,如果需要提取一个ListItem组件,你应该把key保存在数组中的<listitem>元素上,而不是放在ListItem组件中的li元素上<br><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs undefined">function ListItem(props) &#123;<br>  // 这里不需要指定key<br>  return &lt;li&gt;&#123;props.value&#125;&lt;/li&gt;;<br>&#125;<br>function NumberList(props) &#123;<br>  const numbers = props.numbers;<br>  const listItems = numbers.map((number) =&gt;<br>    // 建议将key指定在这里,数组的上下文里;<br>    &lt;ListItem key=&#123;number.toString()&#125;<br>              value=&#123;number&#125; /&gt;<br>  );<br>  return (<br>    &lt;ul&gt;<br>      &#123;listItems&#125;<br>    &lt;/ul&gt;<br>  );<br>&#125;<br>const numbers = [1, 2, 3, 4, 5];<br>ReactDOM.render(<br>  &lt;NumberList numbers=&#123;numbers&#125; /&gt;,<br>  document.getElementById(&apos;example&apos;)<br>);<br></code></pre></td></tr></table></figure></listitem></p><p>在map()方法的内部调用元素时,最好随时记得为每一个元素加上独一无二的key;</p></blockquote><h3 id="元素的key在它与它的兄弟元素之间应该是唯一"><a href="#元素的key在它与它的兄弟元素之间应该是唯一" class="headerlink" title="元素的key在它与它的兄弟元素之间应该是唯一"></a>元素的key在它与它的兄弟元素之间应该是唯一</h3><blockquote><p>数组元素中使用的key在其兄弟之间应该是独一无二的,然而,它们不需要是全局唯一的,当生成两个不同的数组时,可以使用相同的key;<br>key会作为给React的提示,但不会传递给你的组件.如果你的组件中需要使用和key相同的值,请将其作为属性传递;<br><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs undefined">const content = posts.map((post) =&gt; <br>&lt;Post key=&#123;post.id&#125;<br>  id=&#123;post.id&#125;<br>  title=&#123;post.title&#125; /&gt;<br>);<br></code></pre></td></tr></table></figure></p><p>上面例子中,Post组件可以读出props.id,但是不能读出props.key;</p></blockquote><h3 id="在JSX中嵌入map"><a href="#在JSX中嵌入map" class="headerlink" title="在JSX中嵌入map()"></a>在JSX中嵌入map()</h3><blockquote><p>JSX允许在大括号中嵌入任何表达式,所以我们可以在map()中这样使用:<br><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs undefined">function NumberList(props)&#123;<br> const nubers = props.numbers;<br>reutnr (<br>&lt;ul&gt;<br>&#123;numbers.map(number) =&gt;<br>&lt;ListItem key=&#123;number.toString()&#125; value=&#123;number&#125; /&gt;<br>&lt;/ul&gt;<br>)<br> &#125;<br></code></pre></td></tr></table></figure></p><p>这么做有时可以使你的代码更清晰,但有时这种风格会被滥用,就像在javascript中一样,何时需要为了可读性提取出一个变量,这完全取决于你自己,但请记住,如果一个map() 嵌套了太多层级,那你就可以提取出组件;</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;React-列表-和-keys&quot;&gt;&lt;a href=&quot;#React-列表-和-keys&quot; class=&quot;headerlink&quot; title=&quot;React 列表 和 keys&quot;&gt;&lt;/a&gt;React 列表 和 keys&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;我们可以使
      
    
    </summary>
    
      <category term="笔记" scheme="http://www.wanglichao.top/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="前端" scheme="http://www.wanglichao.top/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="react" scheme="http://www.wanglichao.top/tags/react/"/>
    
      <category term="JS" scheme="http://www.wanglichao.top/tags/JS/"/>
    
  </entry>
  
</feed>
